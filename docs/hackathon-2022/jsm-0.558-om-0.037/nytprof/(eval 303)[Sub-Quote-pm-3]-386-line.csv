# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000003,2,0.000002,my $isa_check_for__5fpath_5fto_5fresource = ${$_[1]->{"\$isa_check_for__5fpath_5fto_5fresource"}};
0.000000,1,0.000000,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000001,1,0.000001,my $default_for__5fpath_5fto_5fresource = ${$_[1]->{"\$default_for__5fpath_5fto_5fresource"}};
0.000000,1,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000000,0,0.000000,package JSON::Schema::Modern::Document;
0.000065,2,0.000032,no warnings 'closure';
0.000000,0,0.000000,sub _assert__path_to_resource {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package Method::Generate::Accessor::_Generated;
0.000000,0,0.000000,BEGIN {
0.000001,1,0.000001,$^H = 2018;
0.000001,1,0.000001,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000004,1,0.000004,%^H = (
0.000000,0,0.000000,);
0.000040,1,0.000040,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.071085,25862,0.000003,do {
0.000000,0,0.000000,my $val = exists $_[0]->{"_path_to_resource"} ? 
0.000000,0,0.000000,$_[0]->{"_path_to_resource"}
0.029141,25862,0.000001,:    do {
0.000073,12,0.000006,my $value = $default_for__5fpath_5fto_5fresource->($_[0]);
0.001052,758,0.000001,do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and do { my $ok = 1; for my $i (values %{$value}) { ($ok = 0, last) unless do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($i)) and (not grep {my $v = ($i)->{$_};not((/\A(?:canonical_uri|path|specification_version|vocabularies|configs)\z/) or (((!!1)) and ((!defined($v)))))} keys %{$i}) and exists($i->{"canonical_uri"}) and do { package Type::Tiny; Scalar::Util::blessed($i->{"canonical_uri"}) and $i->{"canonical_uri"}->isa(q[Mojo::URL]) } and exists($i->{"path"}) and do { package Type::Tiny; defined($i->{"path"}) and do { ref(\$i->{"path"}) eq 'SCALAR' or ref(\(my $val = $i->{"path"})) eq 'SCALAR' } } and exists($i->{"specification_version"}) and do { package Type::Tiny; defined($i->{"specification_version"}) and do { ref(\$i->{"specification_version"}) eq 'SCALAR' or ref(\(my $val = $i->{"specification_version"})) eq 'SCALAR' } } and exists($i->{"vocabularies"}) and (do { package Type::Tiny; Ref::Util::XS::is_plain_arrayref($i->{"vocabularies"}) } and do { my $ok = 1; for my $i (@{$i->{"vocabularies"}}) { ($ok = 0, last) unless ((do { package Type::Tiny; Types::Standard::_is_class_loaded(do { my $tmp = $i }) }) && (do { local $_ = $i; $_->DOES('JSON::Schema::Modern::Vocabulary') })) }; $ok }) and exists($i->{"configs"}) and do { package Type::Tiny; Ref::Util::XS::is_plain_hashref($i->{"configs"}) } } }; $ok } }) or Type::Tiny::_failed_check($isa_check_for__5fpath_5fto_5fresource, "HashRef[Dict[canonical_uri=>InstanceOf[\"Mojo::URL\"],configs=>HashRef,path=>Str,specification_version=>Str,vocabularies=>ArrayRef[__ANON__],Slurpy[HashRef[Undef]]]]", $value, "attribute_name","_path_to_resource","attribute_step","isa check","mgaca","0","varname","\$self->{\"_path_to_resource\"}"); $value };
0.000007,12,0.000001,$_[0]->{"_path_to_resource"} = $value
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.008183,25862,0.000000,exists $_[0]->{"_path_to_resource"}
0.000000,0,0.000000,or Carp::croak(q{Attempted to access '}."_path_to_resource".q{' but it is not set});
0.007509,25862,0.000000,$val;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000001,1,0.000001,$$_UNQUOTED = \&_assert__path_to_resource;
0.000000,0,0.000000,}
0.000005,1,0.000005,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
