# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000001,2,0.000000,my $isa_check_for__5fmetaschema_5fvocabulary_5fclasses = ${$_[1]->{"\$isa_check_for__5fmetaschema_5fvocabulary_5fclasses"}};
0.000000,1,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000001,1,0.000001,my $default_for__5fmetaschema_5fvocabulary_5fclasses = ${$_[1]->{"\$default_for__5fmetaschema_5fvocabulary_5fclasses"}};
0.000000,1,0.000000,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000000,0,0.000000,package JSON::Schema::Modern;
0.000030,2,0.000015,no warnings 'closure';
0.000000,0,0.000000,sub _assert__metaschema_vocabulary_classes {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package Method::Generate::Accessor::_Generated;
0.000000,0,0.000000,BEGIN {
0.000000,1,0.000000,$^H = 2018;
0.000000,1,0.000000,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000002,1,0.000002,%^H = (
0.000000,0,0.000000,);
0.000026,1,0.000026,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.002024,759,0.000003,do {
0.000000,0,0.000000,my $val = exists $_[0]->{"_metaschema_vocabulary_classes"} ? 
0.000000,0,0.000000,$_[0]->{"_metaschema_vocabulary_classes"}
0.000856,759,0.000001,:    do {
0.000004,1,0.000004,my $value = $default_for__5fmetaschema_5fvocabulary_5fclasses->($_[0]);
0.000337,103,0.000003,do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and do { my $ok = 1; for my $i (values %{$value}) { ($ok = 0, last) unless do { package Type::Tiny; (Ref::Util::XS::is_plain_arrayref($i)) and @{$i} == 2 and (defined($i->[0]) and !ref($i->[0]) and $i->[0] =~ m{\A(?:draft(?:20(?:19\-09|20\-12)|7))\z}) and do { package Type::Tiny; (Ref::Util::XS::is_plain_arrayref($i->[1])) and do { my $ok = 1; for my $i (@{$i->[1]}) { ($ok = 0, last) unless ((do { package Type::Tiny; Types::Standard::_is_class_loaded(do { my $tmp = $i }) }) && (do { local $_ = $i; $_->DOES('JSON::Schema::Modern::Vocabulary') })) }; $ok } } } }; $ok } }) or Type::Tiny::_failed_check($isa_check_for__5fmetaschema_5fvocabulary_5fclasses, "HashRef[Tuple[Enum[\"draft7\",\"draft2019-09\",\"draft2020-12\"],ArrayRef[__ANON__]]]", $value, "attribute_name","_metaschema_vocabulary_classes","attribute_step","isa check","mgaca","0","varname","\$self->{\"_metaschema_vocabulary_classes\"}"); $value };
0.000001,1,0.000001,$_[0]->{"_metaschema_vocabulary_classes"} = $value
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000211,759,0.000000,exists $_[0]->{"_metaschema_vocabulary_classes"}
0.000000,0,0.000000,or Carp::croak(q{Attempted to access '}."_metaschema_vocabulary_classes".q{' but it is not set});
0.000195,759,0.000000,$val;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000001,1,0.000001,$$_UNQUOTED = \&_assert__metaschema_vocabulary_classes;
0.000000,0,0.000000,}
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
