# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000001,2,0.000000,my $isa_check_for_annotations = ${$_[1]->{"\$isa_check_for_annotations"}};
0.000000,1,0.000000,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000001,1,0.000001,my $default_for_annotations = ${$_[1]->{"\$default_for_annotations"}};
0.000000,1,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000000,1,0.000000,my $coerce_for_annotations = ${$_[1]->{"\$coerce_for_annotations"}};
0.000000,0,0.000000,package JSON::Schema::Modern::Result;
0.000044,2,0.000022,no warnings 'closure';
0.000000,0,0.000000,sub _assert_annotations {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package Method::Generate::Accessor::_Generated;
0.000000,0,0.000000,BEGIN {
0.000001,1,0.000001,$^H = 2018;
0.000000,1,0.000000,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000003,1,0.000003,%^H = (
0.000000,0,0.000000,);
0.000096,1,0.000096,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.000000,0,0.000000,do {
0.000000,0,0.000000,my $val = exists $_[0]->{"annotations"} ? 
0.000000,0,0.000000,$_[0]->{"annotations"}
0.000000,0,0.000000,:    do {
0.000000,0,0.000000,my $value = do {
0.000000,0,0.000000,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => undef(),
0.000000,0,0.000000,name     => "annotations",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.000000,0,0.000000,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.000000,0,0.000000,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.000000,0,0.000000,$coerce_for_annotations->($default_for_annotations->($_[0]))),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"annotations\" failed: ".$@);
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.000000,0,0.000000,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000165,2,0.000082,do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_arrayref($value)) and do { my $ok = 1; for my $i (@{$value}) { ($ok = 0, last) unless (Scalar::Util::blessed($i) and $i->isa(q[JSON::Schema::Modern::Annotation])) }; $ok } }) or Type::Tiny::_failed_check($isa_check_for_annotations, "ArrayRef[InstanceOf[\"JSON::Schema::Modern::Annotation\"]]", $value, "attribute_name","annotations","attribute_step","isa check","mgaca","0","varname","\$self->{\"annotations\"}"); $value };
0.000000,0,0.000000,$_[0]->{"annotations"} = $value
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000000,0,0.000000,exists $_[0]->{"annotations"}
0.000000,0,0.000000,or Carp::croak(q{Attempted to access '}."annotations".q{' but it is not set});
0.000000,0,0.000000,$val;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000001,1,0.000001,$$_UNQUOTED = \&_assert_annotations;
0.000000,0,0.000000,}
0.000006,1,0.000006,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
