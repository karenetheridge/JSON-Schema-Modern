# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Mojo::URL;
0.000527,2,0.000264,use Mojo::Base -base;
0.770434,304692,0.000003,use overload bool => sub {1}, '""' => sub { shift->to_string }, fallback => 1;
0.000000,0,0.000000,
0.000651,2,0.000325,use Mojo::Parameters;
0.000550,2,0.000275,use Mojo::Path;
0.002134,2,0.001067,use Mojo::Util qw(decode encode punycode_decode punycode_encode url_escape url_unescape);
0.000000,0,0.000000,
0.000005,1,0.000005,has base => sub { Mojo::URL->new };
0.000002,1,0.000002,has [qw(fragment host port scheme userinfo)];
0.000000,0,0.000000,
0.000000,0,0.000000,sub clone {
0.071269,315836,0.000000,my $self  = shift;
0.249353,315836,0.000001,my $clone = $self->new;
0.852543,315836,0.000003,@$clone{keys %$self} = values %$self;
1.662541,315836,0.000005,$clone->{$_} && ($clone->{$_} = $clone->{$_}->clone) for qw(base path query);
0.528090,315836,0.000002,return $clone;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub host_port {
0.098374,339853,0.000000,my ($self, $host_port) = @_;
0.000000,0,0.000000,
0.062604,339853,0.000000,if (defined $host_port) {
0.137650,99702,0.000001,$self->port($1) if $host_port =~ s/:(\d+)$//;
0.081668,99702,0.000001,my $host = url_unescape $host_port;
0.383299,99702,0.000004,return $host =~ /[^\x00-\x7f]/ ? $self->ihost($host) : $self->host($host);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.222492,240151,0.000001,return undef unless defined(my $host = $self->ihost);
0.518432,237920,0.000002,return $host unless defined(my $port = $self->port);
0.000000,0,0.000000,return "$host:$port";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub ihost {
0.039340,240151,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,# Decode
0.043156,240151,0.000000,return $self->host(join '.', map { /^xn--(.+)$/ ? punycode_decode $1 : $_ } split(/\./, shift, -1)) if @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# Check if host needs to be encoded
0.263511,240151,0.000001,return undef unless defined(my $host = $self->host);
0.759235,237920,0.000003,return $host unless $host =~ /[^\x00-\x7f]/;
0.000000,0,0.000000,
0.000000,0,0.000000,# Encode
0.000000,0,0.000000,return join '.', map { /[^\x00-\x7f]/ ? ('xn--' . punycode_encode $_) : $_ } split(/\./, $host, -1);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.130649,46000,0.000003,sub is_abs { !!shift->scheme }
0.000000,0,0.000000,
1.109295,452446,0.000002,sub new { @_ > 1 ? shift->SUPER::new->parse(@_) : shift->SUPER::new }
0.000000,0,0.000000,
0.000000,0,0.000000,sub parse {
0.048834,136585,0.000000,my ($self, $url) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# Official regex from RFC 3986
0.558268,136585,0.000004,$url =~ m!^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?!;
0.160272,136585,0.000001,$self->scheme($2)                         if defined $2;
0.180636,136585,0.000001,$self->path($5)                           if defined $5;
0.050129,136585,0.000000,$self->query($7)                          if defined $7;
0.189577,136585,0.000001,$self->fragment(_decode(url_unescape $9)) if defined $9;
0.100427,136585,0.000001,if (defined(my $auth = $4)) {
0.151709,99702,0.000002,$self->userinfo(_decode(url_unescape $1)) if $auth =~ s/^([^\@]+)\@//;
0.073301,99702,0.000001,$self->host_port($auth);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.196500,136585,0.000001,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub password { (shift->userinfo // '') =~ /:(.*)$/ ? $1 : undef }
0.000000,0,0.000000,
0.000000,0,0.000000,sub path {
0.075677,478625,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,# Old path
0.547018,478625,0.000001,$self->{path} ||= Mojo::Path->new;
0.508016,478625,0.000001,return $self->{path} unless @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# New path
0.250224,170548,0.000001,$self->{path} = ref $_[0] ? $_[0] : $self->{path}->merge($_[0]);
0.000000,0,0.000000,
0.210500,170548,0.000001,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub path_query {
0.056949,240151,0.000000,my ($self, $pq) = @_;
0.000000,0,0.000000,
0.037154,240151,0.000000,if (defined $pq) {
0.000000,0,0.000000,return $self unless $pq =~ /^([^?#]*)(?:\?([^#]*))?/;
0.000000,0,0.000000,return defined $2 ? $self->path($1)->query($2) : $self->path($1);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.402691,240151,0.000002,my $query = $self->query->to_string;
0.924157,240151,0.000004,return $self->path->to_string . (length $query ? "?$query" : '');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.598926,240151,0.000002,sub protocol { lc(shift->scheme // '') }
0.000000,0,0.000000,
0.000000,0,0.000000,sub query {
0.048399,287734,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,# Old parameters
0.408961,287734,0.000001,my $q = $self->{query} ||= Mojo::Parameters->new;
0.385427,287734,0.000001,return $q unless @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# Replace with list
0.023848,15861,0.000002,if (@_ > 1) { $q->pairs([])->parse(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,# Merge with hash
0.000000,0,0.000000,elsif (ref $_[0] eq 'HASH') { $q->merge(%{$_[0]}) }
0.000000,0,0.000000,
0.000000,0,0.000000,# Append array
0.000000,0,0.000000,elsif (ref $_[0] eq 'ARRAY') { $q->append(@{$_[0]}) }
0.000000,0,0.000000,
0.000000,0,0.000000,# New parameters
0.010480,15861,0.000001,else { $self->{query} = ref $_[0] ? $_[0] : $q->parse($_[0]) }
0.000000,0,0.000000,
0.020821,15861,0.000001,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub to_abs {
0.012581,45939,0.000000,my $self = shift;
0.000000,0,0.000000,
0.047745,45939,0.000001,my $abs = $self->clone;
0.078243,45939,0.000002,return $abs if $abs->is_abs;
0.000000,0,0.000000,
0.000000,0,0.000000,# Scheme
0.065896,33963,0.000002,my $base = shift || $abs->base;
0.098476,33963,0.000003,$abs->base($base)->scheme($base->scheme);
0.000000,0,0.000000,
0.000000,0,0.000000,# Authority
0.036652,33963,0.000001,return $abs if $abs->host;
0.140711,33963,0.000004,$abs->userinfo($base->userinfo)->host($base->host)->port($base->port);
0.000000,0,0.000000,
0.000000,0,0.000000,# Absolute path
0.036842,33963,0.000001,my $path = $abs->path;
0.036193,33963,0.000001,return $abs if $path->leading_slash;
0.000000,0,0.000000,
0.000000,0,0.000000,# Inherit path
0.077269,33963,0.000002,if (!@{$path->parts}) {
0.053201,15861,0.000003,$abs->path($base->path->clone->canonicalize);
0.000000,0,0.000000,
0.000000,0,0.000000,# Query
0.072330,15861,0.000005,$abs->query($base->query->clone) unless length $abs->query->to_string;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Merge paths
0.080951,18102,0.000004,else { $abs->path($base->path->clone->merge($path)->canonicalize) }
0.000000,0,0.000000,
0.109706,33963,0.000003,return $abs;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.479036,239359,0.000002,sub to_string        { shift->_string(0) }
0.001694,792,0.000002,sub to_unsafe_string { shift->_string(1) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub username { (shift->userinfo // '') =~ /^([^:]+)/ ? $1 : undef }
0.000000,0,0.000000,
0.169418,57141,0.000003,sub _decode { decode('UTF-8', $_[0]) // $_[0] }
0.000000,0,0.000000,
0.961786,383578,0.000003,sub _encode { url_escape encode('UTF-8', $_[0]), $_[1] }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _string {
0.078801,240151,0.000000,my ($self, $unsafe) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# Scheme
0.060687,240151,0.000000,my $url = '';
0.342937,240151,0.000001,if (my $proto = $self->protocol) { $url .= "$proto:" }
0.000000,0,0.000000,
0.000000,0,0.000000,# Authority
0.198612,240151,0.000001,my $auth = $self->host_port;
0.306406,240151,0.000001,$auth = _encode($auth, '^A-Za-z0-9\-._~!$&\'()*+,;=:\[\]') if defined $auth;
0.038454,240151,0.000000,if ($unsafe && defined(my $info = $self->userinfo)) {
0.000000,0,0.000000,$auth = _encode($info, '^A-Za-z0-9\-._~!$&\'()*+,;=:') . '@' . $auth;
0.000000,0,0.000000,}
0.098986,240151,0.000000,$url .= "//$auth" if defined $auth;
0.000000,0,0.000000,
0.000000,0,0.000000,# Path and query
0.247064,240151,0.000001,my $path = $self->path_query;
0.651852,240151,0.000003,$url .= !$auth || !length $path || $path =~ m!^[/?]! ? $path : "/$path";
0.000000,0,0.000000,
0.000000,0,0.000000,# Fragment
0.400802,240151,0.000002,return $url unless defined(my $fragment = $self->fragment);
0.426888,145658,0.000003,return $url . '#' . _encode($fragment, '^A-Za-z0-9\-._~!$&\'()*+,;=:@/?');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,=encoding utf8
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,Mojo::URL - Uniform Resource Locator
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,use Mojo::URL;
0.000000,0,0.000000,
0.000000,0,0.000000,# Parse
0.000000,0,0.000000,my $url = Mojo::URL->new('http://sri:foo@example.com:3000/foo?foo=bar#23');
0.000000,0,0.000000,say $url->scheme;
0.000000,0,0.000000,say $url->userinfo;
0.000000,0,0.000000,say $url->host;
0.000000,0,0.000000,say $url->port;
0.000000,0,0.000000,say $url->path;
0.000000,0,0.000000,say $url->query;
0.000000,0,0.000000,say $url->fragment;
0.000000,0,0.000000,
0.000000,0,0.000000,# Build
0.000000,0,0.000000,my $url = Mojo::URL->new;
0.000000,0,0.000000,$url->scheme('http');
0.000000,0,0.000000,$url->host('example.com');
0.000000,0,0.000000,$url->port(3000);
0.000000,0,0.000000,$url->path('/foo/bar');
0.000000,0,0.000000,$url->query(foo => 'bar');
0.000000,0,0.000000,$url->fragment(23);
0.000000,0,0.000000,say "$url";
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,L<Mojo::URL> implements a subset of L<RFC 3986|https://tools.ietf.org/html/rfc3986>, L<RFC
0.000000,0,0.000000,3987|https://tools.ietf.org/html/rfc3987> and the L<URL Living Standard|https://url.spec.whatwg.org> for Uniform
0.000000,0,0.000000,Resource Locators with support for IDNA and IRIs.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 ATTRIBUTES
0.000000,0,0.000000,
0.000000,0,0.000000,L<Mojo::URL> implements the following attributes.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 base
0.000000,0,0.000000,
0.000000,0,0.000000,my $base = $url->base;
0.000000,0,0.000000,$url     = $url->base(Mojo::URL->new);
0.000000,0,0.000000,
0.000000,0,0.000000,Base of this URL, defaults to a L<Mojo::URL> object.
0.000000,0,0.000000,
0.000000,0,0.000000,"http://example.com/a/b?c"
0.000000,0,0.000000,Mojo::URL->new("/a/b?c")->base(Mojo::URL->new("http://example.com"))->to_abs;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 fragment
0.000000,0,0.000000,
0.000000,0,0.000000,my $fragment = $url->fragment;
0.000000,0,0.000000,$url         = $url->fragment('♥mojolicious♥');
0.000000,0,0.000000,
0.000000,0,0.000000,Fragment part of this URL.
0.000000,0,0.000000,
0.000000,0,0.000000,# "yada"
0.000000,0,0.000000,Mojo::URL->new('http://example.com/foo?bar=baz#yada')->fragment;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 host
0.000000,0,0.000000,
0.000000,0,0.000000,my $host = $url->host;
0.000000,0,0.000000,$url     = $url->host('127.0.0.1');
0.000000,0,0.000000,
0.000000,0,0.000000,Host part of this URL.
0.000000,0,0.000000,
0.000000,0,0.000000,# "example.com"
0.000000,0,0.000000,Mojo::URL->new('http://sri:t3st@example.com:8080/foo')->host;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 port
0.000000,0,0.000000,
0.000000,0,0.000000,my $port = $url->port;
0.000000,0,0.000000,$url     = $url->port(8080);
0.000000,0,0.000000,
0.000000,0,0.000000,Port part of this URL.
0.000000,0,0.000000,
0.000000,0,0.000000,# "8080"
0.000000,0,0.000000,Mojo::URL->new('http://sri:t3st@example.com:8080/foo')->port;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 scheme
0.000000,0,0.000000,
0.000000,0,0.000000,my $scheme = $url->scheme;
0.000000,0,0.000000,$url       = $url->scheme('http');
0.000000,0,0.000000,
0.000000,0,0.000000,Scheme part of this URL.
0.000000,0,0.000000,
0.000000,0,0.000000,# "http"
0.000000,0,0.000000,Mojo::URL->new('http://example.com/foo')->scheme;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 userinfo
0.000000,0,0.000000,
0.000000,0,0.000000,my $info = $url->userinfo;
0.000000,0,0.000000,$url     = $url->userinfo('root:♥');
0.000000,0,0.000000,
0.000000,0,0.000000,Userinfo part of this URL.
0.000000,0,0.000000,
0.000000,0,0.000000,# "sri:t3st"
0.000000,0,0.000000,Mojo::URL->new('https://sri:t3st@example.com/foo')->userinfo;
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 METHODS
0.000000,0,0.000000,
0.000000,0,0.000000,L<Mojo::URL> inherits all methods from L<Mojo::Base> and implements the following new ones.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 clone
0.000000,0,0.000000,
0.000000,0,0.000000,my $url2 = $url->clone;
0.000000,0,0.000000,
0.000000,0,0.000000,Return a new L<Mojo::URL> object cloned from this URL.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 host_port
0.000000,0,0.000000,
0.000000,0,0.000000,my $host_port = $url->host_port;
0.000000,0,0.000000,$url          = $url->host_port('example.com:8080');
0.000000,0,0.000000,
0.000000,0,0.000000,Normalized version of L</"host"> and L</"port">.
0.000000,0,0.000000,
0.000000,0,0.000000,# "xn--n3h.net:8080"
0.000000,0,0.000000,Mojo::URL->new('http://☃.net:8080/test')->host_port;
0.000000,0,0.000000,
0.000000,0,0.000000,# "example.com"
0.000000,0,0.000000,Mojo::URL->new('http://example.com/test')->host_port;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 ihost
0.000000,0,0.000000,
0.000000,0,0.000000,my $ihost = $url->ihost;
0.000000,0,0.000000,$url      = $url->ihost('xn--bcher-kva.ch');
0.000000,0,0.000000,
0.000000,0,0.000000,Host part of this URL in punycode format.
0.000000,0,0.000000,
0.000000,0,0.000000,# "xn--n3h.net"
0.000000,0,0.000000,Mojo::URL->new('http://☃.net')->ihost;
0.000000,0,0.000000,
0.000000,0,0.000000,# "example.com"
0.000000,0,0.000000,Mojo::URL->new('http://example.com')->ihost;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 is_abs
0.000000,0,0.000000,
0.000000,0,0.000000,my $bool = $url->is_abs;
0.000000,0,0.000000,
0.000000,0,0.000000,Check if URL is absolute.
0.000000,0,0.000000,
0.000000,0,0.000000,# True
0.000000,0,0.000000,Mojo::URL->new('http://example.com')->is_abs;
0.000000,0,0.000000,Mojo::URL->new('http://example.com/test/index.html')->is_abs;
0.000000,0,0.000000,
0.000000,0,0.000000,# False
0.000000,0,0.000000,Mojo::URL->new('test/index.html')->is_abs;
0.000000,0,0.000000,Mojo::URL->new('/test/index.html')->is_abs;
0.000000,0,0.000000,Mojo::URL->new('//example.com/test/index.html')->is_abs;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 new
0.000000,0,0.000000,
0.000000,0,0.000000,my $url = Mojo::URL->new;
0.000000,0,0.000000,my $url = Mojo::URL->new('http://127.0.0.1:3000/foo?f=b&baz=2#foo');
0.000000,0,0.000000,
0.000000,0,0.000000,Construct a new L<Mojo::URL> object and L</"parse"> URL if necessary.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 parse
0.000000,0,0.000000,
0.000000,0,0.000000,$url = $url->parse('http://127.0.0.1:3000/foo/bar?fo=o&baz=23#foo');
0.000000,0,0.000000,
0.000000,0,0.000000,Parse relative or absolute URL.
0.000000,0,0.000000,
0.000000,0,0.000000,# "/test/123"
0.000000,0,0.000000,$url->parse('/test/123?foo=bar')->path;
0.000000,0,0.000000,
0.000000,0,0.000000,# "example.com"
0.000000,0,0.000000,$url->parse('http://example.com/test/123?foo=bar')->host;
0.000000,0,0.000000,
0.000000,0,0.000000,# "sri@example.com"
0.000000,0,0.000000,$url->parse('mailto:sri@example.com')->path;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 password
0.000000,0,0.000000,
0.000000,0,0.000000,my $password = $url->password;
0.000000,0,0.000000,
0.000000,0,0.000000,Password part of L</"userinfo">.
0.000000,0,0.000000,
0.000000,0,0.000000,# "s3cret"
0.000000,0,0.000000,Mojo::URL->new('http://isabel:s3cret@mojolicious.org')->password;
0.000000,0,0.000000,
0.000000,0,0.000000,# "s:3:c:r:e:t"
0.000000,0,0.000000,Mojo::URL->new('http://isabel:s:3:c:r:e:t@mojolicious.org')->password;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 path
0.000000,0,0.000000,
0.000000,0,0.000000,my $path = $url->path;
0.000000,0,0.000000,$url     = $url->path('foo/bar');
0.000000,0,0.000000,$url     = $url->path('/foo/bar');
0.000000,0,0.000000,$url     = $url->path(Mojo::Path->new);
0.000000,0,0.000000,
0.000000,0,0.000000,Path part of this URL, relative paths will be merged with L<Mojo::Path/"merge">, defaults to a L<Mojo::Path> object.
0.000000,0,0.000000,
0.000000,0,0.000000,# "test"
0.000000,0,0.000000,Mojo::URL->new('http://example.com/test/Mojo')->path->parts->[0];
0.000000,0,0.000000,
0.000000,0,0.000000,# "/test/DOM/HTML"
0.000000,0,0.000000,Mojo::URL->new('http://example.com/test/Mojo')->path->merge('DOM/HTML');
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com/DOM/HTML"
0.000000,0,0.000000,Mojo::URL->new('http://example.com/test/Mojo')->path('/DOM/HTML');
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com/test/DOM/HTML"
0.000000,0,0.000000,Mojo::URL->new('http://example.com/test/Mojo')->path('DOM/HTML');
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com/test/Mojo/DOM/HTML"
0.000000,0,0.000000,Mojo::URL->new('http://example.com/test/Mojo/')->path('DOM/HTML');
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 path_query
0.000000,0,0.000000,
0.000000,0,0.000000,my $path_query = $url->path_query;
0.000000,0,0.000000,$url           = $url->path_query('/foo/bar?a=1&b=2');
0.000000,0,0.000000,
0.000000,0,0.000000,Normalized version of L</"path"> and L</"query">.
0.000000,0,0.000000,
0.000000,0,0.000000,# "/test?a=1&b=2"
0.000000,0,0.000000,Mojo::URL->new('http://example.com/test?a=1&b=2')->path_query;
0.000000,0,0.000000,
0.000000,0,0.000000,# "/"
0.000000,0,0.000000,Mojo::URL->new('http://example.com/')->path_query;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 protocol
0.000000,0,0.000000,
0.000000,0,0.000000,my $proto = $url->protocol;
0.000000,0,0.000000,
0.000000,0,0.000000,Normalized version of L</"scheme">.
0.000000,0,0.000000,
0.000000,0,0.000000,# "http"
0.000000,0,0.000000,Mojo::URL->new('HtTp://example.com')->protocol;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 query
0.000000,0,0.000000,
0.000000,0,0.000000,my $query = $url->query;
0.000000,0,0.000000,$url      = $url->query({merge => 'to'});
0.000000,0,0.000000,$url      = $url->query([append => 'with']);
0.000000,0,0.000000,$url      = $url->query(replace => 'with');
0.000000,0,0.000000,$url      = $url->query('a=1&b=2');
0.000000,0,0.000000,$url      = $url->query(Mojo::Parameters->new);
0.000000,0,0.000000,
0.000000,0,0.000000,Query part of this URL, key/value pairs in an array reference will be appended with L<Mojo::Parameters/"append">, and
0.000000,0,0.000000,key/value pairs in a hash reference merged with L<Mojo::Parameters/"merge">, defaults to a L<Mojo::Parameters> object.
0.000000,0,0.000000,
0.000000,0,0.000000,# "2"
0.000000,0,0.000000,Mojo::URL->new('http://example.com?a=1&b=2')->query->param('b');
0.000000,0,0.000000,
0.000000,0,0.000000,# "a=2&b=2&c=3"
0.000000,0,0.000000,Mojo::URL->new('http://example.com?a=1&b=2')->query->merge(a => 2, c => 3);
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com?a=2&c=3"
0.000000,0,0.000000,Mojo::URL->new('http://example.com?a=1&b=2')->query(a => 2, c => 3);
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com?a=2&a=3"
0.000000,0,0.000000,Mojo::URL->new('http://example.com?a=1&b=2')->query(a => [2, 3]);
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com?a=2&b=2&c=3"
0.000000,0,0.000000,Mojo::URL->new('http://example.com?a=1&b=2')->query({a => 2, c => 3});
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com?b=2"
0.000000,0,0.000000,Mojo::URL->new('http://example.com?a=1&b=2')->query({a => undef});
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com?a=1&b=2&a=2&c=3"
0.000000,0,0.000000,Mojo::URL->new('http://example.com?a=1&b=2')->query([a => 2, c => 3]);
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 to_abs
0.000000,0,0.000000,
0.000000,0,0.000000,my $abs = $url->to_abs;
0.000000,0,0.000000,my $abs = $url->to_abs(Mojo::URL->new('http://example.com/foo'));
0.000000,0,0.000000,
0.000000,0,0.000000,Return a new L<Mojo::URL> object cloned from this relative URL and turn it into an absolute one using L</"base"> or
0.000000,0,0.000000,provided base URL.
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com/foo/baz.xml?test=123"
0.000000,0,0.000000,Mojo::URL->new('baz.xml?test=123')
0.000000,0,0.000000,->to_abs(Mojo::URL->new('http://example.com/foo/bar.html'));
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com/baz.xml?test=123"
0.000000,0,0.000000,Mojo::URL->new('/baz.xml?test=123')
0.000000,0,0.000000,->to_abs(Mojo::URL->new('http://example.com/foo/bar.html'));
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://example.com/foo/baz.xml?test=123"
0.000000,0,0.000000,Mojo::URL->new('//example.com/foo/baz.xml?test=123')
0.000000,0,0.000000,->to_abs(Mojo::URL->new('http://example.com/foo/bar.html'));
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 to_string
0.000000,0,0.000000,
0.000000,0,0.000000,my $str = $url->to_string;
0.000000,0,0.000000,
0.000000,0,0.000000,Turn URL into a string. Note that L</"userinfo"> will not be included for security reasons.
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://mojolicious.org"
0.000000,0,0.000000,Mojo::URL->new->scheme('http')->host('mojolicious.org')->to_string;
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://mojolicious.org"
0.000000,0,0.000000,Mojo::URL->new('http://daniel:s3cret@mojolicious.org')->to_string;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 to_unsafe_string
0.000000,0,0.000000,
0.000000,0,0.000000,my $str = $url->to_unsafe_string;
0.000000,0,0.000000,
0.000000,0,0.000000,Same as L</"to_string">, but includes L</"userinfo">.
0.000000,0,0.000000,
0.000000,0,0.000000,# "http://daniel:s3cret@mojolicious.org"
0.000000,0,0.000000,Mojo::URL->new('http://daniel:s3cret@mojolicious.org')->to_unsafe_string;
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 username
0.000000,0,0.000000,
0.000000,0,0.000000,my $username = $url->username;
0.000000,0,0.000000,
0.000000,0,0.000000,Username part of L</"userinfo">.
0.000000,0,0.000000,
0.000000,0,0.000000,# "isabel"
0.000000,0,0.000000,Mojo::URL->new('http://isabel:s3cret@mojolicious.org')->username;
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 OPERATORS
0.000000,0,0.000000,
0.000000,0,0.000000,L<Mojo::URL> overloads the following operators.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 bool
0.000000,0,0.000000,
0.000000,0,0.000000,my $bool = !!$url;
0.000000,0,0.000000,
0.000000,0,0.000000,Always true.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 stringify
0.000000,0,0.000000,
0.000000,0,0.000000,my $str = "$url";
0.000000,0,0.000000,
0.000000,0,0.000000,Alias for L</"to_string">.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SEE ALSO
0.000000,0,0.000000,
0.000000,0,0.000000,L<Mojolicious>, L<Mojolicious::Guides>, L<https://mojolicious.org>.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
