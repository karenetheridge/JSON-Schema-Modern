# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Tie::Array;
0.000000,0,0.000000,
0.000064,2,0.000032,use 5.006_001;
0.000043,2,0.000022,use strict;
0.000883,2,0.000441,use Carp;
0.000000,1,0.000000,our $VERSION = '1.07';
0.000000,0,0.000000,
0.000000,0,0.000000,# Pod documentation after __END__ below.
0.000000,0,0.000000,
0.000000,0,0.000000,sub DESTROY { }
0.000000,0,0.000000,sub EXTEND  { }
0.000000,0,0.000000,sub UNSHIFT { scalar shift->SPLICE(0,0,@_) }
0.000000,0,0.000000,sub SHIFT { shift->SPLICE(0,1) }
0.000000,0,0.000000,sub CLEAR   { shift->STORESIZE(0) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub PUSH
0.000000,0,0.000000,{
0.000000,0,0.000000,my $obj = shift;
0.000000,0,0.000000,my $i   = $obj->FETCHSIZE;
0.000000,0,0.000000,$obj->STORE($i++, shift) while (@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub POP
0.000000,0,0.000000,{
0.000000,0,0.000000,my $obj = shift;
0.000000,0,0.000000,my $newsize = $obj->FETCHSIZE - 1;
0.000000,0,0.000000,my $val;
0.000000,0,0.000000,if ($newsize >= 0)
0.000000,0,0.000000,{
0.000000,0,0.000000,$val = $obj->FETCH($newsize);
0.000000,0,0.000000,$obj->STORESIZE($newsize);
0.000000,0,0.000000,}
0.000000,0,0.000000,$val;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub SPLICE {
0.000000,0,0.000000,my $obj = shift;
0.000000,0,0.000000,my $sz  = $obj->FETCHSIZE;
0.000000,0,0.000000,my $off = (@_) ? shift : 0;
0.000000,0,0.000000,$off += $sz if ($off < 0);
0.000000,0,0.000000,my $len = (@_) ? shift : $sz - $off;
0.000000,0,0.000000,$len += $sz - $off if $len < 0;
0.000000,0,0.000000,my @result;
0.000000,0,0.000000,for (my $i = 0; $i < $len; $i++) {
0.000000,0,0.000000,push(@result,$obj->FETCH($off+$i));
0.000000,0,0.000000,}
0.000000,0,0.000000,$off = $sz if $off > $sz;
0.000000,0,0.000000,$len -= $off + $len - $sz if $off + $len > $sz;
0.000000,0,0.000000,if (@_ > $len) {
0.000000,0,0.000000,# Move items up to make room
0.000000,0,0.000000,my $d = @_ - $len;
0.000000,0,0.000000,my $e = $off+$len;
0.000000,0,0.000000,$obj->EXTEND($sz+$d);
0.000000,0,0.000000,for (my $i=$sz-1; $i >= $e; $i--) {
0.000000,0,0.000000,my $val = $obj->FETCH($i);
0.000000,0,0.000000,$obj->STORE($i+$d,$val);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif (@_ < $len) {
0.000000,0,0.000000,# Move items down to close the gap
0.000000,0,0.000000,my $d = $len - @_;
0.000000,0,0.000000,my $e = $off+$len;
0.000000,0,0.000000,for (my $i=$off+$len; $i < $sz; $i++) {
0.000000,0,0.000000,my $val = $obj->FETCH($i);
0.000000,0,0.000000,$obj->STORE($i-$d,$val);
0.000000,0,0.000000,}
0.000000,0,0.000000,$obj->STORESIZE($sz-$d);
0.000000,0,0.000000,}
0.000000,0,0.000000,for (my $i=0; $i < @_; $i++) {
0.000000,0,0.000000,$obj->STORE($off+$i,$_[$i]);
0.000000,0,0.000000,}
0.000000,0,0.000000,return wantarray ? @result : pop @result;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub EXISTS {
0.000000,0,0.000000,my $pkg = ref $_[0];
0.000000,0,0.000000,croak "$pkg doesn't define an EXISTS method";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub DELETE {
0.000000,0,0.000000,my $pkg = ref $_[0];
0.000000,0,0.000000,croak "$pkg doesn't define a DELETE method";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,package Tie::StdArray;
0.000011,1,0.000011,our @ISA = 'Tie::Array';
0.000000,0,0.000000,
0.000000,0,0.000000,sub TIEARRAY  { bless [], $_[0] }
0.000000,0,0.000000,sub FETCHSIZE { scalar @{$_[0]} }
0.000000,0,0.000000,sub STORESIZE { $#{$_[0]} = $_[1]-1 }
0.000000,0,0.000000,sub STORE     { $_[0]->[$_[1]] = $_[2] }
0.000000,0,0.000000,sub FETCH     { $_[0]->[$_[1]] }
0.000000,0,0.000000,sub CLEAR     { @{$_[0]} = () }
0.000000,0,0.000000,sub POP       { pop(@{$_[0]}) }
0.000000,0,0.000000,sub PUSH      { my $o = shift; push(@$o,@_) }
0.000000,0,0.000000,sub SHIFT     { shift(@{$_[0]}) }
0.000000,0,0.000000,sub UNSHIFT   { my $o = shift; unshift(@$o,@_) }
0.000000,0,0.000000,sub EXISTS    { exists $_[0]->[$_[1]] }
0.000000,0,0.000000,sub DELETE    { delete $_[0]->[$_[1]] }
0.000000,0,0.000000,
0.000000,0,0.000000,sub SPLICE
0.000000,0,0.000000,{
0.000000,0,0.000000,my $ob  = shift;
0.000000,0,0.000000,my $sz  = $ob->FETCHSIZE;
0.000000,0,0.000000,my $off = @_ ? shift : 0;
0.000000,0,0.000000,$off   += $sz if $off < 0;
0.000000,0,0.000000,my $len = @_ ? shift : $sz-$off;
0.000000,0,0.000000,return splice(@$ob,$off,$len,@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000012,1,0.000012,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
