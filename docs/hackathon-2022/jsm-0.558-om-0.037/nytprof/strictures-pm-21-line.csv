# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package strictures;
0.000000,0,0.000000,
0.000031,2,0.000016,use strict;
0.000138,2,0.000069,use warnings FATAL => 'all';
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000003,1,0.000003,*_PERL_LT_5_8_4 = ("$]" < 5.008004) ? sub(){1} : sub(){0};
0.000000,0,0.000000,# goto &UNIVERSAL::VERSION usually works on 5.8, but fails on some ARM
0.000000,0,0.000000,# machines.  Seems to always work on 5.10 though.
0.000004,1,0.000004,*_CAN_GOTO_VERSION = ("$]" >= 5.010000) ? sub(){1} : sub(){0};
0.000255,1,0.000255,}
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = '2.000006';
0.000001,1,0.000001,$VERSION =~ tr/_//d;
0.000000,0,0.000000,
0.000024,1,0.000024,our @WARNING_CATEGORIES = grep { exists $warnings::Offsets{$_} } qw(
0.000000,0,0.000000,closure
0.000000,0,0.000000,chmod
0.000000,0,0.000000,deprecated
0.000000,0,0.000000,exiting
0.000000,0,0.000000,experimental
0.000000,0,0.000000,experimental::alpha_assertions
0.000000,0,0.000000,experimental::autoderef
0.000000,0,0.000000,experimental::bitwise
0.000000,0,0.000000,experimental::const_attr
0.000000,0,0.000000,experimental::declared_refs
0.000000,0,0.000000,experimental::lexical_subs
0.000000,0,0.000000,experimental::lexical_topic
0.000000,0,0.000000,experimental::postderef
0.000000,0,0.000000,experimental::private_use
0.000000,0,0.000000,experimental::re_strict
0.000000,0,0.000000,experimental::refaliasing
0.000000,0,0.000000,experimental::regex_sets
0.000000,0,0.000000,experimental::script_run
0.000000,0,0.000000,experimental::signatures
0.000000,0,0.000000,experimental::smartmatch
0.000000,0,0.000000,experimental::win32_perlio
0.000000,0,0.000000,glob
0.000000,0,0.000000,imprecision
0.000000,0,0.000000,io
0.000000,0,0.000000,closed
0.000000,0,0.000000,exec
0.000000,0,0.000000,layer
0.000000,0,0.000000,newline
0.000000,0,0.000000,pipe
0.000000,0,0.000000,syscalls
0.000000,0,0.000000,unopened
0.000000,0,0.000000,locale
0.000000,0,0.000000,misc
0.000000,0,0.000000,missing
0.000000,0,0.000000,numeric
0.000000,0,0.000000,once
0.000000,0,0.000000,overflow
0.000000,0,0.000000,pack
0.000000,0,0.000000,portable
0.000000,0,0.000000,recursion
0.000000,0,0.000000,redefine
0.000000,0,0.000000,redundant
0.000000,0,0.000000,regexp
0.000000,0,0.000000,severe
0.000000,0,0.000000,debugging
0.000000,0,0.000000,inplace
0.000000,0,0.000000,internal
0.000000,0,0.000000,malloc
0.000000,0,0.000000,shadow
0.000000,0,0.000000,signal
0.000000,0,0.000000,substr
0.000000,0,0.000000,syntax
0.000000,0,0.000000,ambiguous
0.000000,0,0.000000,bareword
0.000000,0,0.000000,digit
0.000000,0,0.000000,illegalproto
0.000000,0,0.000000,parenthesis
0.000000,0,0.000000,precedence
0.000000,0,0.000000,printf
0.000000,0,0.000000,prototype
0.000000,0,0.000000,qw
0.000000,0,0.000000,reserved
0.000000,0,0.000000,semicolon
0.000000,0,0.000000,taint
0.000000,0,0.000000,threads
0.000000,0,0.000000,uninitialized
0.000000,0,0.000000,umask
0.000000,0,0.000000,unpack
0.000000,0,0.000000,untie
0.000000,0,0.000000,utf8
0.000000,0,0.000000,non_unicode
0.000000,0,0.000000,nonchar
0.000000,0,0.000000,surrogate
0.000000,0,0.000000,void
0.000000,0,0.000000,void_unusual
0.000000,0,0.000000,y2k
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,sub VERSION {
0.000000,0,0.000000,{
0.001008,24,0.000042,no warnings;
0.000010,22,0.000000,local $@;
0.000338,66,0.000005,if (defined $_[1] && eval { &UNIVERSAL::VERSION; 1}) {
0.000027,22,0.000001,$^H |= 0x20000
0.000000,0,0.000000,unless _PERL_LT_5_8_4;
0.000058,22,0.000003,$^H{strictures_enable} = int $_[1];
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000296,22,0.000013,_CAN_GOTO_VERSION ? goto &UNIVERSAL::VERSION : &UNIVERSAL::VERSION;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,our %extra_load_states;
0.000000,0,0.000000,
0.000000,0,0.000000,our $Smells_Like_VCS;
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000008,22,0.000000,my $class = shift;
0.000031,22,0.000001,my %opts = @_ == 1 ? %{$_[0]} : @_;
0.000053,22,0.000002,if (!exists $opts{version}) {
0.000000,0,0.000000,$opts{version}
0.000000,0,0.000000,= exists $^H{strictures_enable} ? delete $^H{strictures_enable}
0.000000,0,0.000000,: int $VERSION;
0.000000,0,0.000000,}
0.000084,22,0.000004,$opts{file} = (caller)[1];
0.000137,22,0.000006,$class->_enable(\%opts);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _enable {
0.000009,22,0.000000,my ($class, $opts) = @_;
0.000016,22,0.000001,my $version = $opts->{version};
0.000005,22,0.000000,$version = 'undef'
0.000000,0,0.000000,if !defined $version;
0.000012,22,0.000001,my $method = "_enable_$version";
0.000097,22,0.000004,if (!$class->can($method)) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak("Major version specified as $version - not supported!");
0.000000,0,0.000000,}
0.000075,22,0.000003,$class->$method($opts);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _enable_1 {
0.000002,4,0.000000,my ($class, $opts) = @_;
0.000020,4,0.000005,strict->import;
0.000010,4,0.000003,warnings->import(FATAL => 'all');
0.000000,0,0.000000,
0.000017,4,0.000004,if (_want_extra($opts->{file})) {
0.000000,0,0.000000,_load_extras(qw(indirect multidimensional bareword::filehandles));
0.000000,0,0.000000,indirect->unimport(':fatal')
0.000000,0,0.000000,if $extra_load_states{indirect};
0.000000,0,0.000000,multidimensional->unimport
0.000000,0,0.000000,if $extra_load_states{multidimensional};
0.000000,0,0.000000,bareword::filehandles->unimport
0.000000,0,0.000000,if $extra_load_states{'bareword::filehandles'};
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000001,1,0.000001,our @V2_NONFATAL = grep { exists $warnings::Offsets{$_} } (
0.000000,0,0.000000,'exec',         # not safe to catch
0.000000,0,0.000000,'recursion',    # will be caught by other mechanisms
0.000000,0,0.000000,'internal',     # not safe to catch
0.000000,0,0.000000,'malloc',       # not safe to catch
0.000000,0,0.000000,'newline',      # stat on nonexistent file with a newline in it
0.000000,0,0.000000,'experimental', # no reason for these to be fatal
0.000000,0,0.000000,'deprecated',   # unfortunately can't make these fatal
0.000000,0,0.000000,'portable',     # everything worked fine here, just may not elsewhere
0.000000,0,0.000000,);
0.000000,1,0.000000,our @V2_DISABLE = grep { exists $warnings::Offsets{$_} } (
0.000000,0,0.000000,'once'          # triggers inconsistently, can't be fatalized
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,sub _enable_2 {
0.000004,18,0.000000,my ($class, $opts) = @_;
0.000086,18,0.000005,strict->import;
0.000019,18,0.000001,warnings->import;
0.000041,18,0.000002,warnings->import(FATAL => @WARNING_CATEGORIES);
0.000036,18,0.000002,warnings->unimport(FATAL => @V2_NONFATAL);
0.000019,18,0.000001,warnings->import(@V2_NONFATAL);
0.000019,18,0.000001,warnings->unimport(@V2_DISABLE);
0.000000,0,0.000000,
0.000071,18,0.000004,if (_want_extra($opts->{file})) {
0.000000,0,0.000000,_load_extras(qw(indirect multidimensional bareword::filehandles));
0.000000,0,0.000000,indirect->unimport(':fatal')
0.000000,0,0.000000,if $extra_load_states{indirect};
0.000000,0,0.000000,multidimensional->unimport
0.000000,0,0.000000,if $extra_load_states{multidimensional};
0.000000,0,0.000000,bareword::filehandles->unimport
0.000000,0,0.000000,if $extra_load_states{'bareword::filehandles'};
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _want_extra_env {
0.000019,22,0.000001,if (exists $ENV{PERL_STRICTURES_EXTRA}) {
0.000000,0,0.000000,if (_PERL_LT_5_8_4 and $ENV{PERL_STRICTURES_EXTRA}) {
0.000000,0,0.000000,die 'PERL_STRICTURES_EXTRA checks are not available on perls older'
0.000000,0,0.000000,. "than 5.8.4: please unset \$ENV{PERL_STRICTURES_EXTRA}\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,return $ENV{PERL_STRICTURES_EXTRA} ? 1 : 0;
0.000000,0,0.000000,}
0.000042,22,0.000002,return undef;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _want_extra {
0.000007,22,0.000000,my $file = shift;
0.000029,22,0.000001,my $want_env = _want_extra_env();
0.000011,22,0.000001,return $want_env
0.000000,0,0.000000,if defined $want_env;
0.000000,0,0.000000,return (
0.000116,22,0.000005,!_PERL_LT_5_8_4
0.000000,0,0.000000,and $file =~ /^(?:t|xt|lib|blib)[\\\/]/
0.000000,0,0.000000,and defined $Smells_Like_VCS ? $Smells_Like_VCS
0.000000,0,0.000000,: ( $Smells_Like_VCS = !!(
0.000000,0,0.000000,-e '.git' || -e '.svn' || -e '.hg' || -e '.bzr'
0.000000,0,0.000000,|| (-e '../../dist.ini'
0.000000,0,0.000000,&& (-e '../../.git' || -e '../../.svn' || -e '../../.hg' || -e '../../.bzr' ))
0.000000,0,0.000000,))
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _load_extras {
0.000000,0,0.000000,my @extras = @_;
0.000000,0,0.000000,my @failed;
0.000000,0,0.000000,foreach my $mod (@extras) {
0.000000,0,0.000000,next
0.000000,0,0.000000,if exists $extra_load_states{$mod};
0.000000,0,0.000000,
0.000000,0,0.000000,$extra_load_states{$mod} = eval "require $mod; 1;" or do {
0.000000,0,0.000000,push @failed, $mod;
0.000000,0,0.000000,
0.000000,0,0.000000,#work around 5.8 require bug
0.000000,0,0.000000,(my $file = $mod) =~ s|::|/|g;
0.000000,0,0.000000,delete $INC{"${file}.pm"};
0.000000,0,0.000000,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if (@failed) {
0.000000,0,0.000000,my $failed = join ' ', @failed;
0.000000,0,0.000000,my $extras = join ' ', @extras;
0.000000,0,0.000000,print STDERR <<EOE;
0.000000,0,0.000000,strictures.pm extra testing active but couldn't load all modules. Missing were:
0.000000,0,0.000000,
0.000000,0,0.000000,$failed
0.000000,0,0.000000,
0.000000,0,0.000000,Extra testing is auto-enabled in checkouts only, so if you're the author
0.000000,0,0.000000,of a strictures-using module you need to run:
0.000000,0,0.000000,
0.000000,0,0.000000,cpan $extras
0.000000,0,0.000000,
0.000000,0,0.000000,but these modules are not required by your users.
0.000000,0,0.000000,EOE
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000011,1,0.000011,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
