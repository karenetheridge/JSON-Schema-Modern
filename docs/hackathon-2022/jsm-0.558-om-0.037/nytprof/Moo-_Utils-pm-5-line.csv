# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moo::_Utils;
0.000039,2,0.000019,use strict;
0.000031,2,0.000016,use warnings;
0.000000,0,0.000000,
0.000000,0,0.000000,{
0.000029,2,0.000015,no strict 'refs';
0.000412,2,0.000206,no warnings 'once';
0.000695,206,0.000003,sub _getglob { \*{$_[0]} }
0.000120,41,0.000003,sub _getstash { \%{"$_[0]::"} }
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000001,1,0.000001,BEGIN {
0.000000,1,0.000000,my ($su, $sn);
0.000000,0,0.000000,$su = $INC{'Sub/Util.pm'} && defined &Sub::Util::set_subname
0.000000,0,0.000000,or $sn = $INC{'Sub/Name.pm'}
0.000416,1,0.000416,or $su = eval { require Sub::Util; } && defined &Sub::Util::set_subname
0.000002,1,0.000002,or $sn = eval { require Sub::Name; };
0.000000,0,0.000000,
0.000000,0,0.000000,*_subname = $su ? \&Sub::Util::set_subname
0.000000,0,0.000000,: $sn ? \&Sub::Name::subname
0.000001,1,0.000001,: sub { $_[1] };
0.000001,1,0.000001,*_CAN_SUBNAME = ($su || $sn) ? sub(){1} : sub(){0};
0.000000,0,0.000000,
0.000003,1,0.000003,*_WORK_AROUND_BROKEN_MODULE_STATE = "$]" < 5.009 ? sub(){1} : sub(){0};
0.000000,0,0.000000,*_WORK_AROUND_HINT_LEAKAGE
0.000000,0,0.000000,= "$]" < 5.011 && !("$]" >= 5.009004 && "$]" < 5.010001)
0.000001,1,0.000001,? sub(){1} : sub(){0};
0.000000,0,0.000000,
0.000006,1,0.000006,my $module_name_rx = qr/\A(?!\d)\w+(?:::\w+)*\z/;
0.000007,1,0.000007,*_module_name_rx = sub(){$module_name_rx};
0.000035,1,0.000035,}
0.000000,0,0.000000,
0.000019,2,0.000010,use Exporter ();
0.000009,1,0.000009,BEGIN { *import = \&Exporter::import }
0.000275,2,0.000137,use Config ();
0.000303,2,0.000152,use Scalar::Util qw(weaken);
0.000957,2,0.000478,use Carp qw(croak);
0.000000,0,0.000000,
0.000000,0,0.000000,# this should be empty, but some CPAN modules expect these
0.000002,1,0.000002,our @EXPORT = qw(
0.000000,0,0.000000,_install_coderef
0.000000,0,0.000000,_load_module
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000002,1,0.000002,our @EXPORT_OK = qw(
0.000000,0,0.000000,_check_tracked
0.000000,0,0.000000,_getglob
0.000000,0,0.000000,_getstash
0.000000,0,0.000000,_install_coderef
0.000000,0,0.000000,_install_modifier
0.000000,0,0.000000,_install_tracked
0.000000,0,0.000000,_load_module
0.000000,0,0.000000,_maybe_load_module
0.000000,0,0.000000,_module_name_rx
0.000000,0,0.000000,_name_coderef
0.000000,0,0.000000,_set_loaded
0.000000,0,0.000000,_unimport_coderefs
0.000000,0,0.000000,_linear_isa
0.000000,0,0.000000,_in_global_destruction
0.000000,0,0.000000,_in_global_destruction_code
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000001,1,0.000001,my %EXPORTS;
0.000000,0,0.000000,
0.000000,0,0.000000,sub _install_modifier {
0.000005,17,0.000000,my $target = $_[0];
0.000011,17,0.000001,my $type = $_[1];
0.000005,17,0.000000,my $code = $_[-1];
0.000038,17,0.000002,my @names = @_[2 .. $#_ - 1];
0.000000,0,0.000000,
0.000016,17,0.000001,@names = @{ $names[0] }
0.000000,0,0.000000,if ref($names[0]) eq 'ARRAY';
0.000000,0,0.000000,
0.000047,17,0.000003,my @tracked = _check_tracked($target, \@names);
0.000000,0,0.000000,
0.000017,17,0.000001,if ($INC{'Sub/Defer.pm'}) {
0.000000,0,0.000000,for my $name (@names) {
0.000000,0,0.000000,# CMM will throw for us if it doesn't exist
0.000146,25,0.000006,if (my $to_modify = $target->can($name)) {
0.000000,0,0.000000,Sub::Defer::undefer_sub($to_modify);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000609,17,0.000036,require Class::Method::Modifiers;
0.000049,17,0.000003,Class::Method::Modifiers::install_modifier(@_);
0.000000,0,0.000000,
0.000010,17,0.000001,if (@tracked) {
0.000006,7,0.000001,my $exports = $EXPORTS{$target};
0.000000,0,0.000000,weaken($exports->{$_} = $target->can($_))
0.000107,7,0.000015,for @tracked;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000065,17,0.000004,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _install_tracked {
0.000027,119,0.000000,my ($target, $name, $code) = @_;
0.000036,119,0.000000,my $from = caller;
0.000352,119,0.000003,weaken($EXPORTS{$target}{$name} = $code);
0.000313,119,0.000003,_install_coderef("${target}::${name}", "${from}::${name}", $code);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub Moo::_Util::__GUARD__::DESTROY {
0.000000,0,0.000000,delete $INC{$_[0]->[0]} if @{$_[0]};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _require {
0.000001,4,0.000000,my ($file) = @_;
0.000004,4,0.000001,my $guard = _WORK_AROUND_BROKEN_MODULE_STATE
0.000000,0,0.000000,&& bless([ $file ], 'Moo::_Util::__GUARD__');
0.000000,0,0.000000,local %^H if _WORK_AROUND_HINT_LEAKAGE;
0.002387,11,0.000217,if (!eval { require $file; 1 }) {
0.000000,1,0.000000,my $e = $@ || "Can't locate $file";
0.000000,1,0.000000,my $me = __FILE__;
0.000057,1,0.000057,$e =~ s{ at \Q$me\E line \d+\.\n\z}{};
0.000013,1,0.000013,return $e;
0.000000,0,0.000000,}
0.000000,0,0.000000,pop @$guard if _WORK_AROUND_BROKEN_MODULE_STATE;
0.000012,3,0.000004,return undef;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _load_module {
0.000013,26,0.000001,my ($module) = @_;
0.000195,26,0.000008,croak qq{"$module" is not a module name!}
0.000000,0,0.000000,unless $module =~ _module_name_rx;
0.000129,26,0.000005,(my $file = "$module.pm") =~ s{::}{/}g;
0.000000,0,0.000000,return 1
0.000058,26,0.000002,if $INC{$file};
0.000000,0,0.000000,
0.000005,3,0.000002,my $e = _require $file;
0.000012,3,0.000004,return 1
0.000000,0,0.000000,if !defined $e;
0.000000,0,0.000000,
0.000000,0,0.000000,croak $e
0.000000,0,0.000000,if $e !~ /\ACan't locate \Q$file\E /;
0.000000,0,0.000000,
0.000000,0,0.000000,# can't just ->can('can') because a sub-package Foo::Bar::Baz
0.000000,0,0.000000,# creates a 'Baz::' key in Foo::Bar's symbol table
0.000000,0,0.000000,my $stash = _getstash($module)||{};
0.000439,2,0.000219,no strict 'refs';
0.000000,0,0.000000,return 1 if grep +exists &{"${module}::$_"}, grep !/::\z/, keys %$stash;
0.000000,0,0.000000,return 1
0.000000,0,0.000000,if $INC{"Moose.pm"} && Class::MOP::class_of($module)
0.000000,0,0.000000,or Mouse::Util->can('find_meta') && Mouse::Util::find_meta($module);
0.000000,0,0.000000,
0.000000,0,0.000000,croak $e;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,our %MAYBE_LOADED;
0.000000,0,0.000000,sub _maybe_load_module {
0.000001,1,0.000001,my $module = $_[0];
0.000000,0,0.000000,return $MAYBE_LOADED{$module}
0.000001,1,0.000001,if exists $MAYBE_LOADED{$module};
0.000011,1,0.000011,(my $file = "$module.pm") =~ s{::}{/}g;
0.000000,0,0.000000,
0.000003,1,0.000003,my $e = _require $file;
0.000021,1,0.000021,if (!defined $e) {
0.000000,0,0.000000,return $MAYBE_LOADED{$module} = 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($e !~ /\ACan't locate \Q$file\E /) {
0.000000,0,0.000000,warn "$module exists but failed to load with error: $e";
0.000000,0,0.000000,}
0.000006,1,0.000006,return $MAYBE_LOADED{$module} = 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000000,0,0.000000,# optimize for newer perls
0.000000,0,0.000000,require mro
0.000397,1,0.000397,if "$]" >= 5.009_005;
0.000000,0,0.000000,
0.000006,1,0.000006,if (defined &mro::get_linear_isa) {
0.000000,0,0.000000,*_linear_isa = \&mro::get_linear_isa;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,my $e;
0.000000,0,0.000000,{
0.000000,0,0.000000,local $@;
0.000000,0,0.000000,eval <<'END_CODE' or $e = $@;
0.000000,0,0.000000,sub _linear_isa($;$) {
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,my $type = shift || exists $Class::C3::MRO{$class} ? 'c3' : 'dfs';
0.000000,0,0.000000,
0.000000,0,0.000000,if ($type eq 'c3') {
0.000000,0,0.000000,require Class::C3;
0.000000,0,0.000000,return [Class::C3::calculateMRO($class)];
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my @check = ($class);
0.000000,0,0.000000,my @lin;
0.000000,0,0.000000,
0.000000,0,0.000000,my %found;
0.000000,0,0.000000,while (defined(my $check = shift @check)) {
0.000000,0,0.000000,push @lin, $check;
0.000000,0,0.000000,no strict 'refs';
0.000000,0,0.000000,unshift @check, grep !$found{$_}++, @{"$check\::ISA"};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return \@lin;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,1;
0.000000,0,0.000000,END_CODE
0.000000,0,0.000000,}
0.000000,0,0.000000,die $e if defined $e;
0.000000,0,0.000000,}
0.000115,1,0.000115,}
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000002,1,0.000002,my $gd_code
0.000000,0,0.000000,= "$]" >= 5.014
0.000000,0,0.000000,? q[${^GLOBAL_PHASE} eq 'DESTRUCT']
0.000000,0,0.000000,: _maybe_load_module('Devel::GlobalDestruction::XS')
0.000000,0,0.000000,? 'Devel::GlobalDestruction::XS::in_global_destruction()'
0.000000,0,0.000000,: 'do { use B (); ${B::main_cv()} == 0 }';
0.000004,1,0.000004,*_in_global_destruction_code = sub () { $gd_code };
0.000030,1,0.000030,eval "sub _in_global_destruction () { $gd_code }; 1"
0.000000,0,0.000000,or die $@;
0.000073,1,0.000073,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _set_loaded {
0.000206,27,0.000008,(my $file = "$_[0].pm") =~ s{::}{/}g;
0.000075,27,0.000003,$INC{$file} ||= $_[1];
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _install_coderef {
0.000182,119,0.000002,my ($glob, $code) = (_getglob($_[0]), _name_coderef(@_));
0.000060,2,0.000030,no warnings 'redefine';
0.000205,119,0.000002,if (*{$glob}{CODE}) {
0.000000,0,0.000000,*{$glob} = $code;
0.000000,0,0.000000,}
0.000000,0,0.000000,# perl will sometimes warn about mismatched prototypes coming from the
0.000000,0,0.000000,# inheritance cache, so disable them if we aren't redefining a sub
0.000000,0,0.000000,else {
0.000229,2,0.000114,no warnings 'prototype';
0.000036,114,0.000000,*{$glob} = $code;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _name_coderef {
0.000034,129,0.000000,shift if @_ > 2; # three args is (target, name, sub)
0.000889,129,0.000007,_CAN_SUBNAME ? _subname(@_) : $_[1];
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _check_tracked {
0.000009,21,0.000000,my ($target, $names) = @_;
0.000046,21,0.000002,my $stash = _getstash($target);
0.000038,21,0.000002,my $exports = $EXPORTS{$target}
0.000000,0,0.000000,or return;
0.000000,0,0.000000,
0.000012,17,0.000001,$names = [keys %$exports]
0.000000,0,0.000000,if !$names;
0.000000,0,0.000000,my %rev =
0.000000,0,0.000000,map +($exports->{$_} => $_),
0.000142,17,0.000008,grep defined $exports->{$_},
0.000000,0,0.000000,keys %$exports;
0.000000,0,0.000000,
0.000000,0,0.000000,return
0.000000,0,0.000000,grep {
0.000170,65,0.000003,my $g = $stash->{$_};
0.000065,48,0.000001,$g && defined &$g && exists $rev{\&$g};
0.000000,0,0.000000,}
0.000000,0,0.000000,@$names;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _unimport_coderefs {
0.000000,0,0.000000,my ($target) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $stash = _getstash($target);
0.000000,0,0.000000,my @exports = _check_tracked($target);
0.000000,0,0.000000,
0.000000,0,0.000000,foreach my $name (@exports) {
0.000000,0,0.000000,my $old = delete $stash->{$name};
0.000000,0,0.000000,my $full_name = join('::',$target,$name);
0.000000,0,0.000000,# Copy everything except the code slot back into place (e.g. $has)
0.000000,0,0.000000,foreach my $type (qw(SCALAR HASH ARRAY IO)) {
0.000000,0,0.000000,next unless defined(*{$old}{$type});
0.000183,2,0.000092,no strict 'refs';
0.000000,0,0.000000,*$full_name = *{$old}{$type};
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000007,1,0.000007,if ($Config::Config{useithreads}) {
0.000000,0,0.000000,require Moo::HandleMoose::_TypeMap;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000006,1,0.000006,1;
