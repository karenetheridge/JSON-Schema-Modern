# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000055,2,0.000027,use strict;
0.000000,0,0.000000,package Pod::Simple::TiedOutFH;
0.000025,2,0.000013,use Symbol ('gensym');
0.000020,2,0.000010,use Carp ();
0.000296,2,0.000148,use vars qw($VERSION );
0.000000,1,0.000000,$VERSION = '3.43';
0.000000,0,0.000000,
0.000000,0,0.000000,#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0.000000,0,0.000000,
0.000000,0,0.000000,sub handle_on { # some horrible frightening things are encapsulated in here
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,$class = ref($class) || $class;
0.000000,0,0.000000,
0.000000,0,0.000000,Carp::croak "Usage: ${class}->handle_on(\$somescalar)" unless @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $x = (defined($_[0]) and ref($_[0]))
0.000000,0,0.000000,? $_[0]
0.000000,0,0.000000,: ( \( $_[0] ) )[0]
0.000000,0,0.000000,;
0.000000,0,0.000000,$$x = '' unless defined $$x;
0.000000,0,0.000000,
0.000000,0,0.000000,#Pod::Simple::DEBUG and print STDERR "New $class handle on $x = \"$$x\"\n";
0.000000,0,0.000000,
0.000000,0,0.000000,my $new = gensym();
0.000000,0,0.000000,tie *$new, $class, $x;
0.000000,0,0.000000,return $new;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0.000000,0,0.000000,
0.000000,0,0.000000,sub TIEHANDLE {  # Ties to just a scalar ref
0.000000,0,0.000000,my($class, $scalar_ref) = @_;
0.000000,0,0.000000,$$scalar_ref = '' unless defined $$scalar_ref;
0.000000,0,0.000000,return bless \$scalar_ref,  ref($class) || $class;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub PRINT {
0.000000,0,0.000000,my $it = shift;
0.000000,0,0.000000,foreach my $x (@_) { $$$it .= $x }
0.000000,0,0.000000,
0.000000,0,0.000000,#Pod::Simple::DEBUG > 10 and print STDERR " appended to $$it = \"$$$it\"\n";
0.000000,0,0.000000,
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub FETCH {
0.000000,0,0.000000,return ${$_[0]};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub PRINTF {
0.000000,0,0.000000,my $it = shift;
0.000000,0,0.000000,my $format = shift;
0.000000,0,0.000000,$$$it .= sprintf $format, @_;
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub FILENO { ${ $_[0] } + 100 } # just to produce SOME number
0.000000,0,0.000000,
0.000000,0,0.000000,sub CLOSE { 1 }
0.000000,0,0.000000,
0.000000,0,0.000000,#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0.000004,1,0.000004,1;
0.000000,0,0.000000,__END__
