# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package IO::Compress::Adapter::Deflate ;
0.000000,0,0.000000,
0.000038,2,0.000019,use strict;
0.000024,2,0.000012,use warnings;
0.000031,2,0.000016,use bytes;
0.000000,0,0.000000,
0.000048,3,0.000016,use IO::Compress::Base::Common 2.106 qw(:Status);
0.001253,3,0.000418,use Compress::Raw::Zlib  2.103 qw( !crc32 !adler32 ) ;
0.000000,0,0.000000,
0.000001,1,0.000001,require Exporter;
0.000000,0,0.000000,our ($VERSION, @ISA, @EXPORT_OK, %EXPORT_TAGS, @EXPORT, %DEFLATE_CONSTANTS);
0.000000,0,0.000000,
0.000001,1,0.000001,$VERSION = '2.106';
0.000012,1,0.000012,@ISA = qw(Exporter);
0.000003,1,0.000003,@EXPORT_OK = @Compress::Raw::Zlib::DEFLATE_CONSTANTS;
0.000002,1,0.000002,%EXPORT_TAGS = %Compress::Raw::Zlib::DEFLATE_CONSTANTS;
0.000006,1,0.000006,@EXPORT = @EXPORT_OK;
0.000003,1,0.000003,%DEFLATE_CONSTANTS = %EXPORT_TAGS ;
0.000000,0,0.000000,
0.000000,0,0.000000,sub mkCompObject
0.000000,0,0.000000,{
0.000000,0,0.000000,my $crc32    = shift ;
0.000000,0,0.000000,my $adler32  = shift ;
0.000000,0,0.000000,my $level    = shift ;
0.000000,0,0.000000,my $strategy = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my ($def, $status) = Compress::Raw::Zlib::Deflate->new(
0.000000,0,0.000000,-AppendOutput   => 1,
0.000000,0,0.000000,-CRC32          => $crc32,
0.000000,0,0.000000,-ADLER32        => $adler32,
0.000000,0,0.000000,-Level          => $level,
0.000000,0,0.000000,-Strategy       => $strategy,
0.000000,0,0.000000,-WindowBits     => - MAX_WBITS);
0.000000,0,0.000000,
0.000000,0,0.000000,return (undef, "Cannot create Deflate object: $status", $status)
0.000000,0,0.000000,if $status != Z_OK;
0.000000,0,0.000000,
0.000000,0,0.000000,return bless {'Def'        => $def,
0.000000,0,0.000000,'Error'      => '',
0.000000,0,0.000000,} ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub compr
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $def   = $self->{Def};
0.000000,0,0.000000,
0.000000,0,0.000000,my $status = $def->deflate($_[0], $_[1]) ;
0.000000,0,0.000000,$self->{ErrorNo} = $status;
0.000000,0,0.000000,
0.000000,0,0.000000,if ($status != Z_OK)
0.000000,0,0.000000,{
0.000000,0,0.000000,$self->{Error} = "Deflate Error: $status";
0.000000,0,0.000000,return STATUS_ERROR;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return STATUS_OK;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub flush
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $def   = $self->{Def};
0.000000,0,0.000000,
0.000000,0,0.000000,my $opt = $_[1] || Z_FINISH;
0.000000,0,0.000000,my $status = $def->flush($_[0], $opt);
0.000000,0,0.000000,$self->{ErrorNo} = $status;
0.000000,0,0.000000,
0.000000,0,0.000000,if ($status != Z_OK)
0.000000,0,0.000000,{
0.000000,0,0.000000,$self->{Error} = "Deflate Error: $status";
0.000000,0,0.000000,return STATUS_ERROR;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return STATUS_OK;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub close
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $def   = $self->{Def};
0.000000,0,0.000000,
0.000000,0,0.000000,$def->flush($_[0], Z_FINISH)
0.000000,0,0.000000,if defined $def ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub reset
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $def   = $self->{Def};
0.000000,0,0.000000,
0.000000,0,0.000000,my $status = $def->deflateReset() ;
0.000000,0,0.000000,$self->{ErrorNo} = $status;
0.000000,0,0.000000,if ($status != Z_OK)
0.000000,0,0.000000,{
0.000000,0,0.000000,$self->{Error} = "Deflate Error: $status";
0.000000,0,0.000000,return STATUS_ERROR;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return STATUS_OK;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub deflateParams
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $def   = $self->{Def};
0.000000,0,0.000000,
0.000000,0,0.000000,my $status = $def->deflateParams(@_);
0.000000,0,0.000000,$self->{ErrorNo} = $status;
0.000000,0,0.000000,if ($status != Z_OK)
0.000000,0,0.000000,{
0.000000,0,0.000000,$self->{Error} = "deflateParams Error: $status";
0.000000,0,0.000000,return STATUS_ERROR;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return STATUS_OK;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,#sub total_out
0.000000,0,0.000000,#{
0.000000,0,0.000000,#    my $self = shift ;
0.000000,0,0.000000,#    $self->{Def}->total_out();
0.000000,0,0.000000,#}
0.000000,0,0.000000,#
0.000000,0,0.000000,#sub total_in
0.000000,0,0.000000,#{
0.000000,0,0.000000,#    my $self = shift ;
0.000000,0,0.000000,#    $self->{Def}->total_in();
0.000000,0,0.000000,#}
0.000000,0,0.000000,
0.000000,0,0.000000,sub compressedBytes
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,$self->{Def}->compressedBytes();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub uncompressedBytes
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Def}->uncompressedBytes();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub crc32
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Def}->crc32();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub adler32
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Def}->adler32();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000007,1,0.000007,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
