# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Params::Util;
0.000000,0,0.000000,
0.000000,0,0.000000,=pod
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,Params::Util - Simple, compact and correct param-checking functions
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,# Import some functions
0.000000,0,0.000000,use Params::Util qw{_SCALAR _HASH _INSTANCE};
0.000000,0,0.000000,
0.000000,0,0.000000,# If you are lazy, or need a lot of them...
0.000000,0,0.000000,use Params::Util ':ALL';
0.000000,0,0.000000,
0.000000,0,0.000000,sub foo {
0.000000,0,0.000000,my $object  = _INSTANCE(shift, 'Foo') or return undef;
0.000000,0,0.000000,my $image   = _SCALAR(shift)          or return undef;
0.000000,0,0.000000,my $options = _HASH(shift)            or return undef;
0.000000,0,0.000000,# etc...
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,C<Params::Util> provides a basic set of importable functions that makes
0.000000,0,0.000000,checking parameters a hell of a lot easier
0.000000,0,0.000000,
0.000000,0,0.000000,While they can be (and are) used in other contexts, the main point
0.000000,0,0.000000,behind this module is that the functions B<both> Do What You Mean,
0.000000,0,0.000000,and Do The Right Thing, so they are most useful when you are getting
0.000000,0,0.000000,params passed into your code from someone and/or somewhere else
0.000000,0,0.000000,and you can't really trust the quality.
0.000000,0,0.000000,
0.000000,0,0.000000,Thus, C<Params::Util> is of most use at the edges of your API, where
0.000000,0,0.000000,params and data are coming in from outside your code.
0.000000,0,0.000000,
0.000000,0,0.000000,The functions provided by C<Params::Util> check in the most strictly
0.000000,0,0.000000,correct manner known, are documented as thoroughly as possible so their
0.000000,0,0.000000,exact behaviour is clear, and heavily tested so make sure they are not
0.000000,0,0.000000,fooled by weird data and Really Bad Things.
0.000000,0,0.000000,
0.000000,0,0.000000,To use, simply load the module providing the functions you want to use
0.000000,0,0.000000,as arguments (as shown in the SYNOPSIS).
0.000000,0,0.000000,
0.000000,0,0.000000,To aid in maintainability, C<Params::Util> will B<never> export by
0.000000,0,0.000000,default.
0.000000,0,0.000000,
0.000000,0,0.000000,You must explicitly name the functions you want to export, or use the
0.000000,0,0.000000,C<:ALL> param to just have it export everything (although this is not
0.000000,0,0.000000,recommended if you have any _FOO functions yourself with which future
0.000000,0,0.000000,additions to C<Params::Util> may clash)
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 FUNCTIONS
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000054,2,0.000027,use 5.00503;
0.000029,2,0.000015,use strict;
0.000030,2,0.000015,use warnings;
0.000024,2,0.000012,use parent qw{Exporter XSLoader};
0.000000,0,0.000000,
0.000264,2,0.000132,use Params::Util::PP qw();
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = '1.102';
0.000000,0,0.000000,
0.000000,1,0.000000,local $ENV{PERL_DL_NONLAZY} = 0 if $ENV{PERL_DL_NONLAZY};
0.000744,1,0.000744,XSLoader::load("Params::Util", $VERSION) unless $ENV{PERL_PARAMS_UTIL_PP};
0.000000,0,0.000000,
0.000003,1,0.000003,our @EXPORT_OK = qw{
0.000000,0,0.000000,_STRING     _IDENTIFIER
0.000000,0,0.000000,_CLASS      _CLASSISA   _SUBCLASS  _DRIVER  _CLASSDOES
0.000000,0,0.000000,_NUMBER     _POSINT     _NONNEGINT
0.000000,0,0.000000,_SCALAR     _SCALAR0
0.000000,0,0.000000,_ARRAY      _ARRAY0     _ARRAYLIKE
0.000000,0,0.000000,_HASH       _HASH0      _HASHLIKE
0.000000,0,0.000000,_CODE       _CODELIKE
0.000000,0,0.000000,_INVOCANT   _REGEX      _INSTANCE  _INSTANCEDOES
0.000000,0,0.000000,_SET        _SET0
0.000000,0,0.000000,_HANDLE
0.000000,0,0.000000,};
0.000001,1,0.000001,our %EXPORT_TAGS = (ALL => \@EXPORT_OK);
0.000000,0,0.000000,
0.000000,0,0.000000,## no critic (TestingAndDebugging::ProhibitNoStrict)
0.000054,2,0.000027,no strict "refs";
0.000109,1,0.000109,Params::Util->can($_) or *$_ = Params::Util::PP->can($_) for (@EXPORT_OK);
0.000231,2,0.000116,use strict "refs";
0.000000,0,0.000000,
0.000000,0,0.000000,#####################################################################
0.000000,0,0.000000,# Param Checking Functions
0.000000,0,0.000000,
0.000000,0,0.000000,=pod
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _STRING $string
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_STRING> function is intended to be imported into your
0.000000,0,0.000000,package, and provides a convenient way to test to see if a value is
0.000000,0,0.000000,a normal non-false string of non-zero length.
0.000000,0,0.000000,
0.000000,0,0.000000,Note that this will NOT do anything magic to deal with the special
0.000000,0,0.000000,C<'0'> false negative case, but will return it.
0.000000,0,0.000000,
0.000000,0,0.000000,# '0' not considered valid data
0.000000,0,0.000000,my $name = _STRING(shift) or die "Bad name";
0.000000,0,0.000000,
0.000000,0,0.000000,# '0' is considered valid data
0.000000,0,0.000000,my $string = _STRING($_[0]) ? shift : die "Bad string";
0.000000,0,0.000000,
0.000000,0,0.000000,Please also note that this function expects a normal string. It does
0.000000,0,0.000000,not support overloading or other magic techniques to get a string.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the string as a convenience if it is a valid string, or
0.000000,0,0.000000,C<undef> if not.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _IDENTIFIER $string
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_IDENTIFIER> function is intended to be imported into your
0.000000,0,0.000000,package, and provides a convenient way to test to see if a value is
0.000000,0,0.000000,a string that is a valid Perl identifier.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the string as a convenience if it is a valid identifier, or
0.000000,0,0.000000,C<undef> if not.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _CLASS $string
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_CLASS> function is intended to be imported into your
0.000000,0,0.000000,package, and provides a convenient way to test to see if a value is
0.000000,0,0.000000,a string that is a valid Perl class.
0.000000,0,0.000000,
0.000000,0,0.000000,This function only checks that the format is valid, not that the
0.000000,0,0.000000,class is actually loaded. It also assumes "normalized" form, and does
0.000000,0,0.000000,not accept class names such as C<::Foo> or C<D'Oh>.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the string as a convenience if it is a valid class name, or
0.000000,0,0.000000,C<undef> if not.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _CLASSISA $string, $class
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_CLASSISA> function is intended to be imported into your
0.000000,0,0.000000,package, and provides a convenient way to test to see if a value is
0.000000,0,0.000000,a string that is a particularly class, or a subclass of it.
0.000000,0,0.000000,
0.000000,0,0.000000,This function checks that the format is valid and calls the -E<gt>isa
0.000000,0,0.000000,method on the class name. It does not check that the class is actually
0.000000,0,0.000000,loaded.
0.000000,0,0.000000,
0.000000,0,0.000000,It also assumes "normalized" form, and does
0.000000,0,0.000000,not accept class names such as C<::Foo> or C<D'Oh>.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the string as a convenience if it is a valid class name, or
0.000000,0,0.000000,C<undef> if not.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _CLASSDOES $string, $role
0.000000,0,0.000000,
0.000000,0,0.000000,This routine behaves exactly like C<L</_CLASSISA>>, but checks with C<< ->DOES
0.000000,0,0.000000,>> rather than C<< ->isa >>.  This is probably only a good idea to use on Perl
0.000000,0,0.000000,5.10 or later, when L<UNIVERSAL::DOES|UNIVERSAL::DOES/DOES> has been
0.000000,0,0.000000,implemented.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _SUBCLASS $string, $class
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_SUBCLASS> function is intended to be imported into your
0.000000,0,0.000000,package, and provides a convenient way to test to see if a value is
0.000000,0,0.000000,a string that is a subclass of a specified class.
0.000000,0,0.000000,
0.000000,0,0.000000,This function checks that the format is valid and calls the -E<gt>isa
0.000000,0,0.000000,method on the class name. It does not check that the class is actually
0.000000,0,0.000000,loaded.
0.000000,0,0.000000,
0.000000,0,0.000000,It also assumes "normalized" form, and does
0.000000,0,0.000000,not accept class names such as C<::Foo> or C<D'Oh>.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the string as a convenience if it is a valid class name, or
0.000000,0,0.000000,C<undef> if not.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _NUMBER $scalar
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_NUMBER> function is intended to be imported into your
0.000000,0,0.000000,package, and provides a convenient way to test to see if a value is
0.000000,0,0.000000,a number. That is, it is defined and perl thinks it's a number.
0.000000,0,0.000000,
0.000000,0,0.000000,This function is basically a Params::Util-style wrapper around the
0.000000,0,0.000000,L<Scalar::Util> C<looks_like_number> function.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the value as a convenience, or C<undef> if the value is not a
0.000000,0,0.000000,number.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _POSINT $integer
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_POSINT> function is intended to be imported into your
0.000000,0,0.000000,package, and provides a convenient way to test to see if a value is
0.000000,0,0.000000,a positive integer (of any length).
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the value as a convenience, or C<undef> if the value is not a
0.000000,0,0.000000,positive integer.
0.000000,0,0.000000,
0.000000,0,0.000000,The name itself is derived from the XML schema constraint of the same
0.000000,0,0.000000,name.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _NONNEGINT $integer
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_NONNEGINT> function is intended to be imported into your
0.000000,0,0.000000,package, and provides a convenient way to test to see if a value is
0.000000,0,0.000000,a non-negative integer (of any length). That is, a positive integer,
0.000000,0,0.000000,or zero.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the value as a convenience, or C<undef> if the value is not a
0.000000,0,0.000000,non-negative integer.
0.000000,0,0.000000,
0.000000,0,0.000000,As with other tests that may return false values, care should be taken
0.000000,0,0.000000,to test via "defined" in boolean validly contexts.
0.000000,0,0.000000,
0.000000,0,0.000000,unless ( defined _NONNEGINT($value) ) {
0.000000,0,0.000000,die "Invalid value";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,The name itself is derived from the XML schema constraint of the same
0.000000,0,0.000000,name.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _SCALAR \$scalar
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_SCALAR> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for a raw and unblessed
0.000000,0,0.000000,C<SCALAR> reference, with content of non-zero length.
0.000000,0,0.000000,
0.000000,0,0.000000,For a version that allows zero length C<SCALAR> references, see
0.000000,0,0.000000,the C<_SCALAR0> function.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the C<SCALAR> reference itself as a convenience, or C<undef>
0.000000,0,0.000000,if the value provided is not a C<SCALAR> reference.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _SCALAR0 \$scalar
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_SCALAR0> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for a raw and unblessed
0.000000,0,0.000000,C<SCALAR0> reference, allowing content of zero-length.
0.000000,0,0.000000,
0.000000,0,0.000000,For a simpler "give me some content" version that requires non-zero
0.000000,0,0.000000,length, C<_SCALAR> function.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the C<SCALAR> reference itself as a convenience, or C<undef>
0.000000,0,0.000000,if the value provided is not a C<SCALAR> reference.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _ARRAY $value
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_ARRAY> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for a raw and unblessed
0.000000,0,0.000000,C<ARRAY> reference containing B<at least> one element of any kind.
0.000000,0,0.000000,
0.000000,0,0.000000,For a more basic form that allows zero length ARRAY references, see
0.000000,0,0.000000,the C<_ARRAY0> function.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the C<ARRAY> reference itself as a convenience, or C<undef>
0.000000,0,0.000000,if the value provided is not an C<ARRAY> reference.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _ARRAY0 $value
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_ARRAY0> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for a raw and unblessed
0.000000,0,0.000000,C<ARRAY> reference, allowing C<ARRAY> references that contain no
0.000000,0,0.000000,elements.
0.000000,0,0.000000,
0.000000,0,0.000000,For a more basic "An array of something" form that also requires at
0.000000,0,0.000000,least one element, see the C<_ARRAY> function.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the C<ARRAY> reference itself as a convenience, or C<undef>
0.000000,0,0.000000,if the value provided is not an C<ARRAY> reference.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _ARRAYLIKE $value
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_ARRAYLIKE> function tests whether a given scalar value can respond to
0.000000,0,0.000000,array dereferencing.  If it can, the value is returned.  If it cannot,
0.000000,0,0.000000,C<_ARRAYLIKE> returns C<undef>.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _HASH $value
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_HASH> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for a raw and unblessed
0.000000,0,0.000000,C<HASH> reference with at least one entry.
0.000000,0,0.000000,
0.000000,0,0.000000,For a version of this function that allows the C<HASH> to be empty,
0.000000,0,0.000000,see the C<_HASH0> function.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the C<HASH> reference itself as a convenience, or C<undef>
0.000000,0,0.000000,if the value provided is not an C<HASH> reference.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _HASH0 $value
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_HASH0> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for a raw and unblessed
0.000000,0,0.000000,C<HASH> reference, regardless of the C<HASH> content.
0.000000,0,0.000000,
0.000000,0,0.000000,For a simpler "A hash of something" version that requires at least one
0.000000,0,0.000000,element, see the C<_HASH> function.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the C<HASH> reference itself as a convenience, or C<undef>
0.000000,0,0.000000,if the value provided is not an C<HASH> reference.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _HASHLIKE $value
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_HASHLIKE> function tests whether a given scalar value can respond to
0.000000,0,0.000000,hash dereferencing.  If it can, the value is returned.  If it cannot,
0.000000,0,0.000000,C<_HASHLIKE> returns C<undef>.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _CODE $value
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_CODE> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for a raw and unblessed
0.000000,0,0.000000,C<CODE> reference.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the C<CODE> reference itself as a convenience, or C<undef>
0.000000,0,0.000000,if the value provided is not an C<CODE> reference.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _CODELIKE $value
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_CODELIKE> is the more generic version of C<_CODE>. Unlike C<_CODE>,
0.000000,0,0.000000,which checks for an explicit C<CODE> reference, the C<_CODELIKE> function
0.000000,0,0.000000,also includes things that act like them, such as blessed objects that
0.000000,0,0.000000,overload C<'&{}'>.
0.000000,0,0.000000,
0.000000,0,0.000000,Please note that in the case of objects overloaded with '&{}', you will
0.000000,0,0.000000,almost always end up also testing it in 'bool' context at some stage.
0.000000,0,0.000000,
0.000000,0,0.000000,For example:
0.000000,0,0.000000,
0.000000,0,0.000000,sub foo {
0.000000,0,0.000000,my $code1 = _CODELIKE(shift) or die "No code param provided";
0.000000,0,0.000000,my $code2 = _CODELIKE(shift);
0.000000,0,0.000000,if ( $code2 ) {
0.000000,0,0.000000,print "Got optional second code param";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,As such, you will most likely always want to make sure your class has
0.000000,0,0.000000,at least the following to allow it to evaluate to true in boolean
0.000000,0,0.000000,context.
0.000000,0,0.000000,
0.000000,0,0.000000,# Always evaluate to true in boolean context
0.000000,0,0.000000,use overload 'bool' => sub () { 1 };
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the callable value as a convenience, or C<undef> if the
0.000000,0,0.000000,value provided is not callable.
0.000000,0,0.000000,
0.000000,0,0.000000,Note - This function was formerly known as _CALLABLE but has been renamed
0.000000,0,0.000000,for greater symmetry with the other _XXXXLIKE functions.
0.000000,0,0.000000,
0.000000,0,0.000000,The use of _CALLABLE has been deprecated. It will continue to work, but
0.000000,0,0.000000,with a warning, until end-2006, then will be removed.
0.000000,0,0.000000,
0.000000,0,0.000000,I apologize for any inconvenience caused.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _INVOCANT $value
0.000000,0,0.000000,
0.000000,0,0.000000,This routine tests whether the given value is a valid method invocant.
0.000000,0,0.000000,This can be either an instance of an object, or a class name.
0.000000,0,0.000000,
0.000000,0,0.000000,If so, the value itself is returned.  Otherwise, C<_INVOCANT>
0.000000,0,0.000000,returns C<undef>.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _INSTANCE $object, $class
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_INSTANCE> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for an object of a particular class
0.000000,0,0.000000,in a strictly correct manner.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the object itself as a convenience, or C<undef> if the value
0.000000,0,0.000000,provided is not an object of that type.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _INSTANCEDOES $object, $role
0.000000,0,0.000000,
0.000000,0,0.000000,This routine behaves exactly like C<L</_INSTANCE>>, but checks with C<< ->DOES
0.000000,0,0.000000,>> rather than C<< ->isa >>.  This is probably only a good idea to use on Perl
0.000000,0,0.000000,5.10 or later, when L<UNIVERSAL::DOES|UNIVERSAL::DOES/DOES> has been
0.000000,0,0.000000,implemented.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _REGEX $value
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_REGEX> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for a regular expression.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the value itself as a convenience, or C<undef> if the value
0.000000,0,0.000000,provided is not a regular expression.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _SET \@array, $class
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_SET> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for set of at least one object of
0.000000,0,0.000000,a particular class in a strictly correct manner.
0.000000,0,0.000000,
0.000000,0,0.000000,The set is provided as a reference to an C<ARRAY> of objects of the
0.000000,0,0.000000,class provided.
0.000000,0,0.000000,
0.000000,0,0.000000,For an alternative function that allows zero-length sets, see the
0.000000,0,0.000000,C<_SET0> function.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the C<ARRAY> reference itself as a convenience, or C<undef> if
0.000000,0,0.000000,the value provided is not a set of that class.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _SET0 \@array, $class
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_SET0> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test for a set of objects of a
0.000000,0,0.000000,particular class in a strictly correct manner, allowing for zero objects.
0.000000,0,0.000000,
0.000000,0,0.000000,The set is provided as a reference to an C<ARRAY> of objects of the
0.000000,0,0.000000,class provided.
0.000000,0,0.000000,
0.000000,0,0.000000,For an alternative function that requires at least one object, see the
0.000000,0,0.000000,C<_SET> function.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the C<ARRAY> reference itself as a convenience, or C<undef> if
0.000000,0,0.000000,the value provided is not a set of that class.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _HANDLE
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_HANDLE> function is intended to be imported into your package,
0.000000,0,0.000000,and provides a convenient way to test whether or not a single scalar
0.000000,0,0.000000,value is a file handle.
0.000000,0,0.000000,
0.000000,0,0.000000,Unfortunately, in Perl the definition of a file handle can be a little
0.000000,0,0.000000,bit fuzzy, so this function is likely to be somewhat imperfect (at first
0.000000,0,0.000000,anyway).
0.000000,0,0.000000,
0.000000,0,0.000000,That said, it is implement as well or better than the other file handle
0.000000,0,0.000000,detectors in existence (and we stole from the best of them).
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 _DRIVER $string
0.000000,0,0.000000,
0.000000,0,0.000000,sub foo {
0.000000,0,0.000000,my $class = _DRIVER(shift, 'My::Driver::Base') or die "Bad driver";
0.000000,0,0.000000,...
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,The C<_DRIVER> function is intended to be imported into your
0.000000,0,0.000000,package, and provides a convenient way to load and validate
0.000000,0,0.000000,a driver class.
0.000000,0,0.000000,
0.000000,0,0.000000,The most common pattern when taking a driver class as a parameter
0.000000,0,0.000000,is to check that the name is a class (i.e. check against _CLASS)
0.000000,0,0.000000,and then to load the class (if it exists) and then ensure that
0.000000,0,0.000000,the class returns true for the isa method on some base driver name.
0.000000,0,0.000000,
0.000000,0,0.000000,Return the value as a convenience, or C<undef> if the value is not
0.000000,0,0.000000,a class name, the module does not exist, the module does not load,
0.000000,0,0.000000,or the class fails the isa test.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 TO DO
0.000000,0,0.000000,
0.000000,0,0.000000,- Add _CAN to help resolve the UNIVERSAL::can debacle
0.000000,0,0.000000,
0.000000,0,0.000000,- Implement an assertion-like version of this module, that dies on
0.000000,0,0.000000,error.
0.000000,0,0.000000,
0.000000,0,0.000000,- Implement a Test:: version of this module, for use in testing
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SUPPORT
0.000000,0,0.000000,
0.000000,0,0.000000,Bugs should be reported via the CPAN bug tracker at
0.000000,0,0.000000,
0.000000,0,0.000000,L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Params-Util>
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 AUTHOR
0.000000,0,0.000000,
0.000000,0,0.000000,Adam Kennedy E<lt>adamk AT cpan.orgE<gt>
0.000000,0,0.000000,
0.000000,0,0.000000,Jens Rehsack E<lt>rehsack AT cpan.orgE<gt>
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SEE ALSO
0.000000,0,0.000000,
0.000000,0,0.000000,L<Params::Validate>
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 COPYRIGHT
0.000000,0,0.000000,
0.000000,0,0.000000,Copyright 2005 - 2012 Adam Kennedy.
0.000000,0,0.000000,
0.000000,0,0.000000,Copyright 2020 - 2020 Jens Rehsack.
0.000000,0,0.000000,
0.000000,0,0.000000,This program is free software; you can redistribute
0.000000,0,0.000000,it and/or modify it under the same terms as Perl itself.
0.000000,0,0.000000,
0.000000,0,0.000000,The full text of the license can be found in the
0.000000,0,0.000000,LICENSE file included with this module.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000011,1,0.000011,1;
