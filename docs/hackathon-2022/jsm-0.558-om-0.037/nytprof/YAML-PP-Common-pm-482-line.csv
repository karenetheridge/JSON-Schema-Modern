# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000043,2,0.000022,use strict;
0.000040,2,0.000020,use warnings;
0.000000,0,0.000000,package YAML::PP::Common;
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = '0.035'; # VERSION
0.000000,0,0.000000,
0.000088,2,0.000044,use base 'Exporter';
0.000000,0,0.000000,
0.000001,1,0.000001,my @p = qw/
0.000000,0,0.000000,PRESERVE_ALL PRESERVE_ORDER PRESERVE_SCALAR_STYLE PRESERVE_FLOW_STYLE
0.000000,0,0.000000,PRESERVE_ALIAS
0.000000,0,0.000000,/;
0.000003,1,0.000003,my @s = qw/
0.000000,0,0.000000,YAML_ANY_SCALAR_STYLE YAML_PLAIN_SCALAR_STYLE
0.000000,0,0.000000,YAML_SINGLE_QUOTED_SCALAR_STYLE YAML_DOUBLE_QUOTED_SCALAR_STYLE
0.000000,0,0.000000,YAML_LITERAL_SCALAR_STYLE YAML_FOLDED_SCALAR_STYLE
0.000000,0,0.000000,YAML_QUOTED_SCALAR_STYLE
0.000000,0,0.000000,
0.000000,0,0.000000,YAML_ANY_SEQUENCE_STYLE
0.000000,0,0.000000,YAML_BLOCK_SEQUENCE_STYLE YAML_FLOW_SEQUENCE_STYLE
0.000000,0,0.000000,
0.000000,0,0.000000,YAML_ANY_MAPPING_STYLE
0.000000,0,0.000000,YAML_BLOCK_MAPPING_STYLE YAML_FLOW_MAPPING_STYLE
0.000000,0,0.000000,/;
0.000001,1,0.000001,our @EXPORT_OK = (@s, @p);
0.000000,0,0.000000,
0.000003,1,0.000003,our %EXPORT_TAGS = (
0.000000,0,0.000000,PRESERVE => [@p],
0.000000,0,0.000000,STYLES => [@s],
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,use constant {
0.000001,1,0.000001,YAML_ANY_SCALAR_STYLE           => 0,
0.000000,0,0.000000,YAML_PLAIN_SCALAR_STYLE         => 1,
0.000000,0,0.000000,YAML_SINGLE_QUOTED_SCALAR_STYLE => 2,
0.000000,0,0.000000,YAML_DOUBLE_QUOTED_SCALAR_STYLE => 3,
0.000000,0,0.000000,YAML_LITERAL_SCALAR_STYLE       => 4,
0.000000,0,0.000000,YAML_FOLDED_SCALAR_STYLE        => 5,
0.000000,0,0.000000,YAML_QUOTED_SCALAR_STYLE        => 'Q', # deprecated
0.000000,0,0.000000,
0.000000,0,0.000000,YAML_ANY_SEQUENCE_STYLE   => 0,
0.000000,0,0.000000,YAML_BLOCK_SEQUENCE_STYLE => 1,
0.000000,0,0.000000,YAML_FLOW_SEQUENCE_STYLE  => 2,
0.000000,0,0.000000,
0.000000,0,0.000000,YAML_ANY_MAPPING_STYLE   => 0,
0.000000,0,0.000000,YAML_BLOCK_MAPPING_STYLE => 1,
0.000000,0,0.000000,YAML_FLOW_MAPPING_STYLE  => 2,
0.000000,0,0.000000,
0.000000,0,0.000000,PRESERVE_ORDER        => 2,
0.000000,0,0.000000,PRESERVE_SCALAR_STYLE => 4,
0.000000,0,0.000000,PRESERVE_FLOW_STYLE   => 8,
0.000000,0,0.000000,PRESERVE_ALIAS        => 16,
0.000000,0,0.000000,
0.000000,0,0.000000,PRESERVE_ALL          => 31,
0.000662,1,0.000662,};
0.000000,0,0.000000,
0.000003,1,0.000003,my %scalar_style_to_string = (
0.000000,0,0.000000,YAML_PLAIN_SCALAR_STYLE() => ':',
0.000000,0,0.000000,YAML_SINGLE_QUOTED_SCALAR_STYLE() => "'",
0.000000,0,0.000000,YAML_DOUBLE_QUOTED_SCALAR_STYLE() => '"',
0.000000,0,0.000000,YAML_LITERAL_SCALAR_STYLE() => '|',
0.000000,0,0.000000,YAML_FOLDED_SCALAR_STYLE() => '>',
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub event_to_test_suite {
0.000000,0,0.000000,my ($event, $args) = @_;
0.000000,0,0.000000,my $ev = $event->{name};
0.000000,0,0.000000,my $string;
0.000000,0,0.000000,my $content = $event->{value};
0.000000,0,0.000000,
0.000000,0,0.000000,my $properties = '';
0.000000,0,0.000000,$properties .= " &$event->{anchor}" if defined $event->{anchor};
0.000000,0,0.000000,$properties .= " <$event->{tag}>" if defined $event->{tag};
0.000000,0,0.000000,
0.000000,0,0.000000,if ($ev eq 'document_start_event') {
0.000000,0,0.000000,$string = "+DOC";
0.000000,0,0.000000,$string .= " ---" unless $event->{implicit};
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($ev eq 'document_end_event') {
0.000000,0,0.000000,$string = "-DOC";
0.000000,0,0.000000,$string .= " ..." unless $event->{implicit};
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($ev eq 'stream_start_event') {
0.000000,0,0.000000,$string = "+STR";
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($ev eq 'stream_end_event') {
0.000000,0,0.000000,$string = "-STR";
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($ev eq 'mapping_start_event') {
0.000000,0,0.000000,$string = "+MAP";
0.000000,0,0.000000,if ($event->{style} and $event->{style} eq YAML_FLOW_MAPPING_STYLE) {
0.000000,0,0.000000,$string .= ' {}' if $args->{flow};
0.000000,0,0.000000,}
0.000000,0,0.000000,$string .= $properties;
0.000000,0,0.000000,if (0) {
0.000000,0,0.000000,# doesn't match yaml-test-suite format
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($ev eq 'sequence_start_event') {
0.000000,0,0.000000,$string = "+SEQ";
0.000000,0,0.000000,if ($event->{style} and $event->{style} eq YAML_FLOW_SEQUENCE_STYLE) {
0.000000,0,0.000000,$string .= ' []' if $args->{flow};
0.000000,0,0.000000,}
0.000000,0,0.000000,$string .= $properties;
0.000000,0,0.000000,if (0) {
0.000000,0,0.000000,# doesn't match yaml-test-suite format
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($ev eq 'mapping_end_event') {
0.000000,0,0.000000,$string = "-MAP";
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($ev eq 'sequence_end_event') {
0.000000,0,0.000000,$string = "-SEQ";
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($ev eq 'scalar_event') {
0.000000,0,0.000000,$string = '=VAL';
0.000000,0,0.000000,$string .= $properties;
0.000000,0,0.000000,
0.000000,0,0.000000,$content =~ s/\\/\\\\/g;
0.000000,0,0.000000,$content =~ s/\t/\\t/g;
0.000000,0,0.000000,$content =~ s/\r/\\r/g;
0.000000,0,0.000000,$content =~ s/\n/\\n/g;
0.000000,0,0.000000,$content =~ s/[\b]/\\b/g;
0.000000,0,0.000000,
0.000000,0,0.000000,$string .= ' '
0.000000,0,0.000000,. $scalar_style_to_string{ $event->{style} }
0.000000,0,0.000000,. $content;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($ev eq 'alias_event') {
0.000000,0,0.000000,$string = "=ALI *$content";
0.000000,0,0.000000,}
0.000000,0,0.000000,return $string;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub test_suite_to_event {
0.000000,0,0.000000,my ($str) = @_;
0.000000,0,0.000000,my $event = {};
0.000000,0,0.000000,if ($str =~ s/^\+STR//) {
0.000000,0,0.000000,$event->{name} = 'stream_start_event';
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($str =~ s/^\-STR//) {
0.000000,0,0.000000,$event->{name} = 'stream_end_event';
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($str =~ s/^\+DOC//) {
0.000000,0,0.000000,$event->{name} = 'document_start_event';
0.000000,0,0.000000,if ($str =~ s/^ ---//) {
0.000000,0,0.000000,$event->{implicit} = 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$event->{implicit} = 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($str =~ s/^\-DOC//) {
0.000000,0,0.000000,$event->{name} = 'document_end_event';
0.000000,0,0.000000,if ($str =~ s/^ \.\.\.//) {
0.000000,0,0.000000,$event->{implicit} = 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$event->{implicit} = 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($str =~ s/^\+SEQ//) {
0.000000,0,0.000000,$event->{name} = 'sequence_start_event';
0.000000,0,0.000000,if ($str =~ s/^ \&(\S+)//) {
0.000000,0,0.000000,$event->{anchor} = $1;
0.000000,0,0.000000,}
0.000000,0,0.000000,if ($str =~ s/^ <(\S+)>//) {
0.000000,0,0.000000,$event->{tag} = $1;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($str =~ s/^\-SEQ//) {
0.000000,0,0.000000,$event->{name} = 'sequence_end_event';
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($str =~ s/^\+MAP//) {
0.000000,0,0.000000,$event->{name} = 'mapping_start_event';
0.000000,0,0.000000,if ($str =~ s/^ \&(\S+)//) {
0.000000,0,0.000000,$event->{anchor} = $1;
0.000000,0,0.000000,}
0.000000,0,0.000000,if ($str =~ s/^ <(\S+)>//) {
0.000000,0,0.000000,$event->{tag} = $1;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($str =~ s/^\-MAP//) {
0.000000,0,0.000000,$event->{name} = 'mapping_end_event';
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($str =~ s/^=VAL//) {
0.000000,0,0.000000,$event->{name} = 'scalar_event';
0.000000,0,0.000000,if ($str =~ s/^ <(\S+)>//) {
0.000000,0,0.000000,$event->{tag} = $1;
0.000000,0,0.000000,}
0.000000,0,0.000000,if ($str =~ s/^ [:'">|]//) {
0.000000,0,0.000000,$event->{style} = $1;
0.000000,0,0.000000,}
0.000000,0,0.000000,if ($str =~ s/^(.*)//) {
0.000000,0,0.000000,$event->{value} = $1;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($str =~ s/^=ALI//) {
0.000000,0,0.000000,$event->{name} = 'alias_event';
0.000000,0,0.000000,if ($str =~ s/^ \*(.*)//) {
0.000000,0,0.000000,$event->{value} = $1;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,die "Could not parse event '$str'";
0.000000,0,0.000000,}
0.000000,0,0.000000,return $event;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000005,1,0.000005,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
