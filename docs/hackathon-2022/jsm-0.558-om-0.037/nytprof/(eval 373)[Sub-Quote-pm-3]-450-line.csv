# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000002,2,0.000001,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000000,1,0.000000,my $default_for__5fmedia_5ftype = ${$_[1]->{"\$default_for__5fmedia_5ftype"}};
0.000001,1,0.000001,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000000,1,0.000000,my $isa_check_for__5fmedia_5ftype = ${$_[1]->{"\$isa_check_for__5fmedia_5ftype"}};
0.000000,0,0.000000,package JSON::Schema::Modern;
0.000059,2,0.000029,no warnings 'closure';
0.000000,0,0.000000,sub _assert__media_type {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package Method::Generate::Accessor::_Generated;
0.000000,0,0.000000,BEGIN {
0.000000,1,0.000000,$^H = 2018;
0.000001,1,0.000001,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000005,1,0.000005,%^H = (
0.000000,0,0.000000,);
0.000055,1,0.000055,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.000000,0,0.000000,do {
0.000000,0,0.000000,my $val = exists $_[0]->{"_media_type"} ? 
0.000000,0,0.000000,$_[0]->{"_media_type"}
0.000000,0,0.000000,:    do {
0.000000,0,0.000000,my $value = $default_for__5fmedia_5ftype->($_[0]);
0.000199,2,0.000099,do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and do { my $ok = 1; for my $v (values %{$value}) { ($ok = 0, last) unless (Ref::Util::XS::is_plain_coderef($v)) }; for my $k (keys %{$value}) { ($ok = 0, last) unless ((do { package Type::Tiny; defined($k) and do { ref(\$k) eq 'SCALAR' or ref(\(my $val = $k)) eq 'SCALAR' } }) && (do { local $_ = $k; $_ eq CORE::fc($_) })) }; $ok } }) or Type::Tiny::_failed_check($isa_check_for__5fmedia_5ftype, "Map[__ANON__,CodeRef]", $value, "attribute_name","_media_type","attribute_step","isa check","mgaca","0","varname","\$self->{\"_media_type\"}"); $value };
0.000000,0,0.000000,$_[0]->{"_media_type"} = $value
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000000,0,0.000000,exists $_[0]->{"_media_type"}
0.000000,0,0.000000,or Carp::croak(q{Attempted to access '}."_media_type".q{' but it is not set});
0.000000,0,0.000000,$val;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000001,1,0.000001,$$_UNQUOTED = \&_assert__media_type;
0.000000,0,0.000000,}
0.000006,1,0.000006,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
