# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,#!perl -w
0.000000,0,0.000000,package version;
0.000000,0,0.000000,
0.000053,2,0.000027,use 5.006002;
0.000022,2,0.000011,use strict;
0.000433,2,0.000217,use warnings::register;
0.000002,1,0.000002,if ($] >= 5.015) {
0.000000,0,0.000000,warnings::register_categories(qw/version/);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = 0.9929;
0.000000,1,0.000000,our $CLASS = 'version';
0.000000,0,0.000000,our (@ISA, $STRICT, $LAX);
0.000000,0,0.000000,
0.000000,0,0.000000,# avoid using Exporter
0.000188,1,0.000188,require version::regex;
0.000003,1,0.000003,*version::is_lax = \&version::regex::is_lax;
0.000000,1,0.000000,*version::is_strict = \&version::regex::is_strict;
0.000001,1,0.000001,*LAX = \$version::regex::LAX;
0.000001,1,0.000001,*LAX_DECIMAL_VERSION = \$version::regex::LAX_DECIMAL_VERSION;
0.000000,1,0.000000,*LAX_DOTTED_DECIMAL_VERSION = \$version::regex::LAX_DOTTED_DECIMAL_VERSION;
0.000001,1,0.000001,*STRICT = \$version::regex::STRICT;
0.000000,1,0.000000,*STRICT_DECIMAL_VERSION = \$version::regex::STRICT_DECIMAL_VERSION;
0.000001,1,0.000001,*STRICT_DOTTED_DECIMAL_VERSION = \$version::regex::STRICT_DOTTED_DECIMAL_VERSION;
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000333,2,0.000167,no strict 'refs';
0.000000,0,0.000000,my ($class) = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,# Set up any derived class
0.000000,0,0.000000,unless ($class eq $CLASS) {
0.000000,0,0.000000,local $^W;
0.000000,0,0.000000,*{$class.'::declare'} =  \&{$CLASS.'::declare'};
0.000000,0,0.000000,*{$class.'::qv'} = \&{$CLASS.'::qv'};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my %args;
0.000000,0,0.000000,if (@_) { # any remaining terms are arguments
0.000000,0,0.000000,map { $args{$_} = 1 } @_
0.000000,0,0.000000,}
0.000000,0,0.000000,else { # no parameters at all on use line
0.000000,0,0.000000,%args =
0.000000,0,0.000000,(
0.000000,0,0.000000,qv => 1,
0.000000,0,0.000000,'UNIVERSAL::VERSION' => 1,
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $callpkg = caller();
0.000000,0,0.000000,
0.000000,0,0.000000,if (exists($args{declare})) {
0.000000,0,0.000000,*{$callpkg.'::declare'} =
0.000000,0,0.000000,sub {return $class->declare(shift) }
0.000000,0,0.000000,unless defined(&{$callpkg.'::declare'});
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if (exists($args{qv})) {
0.000000,0,0.000000,*{$callpkg.'::qv'} =
0.000000,0,0.000000,sub {return $class->qv(shift) }
0.000000,0,0.000000,unless defined(&{$callpkg.'::qv'});
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if (exists($args{'UNIVERSAL::VERSION'})) {
0.000000,0,0.000000,local $^W;
0.000000,0,0.000000,*UNIVERSAL::VERSION
0.000000,0,0.000000,= \&{$CLASS.'::_VERSION'};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if (exists($args{'VERSION'})) {
0.000000,0,0.000000,*{$callpkg.'::VERSION'} = \&{$CLASS.'::_VERSION'};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if (exists($args{'is_strict'})) {
0.000000,0,0.000000,*{$callpkg.'::is_strict'} = \&{$CLASS.'::is_strict'}
0.000000,0,0.000000,unless defined(&{$callpkg.'::is_strict'});
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if (exists($args{'is_lax'})) {
0.000000,0,0.000000,*{$callpkg.'::is_lax'} = \&{$CLASS.'::is_lax'}
0.000000,0,0.000000,unless defined(&{$callpkg.'::is_lax'});
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000008,1,0.000008,1;
