# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package IO::Uncompress::Adapter::Inflate;
0.000000,0,0.000000,
0.000035,2,0.000018,use strict;
0.000023,2,0.000012,use warnings;
0.000033,2,0.000017,use bytes;
0.000000,0,0.000000,
0.000073,3,0.000024,use IO::Compress::Base::Common  2.106 qw(:Status);
0.000549,3,0.000183,use Compress::Raw::Zlib  2.103 qw(Z_OK Z_BUF_ERROR Z_STREAM_END Z_FINISH MAX_WBITS);
0.000000,0,0.000000,
0.000000,0,0.000000,our ($VERSION);
0.000000,1,0.000000,$VERSION = '2.106';
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub mkUncompObject
0.000000,0,0.000000,{
0.000000,0,0.000000,my $crc32   = shift || 1;
0.000000,0,0.000000,my $adler32 = shift || 1;
0.000000,0,0.000000,my $scan    = shift || 0;
0.000000,0,0.000000,
0.000000,0,0.000000,my $inflate ;
0.000000,0,0.000000,my $status ;
0.000000,0,0.000000,
0.000000,0,0.000000,if ($scan)
0.000000,0,0.000000,{
0.000000,0,0.000000,($inflate, $status) = Compress::Raw::Zlib::InflateScan->new(
0.000000,0,0.000000,#LimitOutput  => 1,
0.000000,0,0.000000,CRC32        => $crc32,
0.000000,0,0.000000,ADLER32      => $adler32,
0.000000,0,0.000000,WindowBits   => - MAX_WBITS );
0.000000,0,0.000000,}
0.000000,0,0.000000,else
0.000000,0,0.000000,{
0.000000,0,0.000000,($inflate, $status) = Compress::Raw::Zlib::Inflate->new(
0.000000,0,0.000000,AppendOutput => 1,
0.000000,0,0.000000,LimitOutput  => 1,
0.000000,0,0.000000,CRC32        => $crc32,
0.000000,0,0.000000,ADLER32      => $adler32,
0.000000,0,0.000000,WindowBits   => - MAX_WBITS );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return (undef, "Could not create Inflation object: $status", $status)
0.000000,0,0.000000,if $status != Z_OK ;
0.000000,0,0.000000,
0.000000,0,0.000000,return bless {'Inf'        => $inflate,
0.000000,0,0.000000,'CompSize'   => 0,
0.000000,0,0.000000,'UnCompSize' => 0,
0.000000,0,0.000000,'Error'      => '',
0.000000,0,0.000000,'ConsumesInput' => 1,
0.000000,0,0.000000,} ;
0.000000,0,0.000000,
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub uncompr
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,my $from = shift ;
0.000000,0,0.000000,my $to   = shift ;
0.000000,0,0.000000,my $eof  = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $inf   = $self->{Inf};
0.000000,0,0.000000,
0.000000,0,0.000000,my $status = $inf->inflate($from, $to, $eof);
0.000000,0,0.000000,$self->{ErrorNo} = $status;
0.000000,0,0.000000,if ($status != Z_OK && $status != Z_STREAM_END && $status != Z_BUF_ERROR)
0.000000,0,0.000000,{
0.000000,0,0.000000,$self->{Error} = "Inflation Error: $status";
0.000000,0,0.000000,return STATUS_ERROR;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return STATUS_OK        if $status == Z_BUF_ERROR ; # ???
0.000000,0,0.000000,return STATUS_OK        if $status == Z_OK ;
0.000000,0,0.000000,return STATUS_ENDSTREAM if $status == Z_STREAM_END ;
0.000000,0,0.000000,return STATUS_ERROR ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub reset
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Inf}->inflateReset();
0.000000,0,0.000000,
0.000000,0,0.000000,return STATUS_OK ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#sub count
0.000000,0,0.000000,#{
0.000000,0,0.000000,#    my $self = shift ;
0.000000,0,0.000000,#    $self->{Inf}->inflateCount();
0.000000,0,0.000000,#}
0.000000,0,0.000000,
0.000000,0,0.000000,sub crc32
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Inf}->crc32();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub compressedBytes
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Inf}->compressedBytes();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub uncompressedBytes
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Inf}->uncompressedBytes();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub adler32
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Inf}->adler32();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub sync
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,( $self->{Inf}->inflateSync(@_) == Z_OK)
0.000000,0,0.000000,? STATUS_OK
0.000000,0,0.000000,: STATUS_ERROR ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub getLastBlockOffset
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Inf}->getLastBlockOffset();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub getEndOffset
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Inf}->getEndOffset();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub resetLastBlockByte
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,$self->{Inf}->resetLastBlockByte(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub createDeflateStream
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,my $deflate = $self->{Inf}->createDeflateStream(@_);
0.000000,0,0.000000,return bless {'Def'        => $deflate,
0.000000,0,0.000000,'CompSize'   => 0,
0.000000,0,0.000000,'UnCompSize' => 0,
0.000000,0,0.000000,'Error'      => '',
0.000000,0,0.000000,}, 'IO::Compress::Adapter::Deflate';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
