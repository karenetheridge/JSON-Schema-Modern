# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000040,2,0.000020,use strict;
0.000092,2,0.000046,use warnings;
0.000000,0,0.000000,package JSON::Schema::Modern::Vocabulary::MetaData;
0.000000,0,0.000000,# vim: set ts=8 sts=2 sw=2 tw=100 et :
0.000000,0,0.000000,# ABSTRACT: Implementation of the JSON Schema Meta-Data vocabulary
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = '0.558';
0.000000,0,0.000000,
0.000045,2,0.000022,use 5.020;
0.000036,2,0.000018,use Moo;
0.000056,3,0.000019,use strictures 2;
0.000035,2,0.000017,use experimental qw(signatures postderef);
0.000025,2,0.000012,use if "$]" >= 5.022, experimental => 're_strict';
0.000041,2,0.000021,no if "$]" >= 5.031009, feature => 'indirect';
0.000018,2,0.000009,no if "$]" >= 5.033001, feature => 'multidimensional';
0.000016,2,0.000008,no if "$]" >= 5.033006, feature => 'bareword_filehandles';
0.000018,2,0.000009,use JSON::Schema::Modern::Utilities qw(assert_keyword_type annotate_self);
0.000506,2,0.000253,use namespace::clean;
0.000000,0,0.000000,
0.000001,1,0.000001,with 'JSON::Schema::Modern::Vocabulary';
0.000000,0,0.000000,
0.000000,0,0.000000,sub vocabulary {
0.000002,1,0.000002,'https://json-schema.org/draft/2019-09/vocab/meta-data' => 'draft2019-09',
0.000000,0,0.000000,'https://json-schema.org/draft/2020-12/vocab/meta-data' => 'draft2020-12';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,5,0.000001,sub evaluation_order { 5 }
0.000000,0,0.000000,
0.000002,6,0.000000,sub keywords ($self, $spec_version) {
0.000000,0,0.000000,return (
0.000010,2,0.000005,qw(title description default),
0.000000,0,0.000000,$spec_version ne 'draft7' ? 'deprecated' : (),
0.000000,0,0.000000,qw(readOnly writeOnly examples),
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000116,524,0.000000,sub _traverse_keyword_title ($self, $schema, $state) {
0.000142,131,0.000001,return if not assert_keyword_type($state, $schema, 'string');
0.000240,131,0.000002,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.029415,161070,0.000000,sub _eval_keyword_title ($self, $data, $schema, $state) {
0.101513,32214,0.000003,annotate_self($state, $schema);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000316,97,0.000003,sub _traverse_keyword_description { shift->_traverse_keyword_title(@_) }
0.000000,0,0.000000,
0.018490,5174,0.000004,sub _eval_keyword_description { shift->_eval_keyword_title(@_) }
0.000000,0,0.000000,
0.000148,98,0.000002,sub _traverse_keyword_default { 1 }
0.000000,0,0.000000,
0.005342,1180,0.000005,sub _eval_keyword_default { shift->_eval_keyword_title(@_) }
0.000000,0,0.000000,
0.000066,600,0.000000,sub _traverse_keyword_deprecated ($self, $schema, $state) {
0.000131,150,0.000001,return if not assert_keyword_type($state, $schema, 'boolean');
0.000245,150,0.000002,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_deprecated { shift->_eval_keyword_title(@_) }
0.000000,0,0.000000,
0.000475,135,0.000004,sub _traverse_keyword_readOnly { shift->_traverse_keyword_deprecated(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_readOnly { shift->_eval_keyword_title(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _traverse_keyword_writeOnly { shift->_traverse_keyword_deprecated(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_writeOnly { shift->_eval_keyword_title(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _traverse_keyword_examples ($self, $schema, $state) {
0.000000,0,0.000000,return if not assert_keyword_type($state, $schema, 'array');
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_examples { shift->_eval_keyword_title(@_) }
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000017,1,0.000017,__END__
