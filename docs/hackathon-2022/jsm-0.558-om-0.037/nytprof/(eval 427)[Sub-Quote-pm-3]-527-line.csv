# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000001,2,0.000000,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000000,1,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000000,0,0.000000,package Type::Tiny;
0.000000,0,0.000000,$$_UNQUOTED = sub {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package Type::Tiny;
0.000000,0,0.000000,BEGIN {
0.000001,1,0.000001,$^H = 1762;
0.000001,1,0.000001,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000004,1,0.000004,%^H = (
0.000000,0,0.000000,);
0.000022,1,0.000022,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.000703,43,0.000016,do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($_[0])) and (not grep {my $v = ($_[0])->{$_};not((/\A(?:date\-time|date|time|duration|email|idn\-email|hostname|idn\-hostname|ipv4|ipv6|uri|uri\-reference|iri|iri\-reference|uuid|uri\-template|json\-pointer|relative\-json\-pointer|regex)\z/) or (((!!1)) and (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($v)) and not(grep !/\A(?:type|sub)\z/, keys %{$v}) and exists($v->{"type"}) and (defined($v->{"type"}) and !ref($v->{"type"}) and $v->{"type"} =~ m{\A(?:(?:array|boolean|integer|nu(?:ll|mber)|object|string))\z}) and exists($v->{"sub"}) and do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($v->{"sub"}) } })))} keys %{$_[0]}) and (!exists $_[0]->{"date-time"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"date-time"}) })) and (!exists $_[0]->{"date"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"date"}) })) and (!exists $_[0]->{"time"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"time"}) })) and (!exists $_[0]->{"duration"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"duration"}) })) and (!exists $_[0]->{"email"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"email"}) })) and (!exists $_[0]->{"idn-email"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"idn-email"}) })) and (!exists $_[0]->{"hostname"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"hostname"}) })) and (!exists $_[0]->{"idn-hostname"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"idn-hostname"}) })) and (!exists $_[0]->{"ipv4"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"ipv4"}) })) and (!exists $_[0]->{"ipv6"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"ipv6"}) })) and (!exists $_[0]->{"uri"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"uri"}) })) and (!exists $_[0]->{"uri-reference"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"uri-reference"}) })) and (!exists $_[0]->{"iri"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"iri"}) })) and (!exists $_[0]->{"iri-reference"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"iri-reference"}) })) and (!exists $_[0]->{"uuid"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"uuid"}) })) and (!exists $_[0]->{"uri-template"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"uri-template"}) })) and (!exists $_[0]->{"json-pointer"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"json-pointer"}) })) and (!exists $_[0]->{"relative-json-pointer"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"relative-json-pointer"}) })) and (!exists $_[0]->{"regex"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($_[0]->{"regex"}) })) }) or Type::Tiny::_failed_check(64, "Dict[date=>Optional[CodeRef],date-time=>Optional[CodeRef],duration=>Optional[CodeRef],email=>Optional[CodeRef],hostname=>Optional[CodeRef],idn-email=>Optional[CodeRef],idn-hostname=>Optional[CodeRef],ipv4=>Optional[CodeRef],ipv6=>Optional[CodeRef],iri=>Optional[CodeRef],iri-reference=>Optional[CodeRef],json-pointer=>Optional[CodeRef],regex=>Optional[CodeRef],relative-json-pointer=>Optional[CodeRef],time=>Optional[CodeRef],uri=>Optional[CodeRef],uri-reference=>Optional[CodeRef],uri-template=>Optional[CodeRef],uuid=>Optional[CodeRef],Slurpy[HashRef[Dict[sub=>CodeRef,type=>Enum[\"null\",\"object\",\"array\",\"boolean\",\"string\",\"number\",\"integer\"]]]]]", $_[0], ); $_[0] };  };
0.000000,0,0.000000,}
0.000005,1,0.000005,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
