# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package IO::Compress::RawDeflate ;
0.000000,0,0.000000,
0.000000,0,0.000000,# create RFC1951
0.000000,0,0.000000,#
0.000024,2,0.000012,use strict ;
0.000016,2,0.000008,use warnings;
0.000016,2,0.000008,use bytes;
0.000000,0,0.000000,
0.000617,3,0.000206,use IO::Compress::Base 2.106 ;
0.000043,3,0.000014,use IO::Compress::Base::Common  2.106 qw(:Status :Parse);
0.000744,3,0.000248,use IO::Compress::Adapter::Deflate 2.106 ;
0.000721,3,0.000240,use Compress::Raw::Zlib  2.103 qw(Z_DEFLATED Z_DEFAULT_COMPRESSION Z_DEFAULT_STRATEGY);
0.000000,0,0.000000,
0.000001,1,0.000001,require Exporter ;
0.000000,0,0.000000,
0.000000,0,0.000000,our ($VERSION, @ISA, @EXPORT_OK, %DEFLATE_CONSTANTS, %EXPORT_TAGS, $RawDeflateError);
0.000000,0,0.000000,
0.000001,1,0.000001,$VERSION = '2.106';
0.000000,1,0.000000,$RawDeflateError = '';
0.000000,0,0.000000,
0.000013,1,0.000013,@ISA = qw(IO::Compress::Base Exporter);
0.000005,1,0.000005,@EXPORT_OK = qw( $RawDeflateError rawdeflate ) ;
0.000007,1,0.000007,push @EXPORT_OK, @IO::Compress::Adapter::Deflate::EXPORT_OK ;
0.000000,0,0.000000,
0.000002,1,0.000002,%EXPORT_TAGS = %IO::Compress::Adapter::Deflate::DEFLATE_CONSTANTS;
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,{
0.000000,2,0.000000,my %seen;
0.000001,1,0.000001,foreach (keys %EXPORT_TAGS )
0.000000,0,0.000000,{
0.000000,0,0.000000,push @{$EXPORT_TAGS{constants}},
0.000000,0,0.000000,grep { !$seen{$_}++ }
0.000057,4,0.000014,@{ $EXPORT_TAGS{$_} }
0.000000,0,0.000000,}
0.000003,1,0.000003,$EXPORT_TAGS{all} = $EXPORT_TAGS{constants} ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000003,1,0.000003,%DEFLATE_CONSTANTS = %EXPORT_TAGS;
0.000000,0,0.000000,
0.000000,0,0.000000,#push @{ $EXPORT_TAGS{all} }, @EXPORT_OK ;
0.000000,0,0.000000,
0.000003,1,0.000003,Exporter::export_ok_tags('all');
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub new
0.000000,0,0.000000,{
0.000000,0,0.000000,my $class = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $obj = IO::Compress::Base::Common::createSelfTiedObject($class, \$RawDeflateError);
0.000000,0,0.000000,
0.000000,0,0.000000,return $obj->_create(undef, @_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub rawdeflate
0.000000,0,0.000000,{
0.000000,0,0.000000,my $obj = IO::Compress::Base::Common::createSelfTiedObject(undef, \$RawDeflateError);
0.000000,0,0.000000,return $obj->_def(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub ckParams
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,my $got = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return 1 ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub mkComp
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,my $got = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my ($obj, $errstr, $errno) = IO::Compress::Adapter::Deflate::mkCompObject(
0.000000,0,0.000000,$got->getValue('crc32'),
0.000000,0,0.000000,$got->getValue('adler32'),
0.000000,0,0.000000,$got->getValue('level'),
0.000000,0,0.000000,$got->getValue('strategy')
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->saveErrorString(undef, $errstr, $errno)
0.000000,0,0.000000,if ! defined $obj;
0.000000,0,0.000000,
0.000000,0,0.000000,return $obj;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub mkHeader
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,return '';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub mkTrailer
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,return '';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub mkFinalTrailer
0.000000,0,0.000000,{
0.000000,0,0.000000,return '';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,#sub newHeader
0.000000,0,0.000000,#{
0.000000,0,0.000000,#    my $self = shift ;
0.000000,0,0.000000,#    return '';
0.000000,0,0.000000,#}
0.000000,0,0.000000,
0.000000,0,0.000000,sub getExtraParams
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,return getZlibParams();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000006,1,0.000006,our %PARAMS = (
0.000000,0,0.000000,#'method'   => [IO::Compress::Base::Common::Parse_unsigned,  Z_DEFLATED],
0.000000,0,0.000000,'level'     => [IO::Compress::Base::Common::Parse_signed,    Z_DEFAULT_COMPRESSION],
0.000000,0,0.000000,'strategy'  => [IO::Compress::Base::Common::Parse_signed,    Z_DEFAULT_STRATEGY],
0.000000,0,0.000000,
0.000000,0,0.000000,'crc32'     => [IO::Compress::Base::Common::Parse_boolean,   0],
0.000000,0,0.000000,'adler32'   => [IO::Compress::Base::Common::Parse_boolean,   0],
0.000000,0,0.000000,'merge'     => [IO::Compress::Base::Common::Parse_boolean,   0],
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,sub getZlibParams
0.000000,0,0.000000,{
0.000000,0,0.000000,return %PARAMS;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub getInverseClass
0.000000,0,0.000000,{
0.000099,2,0.000049,no warnings 'once';
0.000000,0,0.000000,return ('IO::Uncompress::RawInflate',
0.000000,0,0.000000,\$IO::Uncompress::RawInflate::RawInflateError);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub getFileInfo
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,my $params = shift;
0.000000,0,0.000000,my $file = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000385,2,0.000193,use Fcntl qw(SEEK_SET);
0.000000,0,0.000000,
0.000000,0,0.000000,sub createMerge
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,my $outValue = shift ;
0.000000,0,0.000000,my $outType = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my ($invClass, $error_ref) = $self->getInverseClass();
0.000000,0,0.000000,eval "require $invClass"
0.000000,0,0.000000,or die "aaaahhhh" ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $inf = $invClass->new( $outValue,
0.000000,0,0.000000,Transparent => 0,
0.000000,0,0.000000,#Strict     => 1,
0.000000,0,0.000000,AutoClose   => 0,
0.000000,0,0.000000,Scan        => 1)
0.000000,0,0.000000,or return $self->saveErrorString(undef, "Cannot create InflateScan object: $$error_ref" ) ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $end_offset = 0;
0.000000,0,0.000000,$inf->scan()
0.000000,0,0.000000,or return $self->saveErrorString(undef, "Error Scanning: $$error_ref", $inf->errorNo) ;
0.000000,0,0.000000,$inf->zap($end_offset)
0.000000,0,0.000000,or return $self->saveErrorString(undef, "Error Zapping: $$error_ref", $inf->errorNo) ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $def = *$self->{Compress} = $inf->createDeflate();
0.000000,0,0.000000,
0.000000,0,0.000000,*$self->{Header} = *$inf->{Info}{Header};
0.000000,0,0.000000,*$self->{UnCompSize} = *$inf->{UnCompSize}->clone();
0.000000,0,0.000000,*$self->{CompSize} = *$inf->{CompSize}->clone();
0.000000,0,0.000000,# TODO -- fix this
0.000000,0,0.000000,#*$self->{CompSize} = U64->new(0, *$self->{UnCompSize_32bit});
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,if ( $outType eq 'buffer')
0.000000,0,0.000000,{ substr( ${ *$self->{Buffer} }, $end_offset) = '' }
0.000000,0,0.000000,elsif ($outType eq 'handle' || $outType eq 'filename') {
0.000000,0,0.000000,*$self->{FH} = *$inf->{FH} ;
0.000000,0,0.000000,delete *$inf->{FH};
0.000000,0,0.000000,*$self->{FH}->flush() ;
0.000000,0,0.000000,*$self->{Handle} = 1 if $outType eq 'handle';
0.000000,0,0.000000,
0.000000,0,0.000000,#seek(*$self->{FH}, $end_offset, SEEK_SET)
0.000000,0,0.000000,*$self->{FH}->seek($end_offset, SEEK_SET)
0.000000,0,0.000000,or return $self->saveErrorString(undef, $!, $!) ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return $def ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#### zlib specific methods
0.000000,0,0.000000,
0.000000,0,0.000000,sub deflateParams
0.000000,0,0.000000,{
0.000000,0,0.000000,my $self = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $level = shift ;
0.000000,0,0.000000,my $strategy = shift ;
0.000000,0,0.000000,
0.000000,0,0.000000,my $status = *$self->{Compress}->deflateParams(Level => $level, Strategy => $strategy) ;
0.000000,0,0.000000,return $self->saveErrorString(0, *$self->{Compress}{Error}, *$self->{Compress}{ErrorNo})
0.000000,0,0.000000,if $status == STATUS_ERROR;
0.000000,0,0.000000,
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000015,1,0.000015,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
