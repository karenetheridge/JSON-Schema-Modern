# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000003,2,0.000002,my $isa_check_for_keyword_5flocation = ${$_[1]->{"\$isa_check_for_keyword_5flocation"}};
0.000001,1,0.000001,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000001,1,0.000001,my $isa_check_for_absolute_5fkeyword_5flocation = ${$_[1]->{"\$isa_check_for_absolute_5fkeyword_5flocation"}};
0.000001,1,0.000001,my $isa_check_for_unknown = ${$_[1]->{"\$isa_check_for_unknown"}};
0.000000,1,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000002,1,0.000002,my $coerce_for_absolute_5fkeyword_5flocation = ${$_[1]->{"\$coerce_for_absolute_5fkeyword_5flocation"}};
0.000000,1,0.000000,my $isa_check_for_keyword = ${$_[1]->{"\$isa_check_for_keyword"}};
0.000001,1,0.000001,my $isa_check_for_instance_5flocation = ${$_[1]->{"\$isa_check_for_instance_5flocation"}};
0.000000,0,0.000000,package JSON::Schema::Modern::Annotation;
0.000091,2,0.000046,no warnings 'closure';
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package JSON::Schema::Modern::Annotation;
0.000000,0,0.000000,BEGIN {
0.000000,1,0.000000,$^H = 2018;
0.000000,1,0.000000,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000005,1,0.000005,%^H = (
0.000000,0,0.000000,);
0.000279,1,0.000279,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.032795,71790,0.000000,my $invoker = CORE::shift();
0.033232,71790,0.000000,my $class = CORE::ref($invoker) ? CORE::ref($invoker) : $invoker;
0.026519,71790,0.000000,if ($class ne "JSON::Schema::Modern::Annotation") {
0.000000,0,0.000000,if ($Moo::MAKERS{$class}) {
0.000000,0,0.000000,if ($Moo::MAKERS{$class}{constructor}) {
0.000000,0,0.000000,package JSON::Schema::Modern::Annotation;
0.000000,0,0.000000,return $invoker->SUPER::new(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,Moo->_constructor_maker_for($class);
0.000000,0,0.000000,return $invoker->new(@_);
0.000000,0,0.000000,} elsif ($INC{"Moose.pm"} and my $meta = Class::MOP::get_metaclass_by_name($class)) {
0.000000,0,0.000000,return $meta->new_object(
0.000000,0,0.000000,$class->can("BUILDARGS") ? $class->BUILDARGS(@_)
0.000000,0,0.000000,: $class->Moo::Object::BUILDARGS(@_)
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,my $args = scalar @_ == 1
0.000000,0,0.000000,? CORE::ref $_[0] eq 'HASH'
0.204615,71790,0.000003,? { %{ $_[0] } }
0.000000,0,0.000000,: Carp::croak("Single parameters to new() must be a HASH ref"
0.000000,0,0.000000,. " data => ". $_[0])
0.000000,0,0.000000,: @_ % 2
0.000000,0,0.000000,? Carp::croak("The new() method for $class expects a hash reference or a"
0.000000,0,0.000000,. " key/value list. You passed an odd number of arguments")
0.000000,0,0.000000,: {@_}
0.000000,0,0.000000,;
0.110682,71790,0.000002,if (my @missing = grep !exists $args->{$_}, "annotation", "instance_location", "keyword", "keyword_location") {
0.000000,0,0.000000,Carp::croak("Missing required arguments: ".CORE::join(', ', sort @missing));
0.000000,0,0.000000,}
0.034393,71790,0.000000,my $new = bless({}, $class);;
0.029125,71790,0.000000,(exists $args->{"absolute_keyword_location"} and ($new->{"absolute_keyword_location"} = scalar do { my $value = do {
0.134966,71790,0.000002,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => "absolute_keyword_location",
0.000000,0,0.000000,name     => "absolute_keyword_location",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.029001,71790,0.000000,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.032921,71790,0.000000,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.135771,71790,0.000002,$coerce_for_absolute_5fkeyword_5flocation->($args->{"absolute_keyword_location"})),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"absolute_keyword_location\" failed: ".$@);
0.027345,71790,0.000000,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.075657,71790,0.000001,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.330940,215372,0.000002,(do { no warnings "void"; package Type::Tiny; ((Scalar::Util::blessed($value) and $value->isa(q[Mojo::URL]))) or Type::Tiny::_failed_check($isa_check_for_absolute_5fkeyword_5flocation, "InstanceOf[\"Mojo::URL\"]", $value, "attribute_name","absolute_keyword_location","attribute_step","isa check","mgaca","0","varname","\$args->{\"absolute_keyword_location\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"annotation"} and ($new->{"annotation"} = $args->{"annotation"})),
0.025109,71790,0.000000,(exists $args->{"instance_location"} and ($new->{"instance_location"} = scalar do { my $value = $args->{"instance_location"};
0.134021,287162,0.000000,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; defined($value) and do { ref(\$value) eq 'SCALAR' or ref(\(my $val = $value)) eq 'SCALAR' } }) or Type::Tiny::_failed_check($isa_check_for_instance_5flocation, "Str", $value, "attribute_name","instance_location","attribute_step","isa check","mgaca","0","varname","\$args->{\"instance_location\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.023922,71790,0.000000,(exists $args->{"keyword"} and ($new->{"keyword"} = scalar do { my $value = $args->{"keyword"};
0.086293,287162,0.000000,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; defined($value) and do { ref(\$value) eq 'SCALAR' or ref(\(my $val = $value)) eq 'SCALAR' } }) or Type::Tiny::_failed_check($isa_check_for_keyword, "Str", $value, "attribute_name","keyword","attribute_step","isa check","mgaca","0","varname","\$args->{\"keyword\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.017583,71790,0.000000,(exists $args->{"keyword_location"} and ($new->{"keyword_location"} = scalar do { my $value = $args->{"keyword_location"};
0.082783,287162,0.000000,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; defined($value) and do { ref(\$value) eq 'SCALAR' or ref(\(my $val = $value)) eq 'SCALAR' } }) or Type::Tiny::_failed_check($isa_check_for_keyword_5flocation, "Str", $value, "attribute_name","keyword_location","attribute_step","isa check","mgaca","0","varname","\$args->{\"keyword_location\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.493002,71790,0.000007,($new->{"unknown"} = scalar do { my $value = (
0.000000,0,0.000000,exists $args->{"unknown"}
0.027455,71790,0.000000,? $args->{"unknown"}
0.000000,0,0.000000,: 0);
0.114518,215372,0.000001,(do { no warnings "void"; package Type::Tiny; ((!ref $value and (!defined $value or $value eq q() or $value eq '0' or $value eq '1'))) or Type::Tiny::_failed_check($isa_check_for_unknown, "Bool", $value, "attribute_name","unknown","attribute_step","isa check","mgaca","0","varname","\$args->{\"unknown\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,),
0.000000,0,0.000000,return $new;
0.000000,0,0.000000,}
0.000003,1,0.000003,$$_UNQUOTED = \&new;
0.000000,0,0.000000,}
0.000010,1,0.000010,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
