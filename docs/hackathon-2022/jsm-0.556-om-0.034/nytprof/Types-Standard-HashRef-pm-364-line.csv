# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,# INTERNAL MODULE: guts for HashRef type from Types::Standard.
0.000000,0,0.000000,
0.000000,0,0.000000,package Types::Standard::HashRef;
0.000000,0,0.000000,
0.000055,2,0.000028,use 5.008001;
0.000028,2,0.000014,use strict;
0.000043,2,0.000022,use warnings;
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000000,1,0.000000,$Types::Standard::HashRef::AUTHORITY = 'cpan:TOBYINK';
0.000004,1,0.000004,$Types::Standard::HashRef::VERSION   = '2.000001';
0.000035,1,0.000035,}
0.000000,0,0.000000,
0.000001,1,0.000001,$Types::Standard::HashRef::VERSION =~ tr/_//d;
0.000000,0,0.000000,
0.000017,2,0.000008,use Type::Tiny      ();
0.000012,2,0.000006,use Types::Standard ();
0.000045,2,0.000023,use Types::TypeTiny ();
0.000000,0,0.000000,
0.000000,0,0.000000,sub _croak ($;@) { require Error::TypeTiny; goto \&Error::TypeTiny::croak }
0.000000,0,0.000000,
0.000827,2,0.000414,no warnings;
0.000000,0,0.000000,
0.000000,0,0.000000,sub __constraint_generator {
0.000005,8,0.000001,return Types::Standard::HashRef unless @_;
0.000000,0,0.000000,
0.000001,8,0.000000,my $param = shift;
0.000007,8,0.000001,Types::TypeTiny::is_TypeTiny( $param )
0.000000,0,0.000000,or _croak(
0.000000,0,0.000000,"Parameter to HashRef[`a] expected to be a type constraint; got $param" );
0.000000,0,0.000000,
0.000012,8,0.000002,my $param_compiled_check = $param->compiled_check;
0.000001,8,0.000000,my $xsub;
0.000023,8,0.000003,if ( Type::Tiny::_USE_XS ) {
0.000000,0,0.000000,my $paramname = Type::Tiny::XS::is_known( $param_compiled_check );
0.000000,0,0.000000,$xsub = Type::Tiny::XS::get_coderef_for( "HashRef[$paramname]" )
0.000000,0,0.000000,if $paramname;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ( Type::Tiny::_USE_MOUSE and $param->_has_xsub ) {
0.000000,0,0.000000,require Mouse::Util::TypeConstraints;
0.000000,0,0.000000,my $maker = "Mouse::Util::TypeConstraints"->can( "_parameterize_HashRef_for" );
0.000000,0,0.000000,$xsub = $maker->( $param ) if $maker;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return (
0.000000,0,0.000000,sub {
0.000000,0,0.000000,my $hash = shift;
0.000000,0,0.000000,$param->check( $_ ) || return for values %$hash;
0.000000,0,0.000000,return !!1;
0.000000,0,0.000000,},
0.000043,8,0.000005,$xsub,
0.000000,0,0.000000,);
0.000000,0,0.000000,} #/ sub __constraint_generator
0.000000,0,0.000000,
0.000000,0,0.000000,sub __inline_generator {
0.000004,8,0.000000,my $param = shift;
0.000000,0,0.000000,
0.000012,8,0.000002,my $compiled = $param->compiled_check;
0.000000,8,0.000000,my $xsubname;
0.000000,0,0.000000,if ( Type::Tiny::_USE_XS and not $Type::Tiny::AvoidCallbacks ) {
0.000000,0,0.000000,my $paramname = Type::Tiny::XS::is_known( $compiled );
0.000000,0,0.000000,$xsubname = Type::Tiny::XS::get_subname_for( "HashRef[$paramname]" );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000012,8,0.000001,return unless $param->can_be_inlined;
0.000000,0,0.000000,return sub {
0.000016,37,0.000000,my $v = $_[1];
0.000013,37,0.000000,return "$xsubname\($v\)" if $xsubname && !$Type::Tiny::AvoidCallbacks;
0.000104,37,0.000003,my $p           = Types::Standard::HashRef->inline_check( $v );
0.000044,37,0.000001,my $param_check = $param->inline_check( '$i' );
0.000000,0,0.000000,
0.000139,37,0.000004,"$p and do { "
0.000000,0,0.000000,. "my \$ok = 1; "
0.000000,0,0.000000,. "for my \$i (values \%{$v}) { "
0.000000,0,0.000000,. "(\$ok = 0, last) unless $param_check " . "}; " . "\$ok " . "}";
0.000036,8,0.000005,};
0.000000,0,0.000000,} #/ sub __inline_generator
0.000000,0,0.000000,
0.000000,0,0.000000,sub __deep_explanation {
0.000000,0,0.000000,require B;
0.000000,0,0.000000,my ( $type, $value, $varname ) = @_;
0.000000,0,0.000000,my $param = $type->parameters->[0];
0.000000,0,0.000000,
0.000000,0,0.000000,for my $k ( sort keys %$value ) {
0.000000,0,0.000000,my $item = $value->{$k};
0.000000,0,0.000000,next if $param->check( $item );
0.000000,0,0.000000,return [
0.000000,0,0.000000,sprintf( '"%s" constrains each value in the hash with "%s"', $type, $param ),
0.000000,0,0.000000,@{
0.000000,0,0.000000,$param->validate_explain(
0.000000,0,0.000000,$item, sprintf( '%s->{%s}', $varname, B::perlstring( $k ) )
0.000000,0,0.000000,)
0.000000,0,0.000000,},
0.000000,0,0.000000,];
0.000000,0,0.000000,} #/ for my $k ( sort keys %$value)
0.000000,0,0.000000,
0.000000,0,0.000000,# This should never happen...
0.000000,0,0.000000,return;    # uncoverable statement
0.000000,0,0.000000,} #/ sub __deep_explanation
0.000000,0,0.000000,
0.000000,0,0.000000,sub __coercion_generator {
0.000002,2,0.000001,my ( $parent, $child, $param ) = @_;
0.000013,2,0.000006,return unless $param->has_coercion;
0.000000,0,0.000000,
0.000000,0,0.000000,my $coercable_item = $param->coercion->_source_type_union;
0.000000,0,0.000000,my $C              = "Type::Coercion"->new( type_constraint => $child );
0.000000,0,0.000000,
0.000000,0,0.000000,if ( $param->coercion->can_be_inlined and $coercable_item->can_be_inlined ) {
0.000000,0,0.000000,$C->add_type_coercions(
0.000000,0,0.000000,$parent => Types::Standard::Stringable {
0.000000,0,0.000000,my @code;
0.000000,0,0.000000,push @code, 'do { my ($orig, $return_orig, %new) = ($_, 0);';
0.000000,0,0.000000,push @code, 'for (keys %$orig) {';
0.000000,0,0.000000,push @code,
0.000000,0,0.000000,sprintf(
0.000000,0,0.000000,'$return_orig++ && last unless (%s);',
0.000000,0,0.000000,$coercable_item->inline_check( '$orig->{$_}' )
0.000000,0,0.000000,);
0.000000,0,0.000000,push @code,
0.000000,0,0.000000,sprintf(
0.000000,0,0.000000,'$new{$_} = (%s);',
0.000000,0,0.000000,$param->coercion->inline_coercion( '$orig->{$_}' )
0.000000,0,0.000000,);
0.000000,0,0.000000,push @code, '}';
0.000000,0,0.000000,push @code, '$return_orig ? $orig : \\%new';
0.000000,0,0.000000,push @code, '}';
0.000000,0,0.000000,"@code";
0.000000,0,0.000000,}
0.000000,0,0.000000,);
0.000000,0,0.000000,} #/ if ( $param->coercion->...)
0.000000,0,0.000000,else {
0.000000,0,0.000000,$C->add_type_coercions(
0.000000,0,0.000000,$parent => sub {
0.000000,0,0.000000,my $value = @_ ? $_[0] : $_;
0.000000,0,0.000000,my %new;
0.000000,0,0.000000,for my $k ( keys %$value ) {
0.000000,0,0.000000,return $value unless $coercable_item->check( $value->{$k} );
0.000000,0,0.000000,$new{$k} = $param->coerce( $value->{$k} );
0.000000,0,0.000000,}
0.000000,0,0.000000,return \%new;
0.000000,0,0.000000,},
0.000000,0,0.000000,);
0.000000,0,0.000000,} #/ else [ if ( $param->coercion->...)]
0.000000,0,0.000000,
0.000000,0,0.000000,return $C;
0.000000,0,0.000000,} #/ sub __coercion_generator
0.000000,0,0.000000,
0.000000,0,0.000000,sub __hashref_allows_key {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,Types::Standard::is_Str( $_[0] );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub __hashref_allows_value {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my ( $key, $value ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,return !!0 unless $self->my_hashref_allows_key( $key );
0.000000,0,0.000000,return !!1 if $self == Types::Standard::HashRef();
0.000000,0,0.000000,
0.000000,0,0.000000,my $href = $self->find_parent(
0.000000,0,0.000000,sub { $_->has_parent && $_->parent == Types::Standard::HashRef() } );
0.000000,0,0.000000,my $param = $href->type_parameter;
0.000000,0,0.000000,
0.000000,0,0.000000,Types::Standard::is_Str( $key ) and $param->check( $value );
0.000000,0,0.000000,} #/ sub __hashref_allows_value
0.000000,0,0.000000,
0.000005,1,0.000005,1;
