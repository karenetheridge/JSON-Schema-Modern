# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,Profile data that couldn't be associated with a specific line:
0.000076,1,0.000076,package Cpanel::JSON::XS;
0.000001,1,0.000001,our $VERSION = '4.32';
0.000000,1,0.000000,our $XS_VERSION = $VERSION;
0.000000,0,0.000000,# $VERSION = eval $VERSION;
0.000000,0,0.000000,
0.000000,0,0.000000,=pod
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS - cPanel fork of JSON::XS, fast and correct serializing
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,use Cpanel::JSON::XS;
0.000000,0,0.000000,
0.000000,0,0.000000,# exported functions, they croak on error
0.000000,0,0.000000,# and expect/generate UTF-8
0.000000,0,0.000000,
0.000000,0,0.000000,$utf8_encoded_json_text = encode_json $perl_hash_or_arrayref;
0.000000,0,0.000000,$perl_hash_or_arrayref  = decode_json $utf8_encoded_json_text;
0.000000,0,0.000000,
0.000000,0,0.000000,# OO-interface
0.000000,0,0.000000,
0.000000,0,0.000000,$coder = Cpanel::JSON::XS->new->ascii->pretty->allow_nonref;
0.000000,0,0.000000,$pretty_printed_unencoded = $coder->encode ($perl_scalar);
0.000000,0,0.000000,$perl_scalar = $coder->decode ($unicode_json_text);
0.000000,0,0.000000,
0.000000,0,0.000000,# Note that 5.6 misses most smart utf8 and encoding functionalities
0.000000,0,0.000000,# of newer releases.
0.000000,0,0.000000,
0.000000,0,0.000000,# Note that L<JSON::MaybeXS> will automatically use Cpanel::JSON::XS
0.000000,0,0.000000,# if available, at virtually no speed overhead either, so you should
0.000000,0,0.000000,# be able to just:
0.000000,0,0.000000,
0.000000,0,0.000000,use JSON::MaybeXS;
0.000000,0,0.000000,
0.000000,0,0.000000,# and do the same things, except that you have a pure-perl fallback now.
0.000000,0,0.000000,
0.000000,0,0.000000,Note that this module will be replaced by a new JSON::Safe module soon,
0.000000,0,0.000000,with the same API just guaranteed safe defaults.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,This module converts Perl data structures to JSON and vice versa. Its
0.000000,0,0.000000,primary goal is to be I<correct> and its secondary goal is to be
0.000000,0,0.000000,I<fast>. To reach the latter goal it was written in C.
0.000000,0,0.000000,
0.000000,0,0.000000,As this is the n-th-something JSON module on CPAN, what was the reason
0.000000,0,0.000000,to write yet another JSON module? While it seems there are many JSON
0.000000,0,0.000000,modules, none of them correctly handle all corner cases, and in most cases
0.000000,0,0.000000,their maintainers are unresponsive, gone missing, or not listening to bug
0.000000,0,0.000000,reports for other reasons.
0.000000,0,0.000000,
0.000000,0,0.000000,See below for the cPanel fork.
0.000000,0,0.000000,
0.000000,0,0.000000,See MAPPING, below, on how Cpanel::JSON::XS maps perl values to JSON
0.000000,0,0.000000,values and vice versa.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 FEATURES
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item * correct Unicode handling
0.000000,0,0.000000,
0.000000,0,0.000000,This module knows how to handle Unicode with Perl version higher than 5.8.5,
0.000000,0,0.000000,documents how and when it does so, and even documents what "correct" means.
0.000000,0,0.000000,
0.000000,0,0.000000,=item * round-trip integrity
0.000000,0,0.000000,
0.000000,0,0.000000,When you serialize a perl data structure using only data types supported
0.000000,0,0.000000,by JSON and Perl, the deserialized data structure is identical on the Perl
0.000000,0,0.000000,level. (e.g. the string "2.0" doesn't suddenly become "2" just because
0.000000,0,0.000000,it looks like a number). There I<are> minor exceptions to this, read the
0.000000,0,0.000000,MAPPING section below to learn about those.
0.000000,0,0.000000,
0.000000,0,0.000000,=item * strict checking of JSON correctness
0.000000,0,0.000000,
0.000000,0,0.000000,There is no guessing, no generating of illegal JSON texts by default,
0.000000,0,0.000000,and only JSON is accepted as input by default. the latter is a security
0.000000,0,0.000000,feature.
0.000000,0,0.000000,
0.000000,0,0.000000,=item * fast
0.000000,0,0.000000,
0.000000,0,0.000000,Compared to other JSON modules and other serializers such as Storable,
0.000000,0,0.000000,this module usually compares favourably in terms of speed, too.
0.000000,0,0.000000,
0.000000,0,0.000000,=item * simple to use
0.000000,0,0.000000,
0.000000,0,0.000000,This module has both a simple functional interface as well as an object
0.000000,0,0.000000,oriented interface.
0.000000,0,0.000000,
0.000000,0,0.000000,=item * reasonably versatile output formats
0.000000,0,0.000000,
0.000000,0,0.000000,You can choose between the most compact guaranteed-single-line format
0.000000,0,0.000000,possible (nice for simple line-based protocols), a pure-ASCII format
0.000000,0,0.000000,(for when your transport is not 8-bit clean, still supports the whole
0.000000,0,0.000000,Unicode range), or a pretty-printed format (for when you want to read that
0.000000,0,0.000000,stuff). Or you can combine those features in whatever way you like.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 cPanel fork
0.000000,0,0.000000,
0.000000,0,0.000000,Since the original author MLEHMANN has no public
0.000000,0,0.000000,bugtracker, this cPanel fork sits now on github.
0.000000,0,0.000000,
0.000000,0,0.000000,src repo: L<https://github.com/rurban/Cpanel-JSON-XS>
0.000000,0,0.000000,original: L<http://cvs.schmorp.de/JSON-XS/>
0.000000,0,0.000000,
0.000000,0,0.000000,RT:       L<https://github.com/rurban/Cpanel-JSON-XS/issues>
0.000000,0,0.000000,or        L<https://rt.cpan.org/Public/Dist/Display.html?Queue=Cpanel-JSON-XS>
0.000000,0,0.000000,
0.000000,0,0.000000,B<Changes to JSON::XS>
0.000000,0,0.000000,
0.000000,0,0.000000,- stricter decode_json() as documented. non-refs are disallowed.
0.000000,0,0.000000,safe by default.
0.000000,0,0.000000,added a 2nd optional argument. decode() honors now allow_nonref.
0.000000,0,0.000000,
0.000000,0,0.000000,- fixed encode of numbers for dual-vars. Different string
0.000000,0,0.000000,representations are preserved, but numbers with temporary strings
0.000000,0,0.000000,which represent the same number are here treated as numbers, not
0.000000,0,0.000000,strings. Cpanel::JSON::XS is a bit slower, but preserves numeric
0.000000,0,0.000000,types better.
0.000000,0,0.000000,
0.000000,0,0.000000,- numbers ending with .0 stray numbers, are not converted to
0.000000,0,0.000000,integers. [#63] dual-vars which are represented as number not
0.000000,0,0.000000,integer (42+"bar" != 5.8.9) are now encoded as number (=> 42.0)
0.000000,0,0.000000,because internally it's now a NOK type.  However !!1 which is
0.000000,0,0.000000,wrongly encoded in 5.8 as "1"/1.0 is still represented as integer.
0.000000,0,0.000000,
0.000000,0,0.000000,- different handling of inf/nan. Default now to null, optionally with
0.000000,0,0.000000,stringify_infnan() to "inf"/"nan". [#28, #32]
0.000000,0,0.000000,
0.000000,0,0.000000,- added C<binary> extension, non-JSON and non JSON parsable, allows
0.000000,0,0.000000,C<\xNN> and C<\NNN> sequences.
0.000000,0,0.000000,
0.000000,0,0.000000,- 5.6.2 support; sacrificing some utf8 features (assuming bytes
0.000000,0,0.000000,all-over), no multi-byte unicode characters with 5.6.
0.000000,0,0.000000,
0.000000,0,0.000000,- interop for true/false overloading. JSON::XS, JSON::PP and Mojo::JSON 
0.000000,0,0.000000,representations for booleans are accepted and JSON::XS accepts
0.000000,0,0.000000,Cpanel::JSON::XS booleans [#13, #37]
0.000000,0,0.000000,Fixed overloading of booleans. Cpanel::JSON::XS::true stringifies again
0.000000,0,0.000000,to "1", not "true", analog to all other JSON modules.
0.000000,0,0.000000,
0.000000,0,0.000000,- native boolean mapping of yes and no to true and false, as in YAML::XS.
0.000000,0,0.000000,In perl C<!0> is yes, C<!1> is no.
0.000000,0,0.000000,The JSON value true maps to 1, false maps to 0. [#39]
0.000000,0,0.000000,
0.000000,0,0.000000,- support arbitrary stringification with encode, with convert_blessed
0.000000,0,0.000000,and allow_blessed.
0.000000,0,0.000000,
0.000000,0,0.000000,- ithread support. Cpanel::JSON::XS is thread-safe, JSON::XS not
0.000000,0,0.000000,
0.000000,0,0.000000,- is_bool can be called as method, JSON::XS::is_bool not.
0.000000,0,0.000000,
0.000000,0,0.000000,- performance optimizations for threaded Perls
0.000000,0,0.000000,
0.000000,0,0.000000,- relaxed mode, allowing many popular extensions
0.000000,0,0.000000,
0.000000,0,0.000000,- protect our magic object from corruption by wrong or missing external
0.000000,0,0.000000,methods, like FREEZE/THAW or serialization with other methods.
0.000000,0,0.000000,
0.000000,0,0.000000,- additional fixes for:
0.000000,0,0.000000,
0.000000,0,0.000000,- [cpan #88061] AIX atof without USE_LONG_DOUBLE
0.000000,0,0.000000,
0.000000,0,0.000000,- #10 unshare_hek crash
0.000000,0,0.000000,
0.000000,0,0.000000,- #7, #29 avoid re-blessing where possible. It fails in JSON::XS for
0.000000,0,0.000000,READONLY values, i.e. restricted hashes.
0.000000,0,0.000000,
0.000000,0,0.000000,- #41 overloading of booleans, use the object not the reference.
0.000000,0,0.000000,
0.000000,0,0.000000,- #62 -Dusequadmath conversion and no SEGV.
0.000000,0,0.000000,
0.000000,0,0.000000,- #72 parsing of values followed \0, like 1\0 does fail.
0.000000,0,0.000000,
0.000000,0,0.000000,- #72 parsing of illegal unicode or non-unicode characters.
0.000000,0,0.000000,
0.000000,0,0.000000,- #96 locale-insensitive numeric conversion.
0.000000,0,0.000000,
0.000000,0,0.000000,- #154 numeric conversion fixed since 5.22, using the same strtold as perl5.
0.000000,0,0.000000,
0.000000,0,0.000000,- #167 sort tied hashes with canonical.
0.000000,0,0.000000,
0.000000,0,0.000000,- public maintenance and bugtracker
0.000000,0,0.000000,
0.000000,0,0.000000,- use ppport.h, sanify XS.xs comment styles, harness C coding style
0.000000,0,0.000000,
0.000000,0,0.000000,- common::sense is optional. When available it is not used in the
0.000000,0,0.000000,published production module, just during development and testing.
0.000000,0,0.000000,
0.000000,0,0.000000,- extended testsuite, passes all http://seriot.ch/parsing_json.html
0.000000,0,0.000000,tests.  In fact it is the only know JSON decoder which does so,
0.000000,0,0.000000,while also being the fastest.
0.000000,0,0.000000,
0.000000,0,0.000000,- support many more options and methods from JSON::PP:
0.000000,0,0.000000,stringify_infnan, allow_unknown, allow_stringify, allow_barekey,
0.000000,0,0.000000,encode_stringify, allow_bignum, allow_singlequote, dupkeys_as_arrayref,
0.000000,0,0.000000,sort_by (partially), escape_slash, convert_blessed, ...
0.000000,0,0.000000,optional decode_json(, allow_nonref) arg.
0.000000,0,0.000000,relaxed implements allow_dupkeys.
0.000000,0,0.000000,
0.000000,0,0.000000,- support all 5 unicode L<BOM|/BOM>'s: UTF-8, UTF-16LE, UTF-16BE, UTF-32LE,
0.000000,0,0.000000,UTF-32BE, encoding internally to UTF-8.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000010,1,0.000010,our @ISA = qw(Exporter);
0.000000,1,0.000000,our @EXPORT = qw(encode_json decode_json to_json from_json);
0.000000,0,0.000000,
0.000000,0,0.000000,sub to_json($@) {
0.000000,0,0.000000,if ($] >= 5.008) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak ("Cpanel::JSON::XS::to_json has been renamed to encode_json,".
0.000000,0,0.000000," either downgrade to pre-2.0 versions of Cpanel::JSON::XS or".
0.000000,0,0.000000," rename the call");
0.000000,0,0.000000,} else {
0.000000,0,0.000000,_to_json(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub from_json($@) {
0.000000,0,0.000000,if ($] >= 5.008) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak ("Cpanel::JSON::XS::from_json has been renamed to decode_json,".
0.000000,0,0.000000," either downgrade to pre-2.0 versions of Cpanel::JSON::XS or".
0.000000,0,0.000000," rename the call");
0.000000,0,0.000000,} else {
0.000000,0,0.000000,_from_json(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000029,2,0.000015,use Exporter;
0.001128,2,0.000564,use XSLoader;
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 FUNCTIONAL INTERFACE
0.000000,0,0.000000,
0.000000,0,0.000000,The following convenience methods are provided by this module. They are
0.000000,0,0.000000,exported by default:
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json_text = encode_json $perl_scalar, [json_type]
0.000000,0,0.000000,
0.000000,0,0.000000,Converts the given Perl data structure to a UTF-8 encoded, binary string
0.000000,0,0.000000,(that is, the string contains octets only). Croaks on error.
0.000000,0,0.000000,
0.000000,0,0.000000,This function call is functionally identical to:
0.000000,0,0.000000,
0.000000,0,0.000000,$json_text = Cpanel::JSON::XS->new->utf8->encode ($perl_scalar, $json_type)
0.000000,0,0.000000,
0.000000,0,0.000000,Except being faster.
0.000000,0,0.000000,
0.000000,0,0.000000,For the type argument see L<Cpanel::JSON::XS::Type>.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $perl_scalar = decode_json $json_text [, $allow_nonref [, my $json_type ] ]
0.000000,0,0.000000,
0.000000,0,0.000000,The opposite of C<encode_json>: expects an UTF-8 (binary) string of an
0.000000,0,0.000000,json reference and tries to parse that as an UTF-8 encoded JSON text,
0.000000,0,0.000000,returning the resulting reference. Croaks on error.
0.000000,0,0.000000,
0.000000,0,0.000000,This function call is functionally identical to:
0.000000,0,0.000000,
0.000000,0,0.000000,$perl_scalar = Cpanel::JSON::XS->new->utf8->decode ($json_text, $json_type)
0.000000,0,0.000000,
0.000000,0,0.000000,except being faster.
0.000000,0,0.000000,
0.000000,0,0.000000,Note that older decode_json versions in Cpanel::JSON::XS older than
0.000000,0,0.000000,3.0116 and JSON::XS did not set allow_nonref but allowed them due to a
0.000000,0,0.000000,bug in the decoder.
0.000000,0,0.000000,
0.000000,0,0.000000,If the new 2nd optional $allow_nonref argument is set and not false, the
0.000000,0,0.000000,C<allow_nonref> option will be set and the function will act is described
0.000000,0,0.000000,as in the relaxed RFC 7159 allowing all values such as objects,
0.000000,0,0.000000,arrays, strings, numbers, "null", "true", and "false".
0.000000,0,0.000000,See L</"OLD" VS. "NEW" JSON (RFC 4627 VS. RFC 7159)> below, why you don't
0.000000,0,0.000000,want to do that.
0.000000,0,0.000000,
0.000000,0,0.000000,For the 3rd optional type argument see L<Cpanel::JSON::XS::Type>.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $is_boolean = Cpanel::JSON::XS::is_bool $scalar
0.000000,0,0.000000,
0.000000,0,0.000000,Returns true if the passed scalar represents either C<JSON::PP::true>
0.000000,0,0.000000,or C<JSON::PP::false>, two constants that act like C<1> and C<0>,
0.000000,0,0.000000,respectively and are used to represent JSON C<true> and C<false>
0.000000,0,0.000000,values in Perl. (Also recognizes the booleans produced by L<JSON::XS>.)
0.000000,0,0.000000,
0.000000,0,0.000000,See MAPPING, below, for more information on how JSON values are mapped
0.000000,0,0.000000,to Perl.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DEPRECATED FUNCTIONS
0.000000,0,0.000000,
0.000000,0,0.000000,=over
0.000000,0,0.000000,
0.000000,0,0.000000,=item from_json
0.000000,0,0.000000,
0.000000,0,0.000000,from_json has been renamed to decode_json
0.000000,0,0.000000,
0.000000,0,0.000000,=item to_json
0.000000,0,0.000000,
0.000000,0,0.000000,to_json has been renamed to encode_json
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 A FEW NOTES ON UNICODE AND PERL
0.000000,0,0.000000,
0.000000,0,0.000000,Since this often leads to confusion, here are a few very clear words on
0.000000,0,0.000000,how Unicode works in Perl, modulo bugs.
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item 1. Perl strings can store characters with ordinal values > 255.
0.000000,0,0.000000,
0.000000,0,0.000000,This enables you to store Unicode characters as single characters in a
0.000000,0,0.000000,Perl string - very natural.
0.000000,0,0.000000,
0.000000,0,0.000000,=item 2. Perl does I<not> associate an encoding with your strings.
0.000000,0,0.000000,
0.000000,0,0.000000,... until you force it to, e.g. when matching it against a regex, or
0.000000,0,0.000000,printing the scalar to a file, in which case Perl either interprets
0.000000,0,0.000000,your string as locale-encoded text, octets/binary, or as Unicode,
0.000000,0,0.000000,depending on various settings. In no case is an encoding stored
0.000000,0,0.000000,together with your data, it is I<use> that decides encoding, not any
0.000000,0,0.000000,magical meta data.
0.000000,0,0.000000,
0.000000,0,0.000000,=item 3. The internal utf-8 flag has no meaning with regards to the
0.000000,0,0.000000,encoding of your string.
0.000000,0,0.000000,
0.000000,0,0.000000,=item 4. A "Unicode String" is simply a string where each character
0.000000,0,0.000000,can be validly interpreted as a Unicode code point.
0.000000,0,0.000000,
0.000000,0,0.000000,If you have UTF-8 encoded data, it is no longer a Unicode string, but
0.000000,0,0.000000,a Unicode string encoded in UTF-8, giving you a binary string.
0.000000,0,0.000000,
0.000000,0,0.000000,=item 5. A string containing "high" (> 255) character values is I<not>
0.000000,0,0.000000,a UTF-8 string.
0.000000,0,0.000000,
0.000000,0,0.000000,=item 6. Unicode noncharacters only warn, as in core.
0.000000,0,0.000000,
0.000000,0,0.000000,The 66 Unicode noncharacters U+FDD0..U+FDEF, and U+*FFFE, U+*FFFF just
0.000000,0,0.000000,warn, see L<http://www.unicode.org/versions/corrigendum9.html>.  But
0.000000,0,0.000000,illegal surrogate pairs fail to parse.
0.000000,0,0.000000,
0.000000,0,0.000000,=item 7. Raw non-Unicode characters above U+10FFFF are disallowed.
0.000000,0,0.000000,
0.000000,0,0.000000,Raw non-Unicode characters outside the valid unicode range fail to
0.000000,0,0.000000,parse, because "A string is a sequence of zero or more Unicode
0.000000,0,0.000000,characters" RFC 7159 section 1 and "JSON text SHALL be encoded in
0.000000,0,0.000000,Unicode RFC 7159 section 8.1. We use now the UTF8_DISALLOW_SUPER
0.000000,0,0.000000,flag when parsing unicode.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,I hope this helps :)
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 OBJECT-ORIENTED INTERFACE
0.000000,0,0.000000,
0.000000,0,0.000000,The object oriented interface lets you configure your own encoding or
0.000000,0,0.000000,decoding style, within the limits of supported formats.
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = new Cpanel::JSON::XS
0.000000,0,0.000000,
0.000000,0,0.000000,Creates a new JSON object that can be used to de/encode JSON
0.000000,0,0.000000,strings. All boolean flags described below are by default I<disabled>.
0.000000,0,0.000000,
0.000000,0,0.000000,The mutators for flags all return the JSON object again and thus calls can
0.000000,0,0.000000,be chained:
0.000000,0,0.000000,
0.000000,0,0.000000,my $json = Cpanel::JSON::XS->new->utf8->space_after->encode ({a => [1,2]})
0.000000,0,0.000000,=> {"a": [1, 2]}
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->ascii ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_ascii
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then the C<encode> method will not
0.000000,0,0.000000,generate characters outside the code range C<0..127> (which is ASCII). Any
0.000000,0,0.000000,Unicode characters outside that range will be escaped using either a
0.000000,0,0.000000,single C<\uXXXX> (BMP characters) or a double C<\uHHHH\uLLLLL> escape sequence,
0.000000,0,0.000000,as per RFC4627. The resulting encoded JSON text can be treated as a native
0.000000,0,0.000000,Unicode string, an ascii-encoded, latin1-encoded or UTF-8 encoded string,
0.000000,0,0.000000,or any other superset of ASCII.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false, then the C<encode> method will not escape Unicode
0.000000,0,0.000000,characters unless required by the JSON syntax or other flags. This results
0.000000,0,0.000000,in a faster and more compact format.
0.000000,0,0.000000,
0.000000,0,0.000000,See also the section I<ENCODING/CODESET FLAG NOTES> later in this
0.000000,0,0.000000,document.
0.000000,0,0.000000,
0.000000,0,0.000000,The main use for this flag is to produce JSON texts that can be
0.000000,0,0.000000,transmitted over a 7-bit channel, as the encoded JSON texts will not
0.000000,0,0.000000,contain any 8 bit characters.
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS->new->ascii (1)->encode ([chr 0x10401])
0.000000,0,0.000000,=> ["\ud801\udc01"]
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->latin1 ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_latin1
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then the C<encode> method will encode
0.000000,0,0.000000,the resulting JSON text as latin1 (or ISO-8859-1), escaping any characters
0.000000,0,0.000000,outside the code range C<0..255>. The resulting string can be treated as a
0.000000,0,0.000000,latin1-encoded JSON text or a native Unicode string. The C<decode> method
0.000000,0,0.000000,will not be affected in any way by this flag, as C<decode> by default
0.000000,0,0.000000,expects Unicode, which is a strict superset of latin1.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false, then the C<encode> method will not escape Unicode
0.000000,0,0.000000,characters unless required by the JSON syntax or other flags.
0.000000,0,0.000000,
0.000000,0,0.000000,See also the section I<ENCODING/CODESET FLAG NOTES> later in this
0.000000,0,0.000000,document.
0.000000,0,0.000000,
0.000000,0,0.000000,The main use for this flag is efficiently encoding binary data as JSON
0.000000,0,0.000000,text, as most octets will not be escaped, resulting in a smaller encoded
0.000000,0,0.000000,size. The disadvantage is that the resulting JSON text is encoded
0.000000,0,0.000000,in latin1 (and must correctly be treated as such when storing and
0.000000,0,0.000000,transferring), a rare encoding for JSON. It is therefore most useful when
0.000000,0,0.000000,you want to store data structures known to contain binary data efficiently
0.000000,0,0.000000,in files or databases, not when talking to other JSON encoders/decoders.
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS->new->latin1->encode (["\x{89}\x{abc}"]
0.000000,0,0.000000,=> ["\x{89}\\u0abc"]    # (perl syntax, U+abc escaped, U+89 not)
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->binary ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json = $json->get_binary
0.000000,0,0.000000,
0.000000,0,0.000000,If the C<$enable> argument is true (or missing), then the C<encode>
0.000000,0,0.000000,method will not try to detect an UTF-8 encoding in any JSON string, it
0.000000,0,0.000000,will strictly interpret it as byte sequence.  The result might contain
0.000000,0,0.000000,new C<\xNN> sequences, which is B<unparsable JSON>.  The C<decode>
0.000000,0,0.000000,method forbids C<\uNNNN> sequences and accepts C<\xNN> and octal
0.000000,0,0.000000,C<\NNN> sequences.
0.000000,0,0.000000,
0.000000,0,0.000000,There is also a special logic for perl 5.6 and utf8. 5.6 encodes any
0.000000,0,0.000000,string to utf-8 automatically when seeing a codepoint >= C<0x80> and
0.000000,0,0.000000,< C<0x100>. With the binary flag enabled decode the perl utf8 encoded
0.000000,0,0.000000,string to the original byte encoding and encode this with C<\xNN>
0.000000,0,0.000000,escapes. This will result to the same encodings as with newer
0.000000,0,0.000000,perls. But note that binary multi-byte codepoints with 5.6 will
0.000000,0,0.000000,result in C<illegal unicode character in binary string> errors,
0.000000,0,0.000000,unlike with newer perls.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false, then the C<encode> method will smartly try to
0.000000,0,0.000000,detect Unicode characters unless required by the JSON syntax or other
0.000000,0,0.000000,flags and hex and octal sequences are forbidden.
0.000000,0,0.000000,
0.000000,0,0.000000,See also the section I<ENCODING/CODESET FLAG NOTES> later in this
0.000000,0,0.000000,document.
0.000000,0,0.000000,
0.000000,0,0.000000,The main use for this flag is to avoid the smart unicode detection and
0.000000,0,0.000000,possible double encoding. The disadvantage is that the resulting JSON
0.000000,0,0.000000,text is encoded in new C<\xNN> and in latin1 characters and must
0.000000,0,0.000000,correctly be treated as such when storing and transferring, a rare
0.000000,0,0.000000,encoding for JSON. It will produce non-readable JSON strings in the
0.000000,0,0.000000,browser.  It is therefore most useful when you want to store data
0.000000,0,0.000000,structures known to contain binary data efficiently in files or
0.000000,0,0.000000,databases, not when talking to other JSON encoders/decoders.  The
0.000000,0,0.000000,binary decoding method can also be used when an encoder produced a
0.000000,0,0.000000,non-JSON conformant hex or octal encoding C<\xNN> or C<\NNN>.
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS->new->binary->encode (["\x{89}\x{abc}"])
0.000000,0,0.000000,5.6:   Error: malformed or illegal unicode character in binary string
0.000000,0,0.000000,>=5.8: ['\x89\xe0\xaa\xbc']
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS->new->binary->encode (["\x{89}\x{bc}"])
0.000000,0,0.000000,=> ["\x89\xbc"]
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS->new->binary->decode (["\x89\ua001"])
0.000000,0,0.000000,Error: malformed or illegal unicode character in binary string
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS->new->decode (["\x89"])
0.000000,0,0.000000,Error: illegal hex character in non-binary string
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->utf8 ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_utf8
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then the C<encode> method will encode
0.000000,0,0.000000,the JSON result into UTF-8, as required by many protocols, while the
0.000000,0,0.000000,C<decode> method expects to be handled an UTF-8-encoded string.  Please
0.000000,0,0.000000,note that UTF-8-encoded strings do not contain any characters outside the
0.000000,0,0.000000,range C<0..255>, they are thus useful for bytewise/binary I/O. In future
0.000000,0,0.000000,versions, enabling this option might enable autodetection of the UTF-16
0.000000,0,0.000000,and UTF-32 encoding families, as described in RFC4627.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false, then the C<encode> method will return the JSON
0.000000,0,0.000000,string as a (non-encoded) Unicode string, while C<decode> expects thus a
0.000000,0,0.000000,Unicode string.  Any decoding or encoding (e.g. to UTF-8 or UTF-16) needs
0.000000,0,0.000000,to be done yourself, e.g. using the Encode module.
0.000000,0,0.000000,
0.000000,0,0.000000,See also the section I<ENCODING/CODESET FLAG NOTES> later in this
0.000000,0,0.000000,document.
0.000000,0,0.000000,
0.000000,0,0.000000,Example, output UTF-16BE-encoded JSON:
0.000000,0,0.000000,
0.000000,0,0.000000,use Encode;
0.000000,0,0.000000,$jsontext = encode "UTF-16BE", Cpanel::JSON::XS->new->encode ($object);
0.000000,0,0.000000,
0.000000,0,0.000000,Example, decode UTF-32LE-encoded JSON:
0.000000,0,0.000000,
0.000000,0,0.000000,use Encode;
0.000000,0,0.000000,$object = Cpanel::JSON::XS->new->decode (decode "UTF-32LE", $jsontext);
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->pretty ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,This enables (or disables) all of the C<indent>, C<space_before> and
0.000000,0,0.000000,C<space_after> (and in the future possibly more) flags in one call to
0.000000,0,0.000000,generate the most readable (or most compact) form possible.
0.000000,0,0.000000,
0.000000,0,0.000000,Example, pretty-print some simple structure:
0.000000,0,0.000000,
0.000000,0,0.000000,my $json = Cpanel::JSON::XS->new->pretty(1)->encode ({a => [1,2]})
0.000000,0,0.000000,=>
0.000000,0,0.000000,{
0.000000,0,0.000000,"a" : [
0.000000,0,0.000000,1,
0.000000,0,0.000000,2
0.000000,0,0.000000,]
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->indent ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_indent
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then the C<encode> method will use
0.000000,0,0.000000,a multiline format as output, putting every array member or
0.000000,0,0.000000,object/hash key-value pair into its own line, indenting them properly.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false, no newlines or indenting will be produced, and the
0.000000,0,0.000000,resulting JSON text is guaranteed not to contain any C<newlines>.
0.000000,0,0.000000,
0.000000,0,0.000000,This setting has no effect when decoding JSON texts.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->indent_length([$number_of_spaces])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $length = $json->get_indent_length()
0.000000,0,0.000000,
0.000000,0,0.000000,Set the indent length (default C<3>).
0.000000,0,0.000000,This option is only useful when you also enable indent or pretty.
0.000000,0,0.000000,The acceptable range is from 0 (no indentation) to 15
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->space_before ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_space_before
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then the C<encode> method will add an extra
0.000000,0,0.000000,optional space before the C<:> separating keys from values in JSON objects.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false, then the C<encode> method will not add any extra
0.000000,0,0.000000,space at those places.
0.000000,0,0.000000,
0.000000,0,0.000000,This setting has no effect when decoding JSON texts. You will also
0.000000,0,0.000000,most likely combine this setting with C<space_after>.
0.000000,0,0.000000,
0.000000,0,0.000000,Example, space_before enabled, space_after and indent disabled:
0.000000,0,0.000000,
0.000000,0,0.000000,{"key" :"value"}
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->space_after ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_space_after
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then the C<encode> method will add
0.000000,0,0.000000,an extra optional space after the C<:> separating keys from values in
0.000000,0,0.000000,JSON objects and extra whitespace after the C<,> separating key-value
0.000000,0,0.000000,pairs and array members.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false, then the C<encode> method will not add any extra
0.000000,0,0.000000,space at those places.
0.000000,0,0.000000,
0.000000,0,0.000000,This setting has no effect when decoding JSON texts.
0.000000,0,0.000000,
0.000000,0,0.000000,Example, space_before and indent disabled, space_after enabled:
0.000000,0,0.000000,
0.000000,0,0.000000,{"key": "value"}
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->relaxed ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_relaxed
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<decode> will accept some
0.000000,0,0.000000,extensions to normal JSON syntax (see below). C<encode> will not be
0.000000,0,0.000000,affected in anyway. I<Be aware that this option makes you accept invalid
0.000000,0,0.000000,JSON texts as if they were valid!>. I suggest only to use this option to
0.000000,0,0.000000,parse application-specific files written by humans (configuration files,
0.000000,0,0.000000,resource files etc.)
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false (the default), then C<decode> will only accept
0.000000,0,0.000000,valid JSON texts.
0.000000,0,0.000000,
0.000000,0,0.000000,Currently accepted extensions are:
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item * list items can have an end-comma
0.000000,0,0.000000,
0.000000,0,0.000000,JSON I<separates> array elements and key-value pairs with commas. This
0.000000,0,0.000000,can be annoying if you write JSON texts manually and want to be able to
0.000000,0,0.000000,quickly append elements, so this extension accepts comma at the end of
0.000000,0,0.000000,such items not just between them:
0.000000,0,0.000000,
0.000000,0,0.000000,[
0.000000,0,0.000000,1,
0.000000,0,0.000000,2, <- this comma not normally allowed
0.000000,0,0.000000,]
0.000000,0,0.000000,{
0.000000,0,0.000000,"k1": "v1",
0.000000,0,0.000000,"k2": "v2", <- this comma not normally allowed
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item * shell-style '#'-comments
0.000000,0,0.000000,
0.000000,0,0.000000,Whenever JSON allows whitespace, shell-style comments are additionally
0.000000,0,0.000000,allowed. They are terminated by the first carriage-return or line-feed
0.000000,0,0.000000,character, after which more white-space and comments are allowed.
0.000000,0,0.000000,
0.000000,0,0.000000,[
0.000000,0,0.000000,1, # this comment not allowed in JSON
0.000000,0,0.000000,# neither this one...
0.000000,0,0.000000,]
0.000000,0,0.000000,
0.000000,0,0.000000,=item * literal ASCII TAB characters in strings
0.000000,0,0.000000,
0.000000,0,0.000000,Literal ASCII TAB characters are now allowed in strings (and treated as
0.000000,0,0.000000,C<\t>) in relaxed mode. Despite JSON mandates, that TAB character is
0.000000,0,0.000000,substituted for "\t" sequence.
0.000000,0,0.000000,
0.000000,0,0.000000,[
0.000000,0,0.000000,"Hello\tWorld",
0.000000,0,0.000000,"Hello<TAB>World", # literal <TAB> would not normally be allowed
0.000000,0,0.000000,]
0.000000,0,0.000000,
0.000000,0,0.000000,=item * allow_singlequote
0.000000,0,0.000000,
0.000000,0,0.000000,Single quotes are accepted instead of double quotes. See the
0.000000,0,0.000000,L</allow_singlequote> option.
0.000000,0,0.000000,
0.000000,0,0.000000,{ "foo":'bar' }
0.000000,0,0.000000,{ 'foo':"bar" }
0.000000,0,0.000000,{ 'foo':'bar' }
0.000000,0,0.000000,
0.000000,0,0.000000,=item * allow_barekey
0.000000,0,0.000000,
0.000000,0,0.000000,Accept unquoted object keys instead of with mandatory double quotes. See the
0.000000,0,0.000000,L</allow_barekey> option.
0.000000,0,0.000000,
0.000000,0,0.000000,{ foo:"bar" }
0.000000,0,0.000000,
0.000000,0,0.000000,=item * allow_dupkeys
0.000000,0,0.000000,
0.000000,0,0.000000,Allow decoding of duplicate keys in hashes. By default duplicate keys are forbidden.
0.000000,0,0.000000,See L<http://seriot.ch/parsing_json.php#24>:
0.000000,0,0.000000,RFC 7159 section 4: "The names within an object should be unique."
0.000000,0,0.000000,See the C<allow_dupkeys> option.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->canonical ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_canonical
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then the C<encode> method will
0.000000,0,0.000000,output JSON objects by sorting their keys. This is adding a
0.000000,0,0.000000,comparatively high overhead.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false, then the C<encode> method will output key-value
0.000000,0,0.000000,pairs in the order Perl stores them (which will likely change between runs
0.000000,0,0.000000,of the same script, and can change even within the same run from 5.18
0.000000,0,0.000000,onwards).
0.000000,0,0.000000,
0.000000,0,0.000000,This option is useful if you want the same data structure to be encoded as
0.000000,0,0.000000,the same JSON text (given the same overall settings). If it is disabled,
0.000000,0,0.000000,the same hash might be encoded differently even if contains the same data,
0.000000,0,0.000000,as key-value pairs have no inherent ordering in Perl.
0.000000,0,0.000000,
0.000000,0,0.000000,This setting has no effect when decoding JSON texts.
0.000000,0,0.000000,
0.000000,0,0.000000,This is now also done with tied hashes, contrary to L<JSON::XS>.
0.000000,0,0.000000,But note that with most large tied hashes stored as tree it is advised to
0.000000,0,0.000000,sort the iterator already and don't sort the hash output here. Most such
0.000000,0,0.000000,iterators are already sorted, as such e.g. L<DB_File> with C<DB_BTREE>.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->sort_by (undef, 0, 1 or a block)
0.000000,0,0.000000,
0.000000,0,0.000000,This currently only (un)sets the C<canonical> option, and ignores
0.000000,0,0.000000,custom sort blocks.
0.000000,0,0.000000,
0.000000,0,0.000000,This setting has no effect when decoding JSON texts.
0.000000,0,0.000000,
0.000000,0,0.000000,This setting has currently no effect on tied hashes.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->escape_slash ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_escape_slash
0.000000,0,0.000000,
0.000000,0,0.000000,According to the JSON Grammar, the I<forward slash> character (U+002F)
0.000000,0,0.000000,C<"/"> need to be escaped.  But by default strings are encoded without
0.000000,0,0.000000,escaping slashes in all perl JSON encoders.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<encode> will escape slashes,
0.000000,0,0.000000,C<"\/">.
0.000000,0,0.000000,
0.000000,0,0.000000,This setting has no effect when decoding JSON texts.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->unblessed_bool ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_unblessed_bool
0.000000,0,0.000000,
0.000000,0,0.000000,$json = $json->unblessed_bool([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<decode> will return
0.000000,0,0.000000,Perl non-object boolean variables (1 and 0) for JSON booleans
0.000000,0,0.000000,(C<true> and C<false>). If C<$enable> is false, then C<decode>
0.000000,0,0.000000,will return C<JSON::PP::Boolean> objects for JSON booleans.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->allow_singlequote ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_allow_singlequote
0.000000,0,0.000000,
0.000000,0,0.000000,$json = $json->allow_singlequote([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<decode> will accept
0.000000,0,0.000000,JSON strings quoted by single quotations that are invalid JSON
0.000000,0,0.000000,format.
0.000000,0,0.000000,
0.000000,0,0.000000,$json->allow_singlequote->decode({"foo":'bar'});
0.000000,0,0.000000,$json->allow_singlequote->decode({'foo':"bar"});
0.000000,0,0.000000,$json->allow_singlequote->decode({'foo':'bar'});
0.000000,0,0.000000,
0.000000,0,0.000000,This is also enabled with C<relaxed>.
0.000000,0,0.000000,As same as the C<relaxed> option, this option may be used to parse
0.000000,0,0.000000,application-specific files written by humans.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->allow_barekey ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_allow_barekey
0.000000,0,0.000000,
0.000000,0,0.000000,$json = $json->allow_barekey([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<decode> will accept
0.000000,0,0.000000,bare keys of JSON object that are invalid JSON format.
0.000000,0,0.000000,
0.000000,0,0.000000,Same as with the C<relaxed> option, this option may be used to parse
0.000000,0,0.000000,application-specific files written by humans.
0.000000,0,0.000000,
0.000000,0,0.000000,$json->allow_barekey->decode('{foo:"bar"}');
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->allow_bignum ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_allow_bignum
0.000000,0,0.000000,
0.000000,0,0.000000,$json = $json->allow_bignum([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<decode> will convert
0.000000,0,0.000000,the big integer Perl cannot handle as integer into a L<Math::BigInt>
0.000000,0,0.000000,object and convert a floating number (any) into a L<Math::BigFloat>.
0.000000,0,0.000000,
0.000000,0,0.000000,On the contrary, C<encode> converts C<Math::BigInt> objects and
0.000000,0,0.000000,C<Math::BigFloat> objects into JSON numbers with C<allow_blessed>
0.000000,0,0.000000,enable.
0.000000,0,0.000000,
0.000000,0,0.000000,$json->allow_nonref->allow_blessed->allow_bignum;
0.000000,0,0.000000,$bigfloat = $json->decode('2.000000000000000000000000001');
0.000000,0,0.000000,print $json->encode($bigfloat);
0.000000,0,0.000000,# => 2.000000000000000000000000001
0.000000,0,0.000000,
0.000000,0,0.000000,See L</MAPPING> about the normal conversion of JSON number.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->allow_bigint ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,This option is obsolete and replaced by allow_bignum.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->allow_nonref ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_allow_nonref
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then the C<encode> method can
0.000000,0,0.000000,convert a non-reference into its corresponding string, number or null
0.000000,0,0.000000,JSON value, which is an extension to RFC4627. Likewise, C<decode> will
0.000000,0,0.000000,accept those JSON values instead of croaking.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false, then the C<encode> method will croak if it isn't
0.000000,0,0.000000,passed an arrayref or hashref, as JSON texts must either be an object
0.000000,0,0.000000,or array. Likewise, C<decode> will croak if given something that is not a
0.000000,0,0.000000,JSON object or array.
0.000000,0,0.000000,
0.000000,0,0.000000,Example, encode a Perl scalar as JSON value with enabled C<allow_nonref>,
0.000000,0,0.000000,resulting in an invalid JSON text:
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS->new->allow_nonref->encode ("Hello, World!")
0.000000,0,0.000000,=> "Hello, World!"
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->allow_unknown ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_allow_unknown
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<encode> will I<not> throw an
0.000000,0,0.000000,exception when it encounters values it cannot represent in JSON (for
0.000000,0,0.000000,example, filehandles) but instead will encode a JSON C<null> value. Note
0.000000,0,0.000000,that blessed objects are not included here and are handled separately by
0.000000,0,0.000000,c<allow_nonref>.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false (the default), then C<encode> will throw an
0.000000,0,0.000000,exception when it encounters anything it cannot encode as JSON.
0.000000,0,0.000000,
0.000000,0,0.000000,This option does not affect C<decode> in any way, and it is recommended to
0.000000,0,0.000000,leave it off unless you know your communications partner.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->allow_stringify ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_allow_stringify
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<encode> will stringify the
0.000000,0,0.000000,non-object perl value or reference. Note that blessed objects are not
0.000000,0,0.000000,included here and are handled separately by C<allow_blessed> and
0.000000,0,0.000000,C<convert_blessed>.  String references are stringified to the string
0.000000,0,0.000000,value, other references as in perl.
0.000000,0,0.000000,
0.000000,0,0.000000,This option does not affect C<decode> in any way.
0.000000,0,0.000000,
0.000000,0,0.000000,This option is special to this module, it is not supported by other
0.000000,0,0.000000,encoders.  So it is not recommended to use it.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->require_types ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enable = $json->get_require_types
0.000000,0,0.000000,
0.000000,0,0.000000,$json = $json->require_types([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<encode> will require
0.000000,0,0.000000,either enabled C<type_all_string> or second argument with supplied JSON types.
0.000000,0,0.000000,See L<Cpanel::JSON::XS::Type>. When C<type_all_string> is not enabled or
0.000000,0,0.000000,second argument is not provided (or is undef), then C<encode>
0.000000,0,0.000000,croaks. It also croaks when the type for provided structure in
0.000000,0,0.000000,C<encode> is incomplete.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->type_all_string ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enable = $json->get_type_all_string
0.000000,0,0.000000,
0.000000,0,0.000000,$json = $json->type_all_string([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<encode> will always
0.000000,0,0.000000,produce stable deterministic JSON string types in resulted output.
0.000000,0,0.000000,
0.000000,0,0.000000,When C<$enable> is false, then result of encoded JSON output may be
0.000000,0,0.000000,different for different Perl versions and may depends on loaded modules.
0.000000,0,0.000000,
0.000000,0,0.000000,This is useful it you need deterministic JSON types, independently of used
0.000000,0,0.000000,Perl version and other modules, but do not want to write complicated type
0.000000,0,0.000000,definitions for L<Cpanel::JSON::XS::Type>.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->allow_dupkeys ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_allow_dupkeys
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then the C<decode> method will not
0.000000,0,0.000000,die when it encounters duplicate keys in a hash.
0.000000,0,0.000000,C<allow_dupkeys> is also enabled in the C<relaxed> mode.
0.000000,0,0.000000,
0.000000,0,0.000000,The JSON spec allows duplicate name in objects but recommends to
0.000000,0,0.000000,disable it, however with Perl hashes they are impossible, parsing
0.000000,0,0.000000,JSON in Perl silently ignores duplicate names, using the last value
0.000000,0,0.000000,found.
0.000000,0,0.000000,
0.000000,0,0.000000,See L<http://seriot.ch/parsing_json.php#24>:
0.000000,0,0.000000,RFC 7159 section 4: "The names within an object should be unique."
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->dupkeys_as_arrayref ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_dupkeys_as_arrayref
0.000000,0,0.000000,
0.000000,0,0.000000,If enabled, allow decoding of duplicate keys in hashes and store the
0.000000,0,0.000000,values as arrayref in the hash instead.  By default duplicate keys are
0.000000,0,0.000000,forbidden.  Enabling this also enables the L</allow_dupkeys> option,
0.000000,0,0.000000,but disabling this does not disable the L</allow_dupkeys> option.
0.000000,0,0.000000,
0.000000,0,0.000000,Example:
0.000000,0,0.000000,
0.000000,0,0.000000,$json->dupkeys_as_arrayref;
0.000000,0,0.000000,print encode_json ($json->decode ('{"a":"b","a":"c"}'));
0.000000,0,0.000000,
0.000000,0,0.000000,=> {"a":["b","c"]}
0.000000,0,0.000000,
0.000000,0,0.000000,This changes the result structure, thus cannot be enabled by default.
0.000000,0,0.000000,The client must be aware of it. The resulting arrayref is not yet marked somehow
0.000000,0,0.000000,(blessed or such).
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->allow_blessed ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_allow_blessed
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then the C<encode> method will not
0.000000,0,0.000000,barf when it encounters a blessed reference. Instead, the value of the
0.000000,0,0.000000,B<convert_blessed> option will decide whether C<null> (C<convert_blessed>
0.000000,0,0.000000,disabled or no C<TO_JSON> method found) or a representation of the
0.000000,0,0.000000,object (C<convert_blessed> enabled and C<TO_JSON> method found) is being
0.000000,0,0.000000,encoded. Has no effect on C<decode>.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false (the default), then C<encode> will throw an
0.000000,0,0.000000,exception when it encounters a blessed object without C<convert_blessed>
0.000000,0,0.000000,and a C<TO_JSON> method.
0.000000,0,0.000000,
0.000000,0,0.000000,This setting has no effect on C<decode>.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->convert_blessed ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_convert_blessed
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<encode>, upon encountering a
0.000000,0,0.000000,blessed object, will check for the availability of the C<TO_JSON> method
0.000000,0,0.000000,on the object's class. If found, it will be called in scalar context
0.000000,0,0.000000,and the resulting scalar will be encoded instead of the object. If no
0.000000,0,0.000000,C<TO_JSON> method is found, a stringification overload method is tried next.
0.000000,0,0.000000,If both are not found, the value of C<allow_blessed> will decide what
0.000000,0,0.000000,to do.
0.000000,0,0.000000,
0.000000,0,0.000000,The C<TO_JSON> method may safely call die if it wants. If C<TO_JSON>
0.000000,0,0.000000,returns other blessed objects, those will be handled in the same
0.000000,0,0.000000,way. C<TO_JSON> must take care of not causing an endless recursion
0.000000,0,0.000000,cycle (== crash) in this case. The same care must be taken with
0.000000,0,0.000000,calling encode in stringify overloads (even if this works by luck in
0.000000,0,0.000000,older perls) or other callbacks.  The name of C<TO_JSON> was chosen
0.000000,0,0.000000,because other methods called by the Perl core (== not by the user of
0.000000,0,0.000000,the object) are usually in upper case letters and to avoid collisions
0.000000,0,0.000000,with any C<to_json> function or method.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false (the default), then C<encode> will not consider
0.000000,0,0.000000,this type of conversion.
0.000000,0,0.000000,
0.000000,0,0.000000,This setting has no effect on C<decode>.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->allow_tags ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_allow_tags
0.000000,0,0.000000,
0.000000,0,0.000000,See L<OBJECT SERIALIZATION> for details.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), then C<encode>, upon encountering a
0.000000,0,0.000000,blessed object, will check for the availability of the C<FREEZE> method on
0.000000,0,0.000000,the object's class. If found, it will be used to serialize the object into
0.000000,0,0.000000,a nonstandard tagged JSON value (that JSON decoders cannot decode).
0.000000,0,0.000000,
0.000000,0,0.000000,It also causes C<decode> to parse such tagged JSON values and deserialize
0.000000,0,0.000000,them via a call to the C<THAW> method.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false (the default), then C<encode> will not consider
0.000000,0,0.000000,this type of conversion, and tagged JSON values will cause a parse error
0.000000,0,0.000000,in C<decode>, as if tags were not part of the grammar.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->filter_json_object ([$coderef->($hashref)])
0.000000,0,0.000000,
0.000000,0,0.000000,When C<$coderef> is specified, it will be called from C<decode> each
0.000000,0,0.000000,time it decodes a JSON object. The only argument is a reference to the
0.000000,0,0.000000,newly-created hash. If the code references returns a single scalar (which
0.000000,0,0.000000,need not be a reference), this value (i.e. a copy of that scalar to avoid
0.000000,0,0.000000,aliasing) is inserted into the deserialized data structure. If it returns
0.000000,0,0.000000,an empty list (NOTE: I<not> C<undef>, which is a valid scalar), the
0.000000,0,0.000000,original deserialized hash will be inserted. This setting can slow down
0.000000,0,0.000000,decoding considerably.
0.000000,0,0.000000,
0.000000,0,0.000000,When C<$coderef> is omitted or undefined, any existing callback will
0.000000,0,0.000000,be removed and C<decode> will not change the deserialized hash in any
0.000000,0,0.000000,way.
0.000000,0,0.000000,
0.000000,0,0.000000,Example, convert all JSON objects into the integer 5:
0.000000,0,0.000000,
0.000000,0,0.000000,my $js = Cpanel::JSON::XS->new->filter_json_object (sub { 5 });
0.000000,0,0.000000,# returns [5]
0.000000,0,0.000000,$js->decode ('[{}]')
0.000000,0,0.000000,# throw an exception because allow_nonref is not enabled
0.000000,0,0.000000,# so a lone 5 is not allowed.
0.000000,0,0.000000,$js->decode ('{"a":1, "b":2}');
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->filter_json_single_key_object ($key [=> $coderef->($value)])
0.000000,0,0.000000,
0.000000,0,0.000000,Works remotely similar to C<filter_json_object>, but is only called for
0.000000,0,0.000000,JSON objects having a single key named C<$key>.
0.000000,0,0.000000,
0.000000,0,0.000000,This C<$coderef> is called before the one specified via
0.000000,0,0.000000,C<filter_json_object>, if any. It gets passed the single value in the JSON
0.000000,0,0.000000,object. If it returns a single value, it will be inserted into the data
0.000000,0,0.000000,structure. If it returns nothing (not even C<undef> but the empty list),
0.000000,0,0.000000,the callback from C<filter_json_object> will be called next, as if no
0.000000,0,0.000000,single-key callback were specified.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$coderef> is omitted or undefined, the corresponding callback will be
0.000000,0,0.000000,disabled. There can only ever be one callback for a given key.
0.000000,0,0.000000,
0.000000,0,0.000000,As this callback gets called less often then the C<filter_json_object>
0.000000,0,0.000000,one, decoding speed will not usually suffer as much. Therefore, single-key
0.000000,0,0.000000,objects make excellent targets to serialize Perl objects into, especially
0.000000,0,0.000000,as single-key JSON objects are as close to the type-tagged value concept
0.000000,0,0.000000,as JSON gets (it's basically an ID/VALUE tuple). Of course, JSON does not
0.000000,0,0.000000,support this in any way, so you need to make sure your data never looks
0.000000,0,0.000000,like a serialized Perl hash.
0.000000,0,0.000000,
0.000000,0,0.000000,Typical names for the single object key are C<__class_whatever__>, or
0.000000,0,0.000000,C<$__dollars_are_rarely_used__$> or C<}ugly_brace_placement>, or even
0.000000,0,0.000000,things like C<__class_md5sum(classname)__>, to reduce the risk of clashing
0.000000,0,0.000000,with real hashes.
0.000000,0,0.000000,
0.000000,0,0.000000,Example, decode JSON objects of the form C<< { "__widget__" => <id> } >>
0.000000,0,0.000000,into the corresponding C<< $WIDGET{<id>} >> object:
0.000000,0,0.000000,
0.000000,0,0.000000,# return whatever is in $WIDGET{5}:
0.000000,0,0.000000,Cpanel::JSON::XS
0.000000,0,0.000000,->new
0.000000,0,0.000000,->filter_json_single_key_object (__widget__ => sub {
0.000000,0,0.000000,$WIDGET{ $_[0] }
0.000000,0,0.000000,})
0.000000,0,0.000000,->decode ('{"__widget__": 5')
0.000000,0,0.000000,
0.000000,0,0.000000,# this can be used with a TO_JSON method in some "widget" class
0.000000,0,0.000000,# for serialization to json:
0.000000,0,0.000000,sub WidgetBase::TO_JSON {
0.000000,0,0.000000,my ($self) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,unless ($self->{id}) {
0.000000,0,0.000000,$self->{id} = ..get..some..id..;
0.000000,0,0.000000,$WIDGET{$self->{id}} = $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,{ __widget__ => $self->{id} }
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->shrink ([$enable])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $enabled = $json->get_shrink
0.000000,0,0.000000,
0.000000,0,0.000000,Perl usually over-allocates memory a bit when allocating space for
0.000000,0,0.000000,strings. This flag optionally resizes strings generated by either
0.000000,0,0.000000,C<encode> or C<decode> to their minimum size possible. This can save
0.000000,0,0.000000,memory when your JSON texts are either very very long or you have many
0.000000,0,0.000000,short strings. It will also try to downgrade any strings to octet-form
0.000000,0,0.000000,if possible: perl stores strings internally either in an encoding called
0.000000,0,0.000000,UTF-X or in octet-form. The latter cannot store everything but uses less
0.000000,0,0.000000,space in general (and some buggy Perl or C code might even rely on that
0.000000,0,0.000000,internal representation being used).
0.000000,0,0.000000,
0.000000,0,0.000000,The actual definition of what shrink does might change in future versions,
0.000000,0,0.000000,but it will always try to save space at the expense of time.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is true (or missing), the string returned by C<encode> will
0.000000,0,0.000000,be shrunk-to-fit, while all strings generated by C<decode> will also be
0.000000,0,0.000000,shrunk-to-fit.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$enable> is false, then the normal perl allocation algorithms are used.
0.000000,0,0.000000,If you work with your data, then this is likely to be faster.
0.000000,0,0.000000,
0.000000,0,0.000000,In the future, this setting might control other things, such as converting
0.000000,0,0.000000,strings that look like integers or floats into integers or floats
0.000000,0,0.000000,internally (there is no difference on the Perl level), saving space.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->max_depth ([$maximum_nesting_depth])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $max_depth = $json->get_max_depth
0.000000,0,0.000000,
0.000000,0,0.000000,Sets the maximum nesting level (default C<512>) accepted while encoding
0.000000,0,0.000000,or decoding. If a higher nesting level is detected in JSON text or a Perl
0.000000,0,0.000000,data structure, then the encoder and decoder will stop and croak at that
0.000000,0,0.000000,point.
0.000000,0,0.000000,
0.000000,0,0.000000,Nesting level is defined by number of hash- or arrayrefs that the encoder
0.000000,0,0.000000,needs to traverse to reach a given point or the number of C<{> or C<[>
0.000000,0,0.000000,characters without their matching closing parenthesis crossed to reach a
0.000000,0,0.000000,given character in a string.
0.000000,0,0.000000,
0.000000,0,0.000000,Setting the maximum depth to one disallows any nesting, so that ensures
0.000000,0,0.000000,that the object is only a single hash/object or array.
0.000000,0,0.000000,
0.000000,0,0.000000,If no argument is given, the highest possible setting will be used, which
0.000000,0,0.000000,is rarely useful.
0.000000,0,0.000000,
0.000000,0,0.000000,Note that nesting is implemented by recursion in C. The default value has
0.000000,0,0.000000,been chosen to be as large as typical operating systems allow without
0.000000,0,0.000000,crashing.
0.000000,0,0.000000,
0.000000,0,0.000000,See L</SECURITY CONSIDERATIONS>, below, for more info on why this is useful.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json = $json->max_size ([$maximum_string_size])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $max_size = $json->get_max_size
0.000000,0,0.000000,
0.000000,0,0.000000,Set the maximum length a JSON text may have (in bytes) where decoding is
0.000000,0,0.000000,being attempted. The default is C<0>, meaning no limit. When C<decode>
0.000000,0,0.000000,is called on a string that is longer then this many bytes, it will not
0.000000,0,0.000000,attempt to decode the string but throw an exception. This setting has no
0.000000,0,0.000000,effect on C<encode> (yet).
0.000000,0,0.000000,
0.000000,0,0.000000,If no argument is given, the limit check will be deactivated (same as when
0.000000,0,0.000000,C<0> is specified).
0.000000,0,0.000000,
0.000000,0,0.000000,See L</SECURITY CONSIDERATIONS>, below, for more info on why this is useful.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json->stringify_infnan ([$infnan_mode = 1])
0.000000,0,0.000000,
0.000000,0,0.000000,=item $infnan_mode = $json->get_stringify_infnan
0.000000,0,0.000000,
0.000000,0,0.000000,Get or set how Cpanel::JSON::XS encodes C<inf>, C<-inf> or C<nan> for numeric
0.000000,0,0.000000,values. Also qnan, snan or negative nan on some platforms.
0.000000,0,0.000000,
0.000000,0,0.000000,C<null>:     infnan_mode = 0. Similar to most JSON modules in other languages.
0.000000,0,0.000000,Always null.
0.000000,0,0.000000,
0.000000,0,0.000000,stringified: infnan_mode = 1. As in Mojo::JSON. Platform specific strings.
0.000000,0,0.000000,Stringified via sprintf(%g), with double quotes.
0.000000,0,0.000000,
0.000000,0,0.000000,inf/nan:     infnan_mode = 2. As in JSON::XS, and older releases.
0.000000,0,0.000000,Passes through platform dependent values, invalid JSON. Stringified via
0.000000,0,0.000000,sprintf(%g), but without double quotes.
0.000000,0,0.000000,
0.000000,0,0.000000,"inf/-inf/nan": infnan_mode = 3. Platform independent inf/nan/-inf
0.000000,0,0.000000,strings.  No QNAN/SNAN/negative NAN support, unified to "nan". Much
0.000000,0,0.000000,easier to detect, but may conflict with valid strings.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json_text = $json->encode ($perl_scalar, $json_type)
0.000000,0,0.000000,
0.000000,0,0.000000,Converts the given Perl data structure (a simple scalar or a reference
0.000000,0,0.000000,to a hash or array) to its JSON representation. Simple scalars will be
0.000000,0,0.000000,converted into JSON string or number sequences, while references to
0.000000,0,0.000000,arrays become JSON arrays and references to hashes become JSON
0.000000,0,0.000000,objects. Undefined Perl values (e.g. C<undef>) become JSON C<null>
0.000000,0,0.000000,values. Neither C<true> nor C<false> values will be generated.
0.000000,0,0.000000,
0.000000,0,0.000000,For the type argument see L<Cpanel::JSON::XS::Type>.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $perl_scalar = $json->decode ($json_text, my $json_type)
0.000000,0,0.000000,
0.000000,0,0.000000,The opposite of C<encode>: expects a JSON text and tries to parse it,
0.000000,0,0.000000,returning the resulting simple scalar or reference. Croaks on error.
0.000000,0,0.000000,
0.000000,0,0.000000,JSON numbers and strings become simple Perl scalars. JSON arrays become
0.000000,0,0.000000,Perl arrayrefs and JSON objects become Perl hashrefs. C<true> becomes
0.000000,0,0.000000,C<1>, C<false> becomes C<0> and C<null> becomes C<undef>.
0.000000,0,0.000000,
0.000000,0,0.000000,For the type argument see L<Cpanel::JSON::XS::Type>.
0.000000,0,0.000000,
0.000000,0,0.000000,=item ($perl_scalar, $characters) = $json->decode_prefix ($json_text)
0.000000,0,0.000000,
0.000000,0,0.000000,This works like the C<decode> method, but instead of raising an exception
0.000000,0,0.000000,when there is trailing garbage after the first JSON object, it will
0.000000,0,0.000000,silently stop parsing there and return the number of characters consumed
0.000000,0,0.000000,so far.
0.000000,0,0.000000,
0.000000,0,0.000000,This is useful if your JSON texts are not delimited by an outer protocol
0.000000,0,0.000000,and you need to know where the JSON text ends.
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS->new->decode_prefix ("[1] the tail")
0.000000,0,0.000000,=> ([1], 3)
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json->to_json ($perl_hash_or_arrayref)
0.000000,0,0.000000,
0.000000,0,0.000000,Deprecated method for perl 5.8 and newer. Use L<encode_json> instead.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json->from_json ($utf8_encoded_json_text)
0.000000,0,0.000000,
0.000000,0,0.000000,Deprecated method for perl 5.8 and newer. Use L<decode_json> instead.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 INCREMENTAL PARSING
0.000000,0,0.000000,
0.000000,0,0.000000,In some cases, there is the need for incremental parsing of JSON
0.000000,0,0.000000,texts. While this module always has to keep both JSON text and resulting
0.000000,0,0.000000,Perl data structure in memory at one time, it does allow you to parse a
0.000000,0,0.000000,JSON stream incrementally. It does so by accumulating text until it has
0.000000,0,0.000000,a full JSON object, which it then can decode. This process is similar to
0.000000,0,0.000000,using C<decode_prefix> to see if a full JSON object is available, but
0.000000,0,0.000000,is much more efficient (and can be implemented with a minimum of method
0.000000,0,0.000000,calls).
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS will only attempt to parse the JSON text once it is
0.000000,0,0.000000,sure it has enough text to get a decisive result, using a very simple
0.000000,0,0.000000,but truly incremental parser. This means that it sometimes won't stop
0.000000,0,0.000000,as early as the full parser, for example, it doesn't detect mismatched
0.000000,0,0.000000,parentheses. The only thing it guarantees is that it starts decoding
0.000000,0,0.000000,as soon as a syntactically valid JSON text has been seen. This means
0.000000,0,0.000000,you need to set resource limits (e.g. C<max_size>) to ensure the
0.000000,0,0.000000,parser will stop parsing in the presence if syntax errors.
0.000000,0,0.000000,
0.000000,0,0.000000,The following methods implement this incremental parser.
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item [void, scalar or list context] = $json->incr_parse ([$string])
0.000000,0,0.000000,
0.000000,0,0.000000,This is the central parsing function. It can both append new text and
0.000000,0,0.000000,extract objects from the stream accumulated so far (both of these
0.000000,0,0.000000,functions are optional).
0.000000,0,0.000000,
0.000000,0,0.000000,If C<$string> is given, then this string is appended to the already
0.000000,0,0.000000,existing JSON fragment stored in the C<$json> object.
0.000000,0,0.000000,
0.000000,0,0.000000,After that, if the function is called in void context, it will simply
0.000000,0,0.000000,return without doing anything further. This can be used to add more text
0.000000,0,0.000000,in as many chunks as you want.
0.000000,0,0.000000,
0.000000,0,0.000000,If the method is called in scalar context, then it will try to extract
0.000000,0,0.000000,exactly I<one> JSON object. If that is successful, it will return this
0.000000,0,0.000000,object, otherwise it will return C<undef>. If there is a parse error,
0.000000,0,0.000000,this method will croak just as C<decode> would do (one can then use
0.000000,0,0.000000,C<incr_skip> to skip the erroneous part). This is the most common way of
0.000000,0,0.000000,using the method.
0.000000,0,0.000000,
0.000000,0,0.000000,And finally, in list context, it will try to extract as many objects
0.000000,0,0.000000,from the stream as it can find and return them, or the empty list
0.000000,0,0.000000,otherwise. For this to work, there must be no separators between the JSON
0.000000,0,0.000000,objects or arrays, instead they must be concatenated back-to-back. If
0.000000,0,0.000000,an error occurs, an exception will be raised as in the scalar context
0.000000,0,0.000000,case. Note that in this case, any previously-parsed JSON texts will be
0.000000,0,0.000000,lost.
0.000000,0,0.000000,
0.000000,0,0.000000,Example: Parse some JSON arrays/objects in a given string and return
0.000000,0,0.000000,them.
0.000000,0,0.000000,
0.000000,0,0.000000,my @objs = Cpanel::JSON::XS->new->incr_parse ("[5][7][1,2]");
0.000000,0,0.000000,
0.000000,0,0.000000,=item $lvalue_string = $json->incr_text (>5.8 only)
0.000000,0,0.000000,
0.000000,0,0.000000,This method returns the currently stored JSON fragment as an lvalue, that
0.000000,0,0.000000,is, you can manipulate it. This I<only> works when a preceding call to
0.000000,0,0.000000,C<incr_parse> in I<scalar context> successfully returned an object, and
0.000000,0,0.000000,2. only with Perl >= 5.8 
0.000000,0,0.000000,
0.000000,0,0.000000,Under all other circumstances you must not call this function (I mean
0.000000,0,0.000000,it.  although in simple tests it might actually work, it I<will> fail
0.000000,0,0.000000,under real world conditions). As a special exception, you can also
0.000000,0,0.000000,call this method before having parsed anything.
0.000000,0,0.000000,
0.000000,0,0.000000,This function is useful in two cases: a) finding the trailing text after a
0.000000,0,0.000000,JSON object or b) parsing multiple JSON objects separated by non-JSON text
0.000000,0,0.000000,(such as commas).
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json->incr_skip
0.000000,0,0.000000,
0.000000,0,0.000000,This will reset the state of the incremental parser and will remove
0.000000,0,0.000000,the parsed text from the input buffer so far. This is useful after
0.000000,0,0.000000,C<incr_parse> died, in which case the input buffer and incremental parser
0.000000,0,0.000000,state is left unchanged, to skip the text parsed so far and to reset the
0.000000,0,0.000000,parse state.
0.000000,0,0.000000,
0.000000,0,0.000000,The difference to C<incr_reset> is that only text until the parse error
0.000000,0,0.000000,occurred is removed.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $json->incr_reset
0.000000,0,0.000000,
0.000000,0,0.000000,This completely resets the incremental parser, that is, after this call,
0.000000,0,0.000000,it will be as if the parser had never parsed anything.
0.000000,0,0.000000,
0.000000,0,0.000000,This is useful if you want to repeatedly parse JSON objects and want to
0.000000,0,0.000000,ignore any trailing data, which means you have to reset the parser after
0.000000,0,0.000000,each successful decode.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 LIMITATIONS
0.000000,0,0.000000,
0.000000,0,0.000000,All options that affect decoding are supported, except
0.000000,0,0.000000,C<allow_nonref>. The reason for this is that it cannot be made to work
0.000000,0,0.000000,sensibly: JSON objects and arrays are self-delimited, i.e. you can
0.000000,0,0.000000,concatenate them back to back and still decode them perfectly. This
0.000000,0,0.000000,does not hold true for JSON numbers, however.
0.000000,0,0.000000,
0.000000,0,0.000000,For example, is the string C<1> a single JSON number, or is it simply
0.000000,0,0.000000,the start of C<12>? Or is C<12> a single JSON number, or the
0.000000,0,0.000000,concatenation of C<1> and C<2>? In neither case you can tell, and this
0.000000,0,0.000000,is why Cpanel::JSON::XS takes the conservative route and disallows
0.000000,0,0.000000,this case.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 EXAMPLES
0.000000,0,0.000000,
0.000000,0,0.000000,Some examples will make all this clearer. First, a simple example that
0.000000,0,0.000000,works similarly to C<decode_prefix>: We want to decode the JSON object at
0.000000,0,0.000000,the start of a string and identify the portion after the JSON object:
0.000000,0,0.000000,
0.000000,0,0.000000,my $text = "[1,2,3] hello";
0.000000,0,0.000000,
0.000000,0,0.000000,my $json = new Cpanel::JSON::XS;
0.000000,0,0.000000,
0.000000,0,0.000000,my $obj = $json->incr_parse ($text)
0.000000,0,0.000000,or die "expected JSON object or array at beginning of string";
0.000000,0,0.000000,
0.000000,0,0.000000,my $tail = $json->incr_text;
0.000000,0,0.000000,# $tail now contains " hello"
0.000000,0,0.000000,
0.000000,0,0.000000,Easy, isn't it?
0.000000,0,0.000000,
0.000000,0,0.000000,Now for a more complicated example: Imagine a hypothetical protocol where
0.000000,0,0.000000,you read some requests from a TCP stream, and each request is a JSON
0.000000,0,0.000000,array, without any separation between them (in fact, it is often useful to
0.000000,0,0.000000,use newlines as "separators", as these get interpreted as whitespace at
0.000000,0,0.000000,the start of the JSON text, which makes it possible to test said protocol
0.000000,0,0.000000,with C<telnet>...).
0.000000,0,0.000000,
0.000000,0,0.000000,Here is how you'd do it (it is trivial to write this in an event-based
0.000000,0,0.000000,manner):
0.000000,0,0.000000,
0.000000,0,0.000000,my $json = new Cpanel::JSON::XS;
0.000000,0,0.000000,
0.000000,0,0.000000,# read some data from the socket
0.000000,0,0.000000,while (sysread $socket, my $buf, 4096) {
0.000000,0,0.000000,
0.000000,0,0.000000,# split and decode as many requests as possible
0.000000,0,0.000000,for my $request ($json->incr_parse ($buf)) {
0.000000,0,0.000000,# act on the $request
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,Another complicated example: Assume you have a string with JSON objects
0.000000,0,0.000000,or arrays, all separated by (optional) comma characters (e.g. C<[1],[2],
0.000000,0,0.000000,[3]>). To parse them, we have to skip the commas between the JSON texts,
0.000000,0,0.000000,and here is where the lvalue-ness of C<incr_text> comes in useful:
0.000000,0,0.000000,
0.000000,0,0.000000,my $text = "[1],[2], [3]";
0.000000,0,0.000000,my $json = new Cpanel::JSON::XS;
0.000000,0,0.000000,
0.000000,0,0.000000,# void context, so no parsing done
0.000000,0,0.000000,$json->incr_parse ($text);
0.000000,0,0.000000,
0.000000,0,0.000000,# now extract as many objects as possible. note the
0.000000,0,0.000000,# use of scalar context so incr_text can be called.
0.000000,0,0.000000,while (my $obj = $json->incr_parse) {
0.000000,0,0.000000,# do something with $obj
0.000000,0,0.000000,
0.000000,0,0.000000,# now skip the optional comma
0.000000,0,0.000000,$json->incr_text =~ s/^ \s* , //x;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,Now lets go for a very complex example: Assume that you have a gigantic
0.000000,0,0.000000,JSON array-of-objects, many gigabytes in size, and you want to parse it,
0.000000,0,0.000000,but you cannot load it into memory fully (this has actually happened in
0.000000,0,0.000000,the real world :).
0.000000,0,0.000000,
0.000000,0,0.000000,Well, you lost, you have to implement your own JSON parser. But
0.000000,0,0.000000,Cpanel::JSON::XS can still help you: You implement a (very simple)
0.000000,0,0.000000,array parser and let JSON decode the array elements, which are all
0.000000,0,0.000000,full JSON objects on their own (this wouldn't work if the array
0.000000,0,0.000000,elements could be JSON numbers, for example):
0.000000,0,0.000000,
0.000000,0,0.000000,my $json = new Cpanel::JSON::XS;
0.000000,0,0.000000,
0.000000,0,0.000000,# open the monster
0.000000,0,0.000000,open my $fh, "<bigfile.json"
0.000000,0,0.000000,or die "bigfile: $!";
0.000000,0,0.000000,
0.000000,0,0.000000,# first parse the initial "["
0.000000,0,0.000000,for (;;) {
0.000000,0,0.000000,sysread $fh, my $buf, 65536
0.000000,0,0.000000,or die "read error: $!";
0.000000,0,0.000000,$json->incr_parse ($buf); # void context, so no parsing
0.000000,0,0.000000,
0.000000,0,0.000000,# Exit the loop once we found and removed(!) the initial "[".
0.000000,0,0.000000,# In essence, we are (ab-)using the $json object as a simple scalar
0.000000,0,0.000000,# we append data to.
0.000000,0,0.000000,last if $json->incr_text =~ s/^ \s* \[ //x;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# now we have the skipped the initial "[", so continue
0.000000,0,0.000000,# parsing all the elements.
0.000000,0,0.000000,for (;;) {
0.000000,0,0.000000,# in this loop we read data until we got a single JSON object
0.000000,0,0.000000,for (;;) {
0.000000,0,0.000000,if (my $obj = $json->incr_parse) {
0.000000,0,0.000000,# do something with $obj
0.000000,0,0.000000,last;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# add more data
0.000000,0,0.000000,sysread $fh, my $buf, 65536
0.000000,0,0.000000,or die "read error: $!";
0.000000,0,0.000000,$json->incr_parse ($buf); # void context, so no parsing
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# in this loop we read data until we either found and parsed the
0.000000,0,0.000000,# separating "," between elements, or the final "]"
0.000000,0,0.000000,for (;;) {
0.000000,0,0.000000,# first skip whitespace
0.000000,0,0.000000,$json->incr_text =~ s/^\s*//;
0.000000,0,0.000000,
0.000000,0,0.000000,# if we find "]", we are done
0.000000,0,0.000000,if ($json->incr_text =~ s/^\]//) {
0.000000,0,0.000000,print "finished.\n";
0.000000,0,0.000000,exit;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# if we find ",", we can continue with the next element
0.000000,0,0.000000,if ($json->incr_text =~ s/^,//) {
0.000000,0,0.000000,last;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# if we find anything else, we have a parse error!
0.000000,0,0.000000,if (length $json->incr_text) {
0.000000,0,0.000000,die "parse error near ", $json->incr_text;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# else add more data
0.000000,0,0.000000,sysread $fh, my $buf, 65536
0.000000,0,0.000000,or die "read error: $!";
0.000000,0,0.000000,$json->incr_parse ($buf); # void context, so no parsing
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,This is a complex example, but most of the complexity comes from the fact
0.000000,0,0.000000,that we are trying to be correct (bear with me if I am wrong, I never ran
0.000000,0,0.000000,the above example :).
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 BOM
0.000000,0,0.000000,
0.000000,0,0.000000,Detect all unicode B<Byte Order Marks> on decode.
0.000000,0,0.000000,Which are UTF-8, UTF-16LE, UTF-16BE, UTF-32LE and UTF-32BE.
0.000000,0,0.000000,
0.000000,0,0.000000,The BOM encoding is set only for one specific decode call, it does not
0.000000,0,0.000000,change the state of the JSON object.
0.000000,0,0.000000,
0.000000,0,0.000000,B<Warning>: With perls older than 5.20 you need load the Encode module
0.000000,0,0.000000,before loading a multibyte BOM, i.e. >= UTF-16. Otherwise an error is
0.000000,0,0.000000,thrown. This is an implementation limitation and might get fixed later.
0.000000,0,0.000000,
0.000000,0,0.000000,See L<https://tools.ietf.org/html/rfc7159#section-8.1>
0.000000,0,0.000000,I<"JSON text SHALL be encoded in UTF-8, UTF-16, or UTF-32.">
0.000000,0,0.000000,
0.000000,0,0.000000,I<"Implementations MUST NOT add a byte order mark to the beginning of a
0.000000,0,0.000000,JSON text", "implementations (...) MAY ignore the presence of a byte
0.000000,0,0.000000,order mark rather than treating it as an error".>
0.000000,0,0.000000,
0.000000,0,0.000000,See also L<http://www.unicode.org/faq/utf_bom.html#BOM>.
0.000000,0,0.000000,
0.000000,0,0.000000,Beware that Cpanel::JSON::XS is currently the only JSON module which
0.000000,0,0.000000,does accept and decode a BOM.
0.000000,0,0.000000,
0.000000,0,0.000000,The latest JSON spec
0.000000,0,0.000000,L<https://www.greenbytes.de/tech/webdav/rfc8259.html#character.encoding>
0.000000,0,0.000000,forbid the usage of UTF-16 or UTF-32, the character encoding is UTF-8.
0.000000,0,0.000000,Thus in subsequent updates BOM's of UTF-16 or UTF-32 will throw an error.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 MAPPING
0.000000,0,0.000000,
0.000000,0,0.000000,This section describes how Cpanel::JSON::XS maps Perl values to JSON
0.000000,0,0.000000,values and vice versa. These mappings are designed to "do the right
0.000000,0,0.000000,thing" in most circumstances automatically, preserving round-tripping
0.000000,0,0.000000,characteristics (what you put in comes out as something equivalent).
0.000000,0,0.000000,
0.000000,0,0.000000,For the more enlightened: note that in the following descriptions,
0.000000,0,0.000000,lowercase I<perl> refers to the Perl interpreter, while uppercase I<Perl>
0.000000,0,0.000000,refers to the abstract Perl language itself.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 JSON -> PERL
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item object
0.000000,0,0.000000,
0.000000,0,0.000000,A JSON object becomes a reference to a hash in Perl. No ordering of object
0.000000,0,0.000000,keys is preserved (JSON does not preserve object key ordering itself).
0.000000,0,0.000000,
0.000000,0,0.000000,=item array
0.000000,0,0.000000,
0.000000,0,0.000000,A JSON array becomes a reference to an array in Perl.
0.000000,0,0.000000,
0.000000,0,0.000000,=item string
0.000000,0,0.000000,
0.000000,0,0.000000,A JSON string becomes a string scalar in Perl - Unicode codepoints in JSON
0.000000,0,0.000000,are represented by the same codepoints in the Perl string, so no manual
0.000000,0,0.000000,decoding is necessary.
0.000000,0,0.000000,
0.000000,0,0.000000,=item number
0.000000,0,0.000000,
0.000000,0,0.000000,A JSON number becomes either an integer, numeric (floating point) or
0.000000,0,0.000000,string scalar in perl, depending on its range and any fractional parts. On
0.000000,0,0.000000,the Perl level, there is no difference between those as Perl handles all
0.000000,0,0.000000,the conversion details, but an integer may take slightly less memory and
0.000000,0,0.000000,might represent more values exactly than floating point numbers.
0.000000,0,0.000000,
0.000000,0,0.000000,If the number consists of digits only, Cpanel::JSON::XS will try to
0.000000,0,0.000000,represent it as an integer value. If that fails, it will try to
0.000000,0,0.000000,represent it as a numeric (floating point) value if that is possible
0.000000,0,0.000000,without loss of precision. Otherwise it will preserve the number as a
0.000000,0,0.000000,string value (in which case you lose roundtripping ability, as the
0.000000,0,0.000000,JSON number will be re-encoded to a JSON string).
0.000000,0,0.000000,
0.000000,0,0.000000,Numbers containing a fractional or exponential part will always be
0.000000,0,0.000000,represented as numeric (floating point) values, possibly at a loss of
0.000000,0,0.000000,precision (in which case you might lose perfect roundtripping ability, but
0.000000,0,0.000000,the JSON number will still be re-encoded as a JSON number).
0.000000,0,0.000000,
0.000000,0,0.000000,Note that precision is not accuracy - binary floating point values
0.000000,0,0.000000,cannot represent most decimal fractions exactly, and when converting
0.000000,0,0.000000,from and to floating point, C<Cpanel::JSON::XS> only guarantees precision
0.000000,0,0.000000,up to but not including the least significant bit.
0.000000,0,0.000000,
0.000000,0,0.000000,=item true, false
0.000000,0,0.000000,
0.000000,0,0.000000,When C<unblessed_bool> is set to true, then JSON C<true> becomes C<1> and
0.000000,0,0.000000,JSON C<false> becomes C<0>.
0.000000,0,0.000000,
0.000000,0,0.000000,Otherwise these JSON atoms become C<JSON::PP::true> and
0.000000,0,0.000000,C<JSON::PP::false>, respectively. They are C<JSON::PP::Boolean>
0.000000,0,0.000000,objects and are overloaded to act almost exactly like the numbers C<1>
0.000000,0,0.000000,and C<0>. You can check whether a scalar is a JSON boolean by using
0.000000,0,0.000000,the C<Cpanel::JSON::XS::is_bool> function.
0.000000,0,0.000000,
0.000000,0,0.000000,The other round, from perl to JSON, C<!0> which is represented as
0.000000,0,0.000000,C<yes> becomes C<true>, and C<!1> which is represented as
0.000000,0,0.000000,C<no> becomes C<false>.
0.000000,0,0.000000,
0.000000,0,0.000000,Via L<Cpanel::JSON::XS::Type> you can now even force negation in C<encode>,
0.000000,0,0.000000,without overloading of C<!>:
0.000000,0,0.000000,
0.000000,0,0.000000,my $false = Cpanel::JSON::XS::false;
0.000000,0,0.000000,print($json->encode([!$false], [JSON_TYPE_BOOL]));
0.000000,0,0.000000,=> [true]
0.000000,0,0.000000,
0.000000,0,0.000000,=item null
0.000000,0,0.000000,
0.000000,0,0.000000,A JSON null atom becomes C<undef> in Perl.
0.000000,0,0.000000,
0.000000,0,0.000000,=item shell-style comments (C<< # I<text> >>)
0.000000,0,0.000000,
0.000000,0,0.000000,As a nonstandard extension to the JSON syntax that is enabled by the
0.000000,0,0.000000,C<relaxed> setting, shell-style comments are allowed. They can start
0.000000,0,0.000000,anywhere outside strings and go till the end of the line.
0.000000,0,0.000000,
0.000000,0,0.000000,=item tagged values (C<< (I<tag>)I<value> >>).
0.000000,0,0.000000,
0.000000,0,0.000000,Another nonstandard extension to the JSON syntax, enabled with the
0.000000,0,0.000000,C<allow_tags> setting, are tagged values. In this implementation, the
0.000000,0,0.000000,I<tag> must be a perl package/class name encoded as a JSON string, and the
0.000000,0,0.000000,I<value> must be a JSON array encoding optional constructor arguments.
0.000000,0,0.000000,
0.000000,0,0.000000,See L<OBJECT SERIALIZATION>, below, for details.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 PERL -> JSON
0.000000,0,0.000000,
0.000000,0,0.000000,The mapping from Perl to JSON is slightly more difficult, as Perl is a
0.000000,0,0.000000,truly typeless language, so we can only guess which JSON type is meant by
0.000000,0,0.000000,a Perl value.
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item hash references
0.000000,0,0.000000,
0.000000,0,0.000000,Perl hash references become JSON objects. As there is no inherent ordering
0.000000,0,0.000000,in hash keys (or JSON objects), they will usually be encoded in a
0.000000,0,0.000000,pseudo-random order that can change between runs of the same program but
0.000000,0,0.000000,stays generally the same within a single run of a program. Cpanel::JSON::XS can
0.000000,0,0.000000,optionally sort the hash keys (determined by the I<canonical> flag), so
0.000000,0,0.000000,the same datastructure will serialize to the same JSON text (given same
0.000000,0,0.000000,settings and version of Cpanel::JSON::XS), but this incurs a runtime overhead
0.000000,0,0.000000,and is only rarely useful, e.g. when you want to compare some JSON text
0.000000,0,0.000000,against another for equality.
0.000000,0,0.000000,
0.000000,0,0.000000,=item array references
0.000000,0,0.000000,
0.000000,0,0.000000,Perl array references become JSON arrays.
0.000000,0,0.000000,
0.000000,0,0.000000,=item other references
0.000000,0,0.000000,
0.000000,0,0.000000,Other unblessed references are generally not allowed and will cause an
0.000000,0,0.000000,exception to be thrown, except for references to the integers C<0> and
0.000000,0,0.000000,C<1>, which get turned into C<false> and C<true> atoms in JSON. 
0.000000,0,0.000000,
0.000000,0,0.000000,With the option C<allow_stringify>, you can ignore the exception and return
0.000000,0,0.000000,the stringification of the perl value.
0.000000,0,0.000000,
0.000000,0,0.000000,With the option C<allow_unknown>, you can ignore the exception and
0.000000,0,0.000000,return C<null> instead.
0.000000,0,0.000000,
0.000000,0,0.000000,encode_json [\"x"]        # => cannot encode reference to scalar 'SCALAR(0x..)'
0.000000,0,0.000000,# unless the scalar is 0 or 1
0.000000,0,0.000000,encode_json [\0, \1]      # yields [false,true]
0.000000,0,0.000000,
0.000000,0,0.000000,allow_stringify->encode_json [\"x"] # yields "x" unlike JSON::PP
0.000000,0,0.000000,allow_unknown->encode_json [\"x"]   # yields null as in JSON::PP
0.000000,0,0.000000,
0.000000,0,0.000000,=item Cpanel::JSON::XS::true, Cpanel::JSON::XS::false
0.000000,0,0.000000,
0.000000,0,0.000000,These special values become JSON true and JSON false values,
0.000000,0,0.000000,respectively. You can also use C<\1> and C<\0> or C<!0> and C<!1>
0.000000,0,0.000000,directly if you want.
0.000000,0,0.000000,
0.000000,0,0.000000,encode_json [Cpanel::JSON::XS::false, Cpanel::JSON::XS::true] # yields [false,true]
0.000000,0,0.000000,encode_json [!1, !0], [JSON_TYPE_BOOL, JSON_TYPE_BOOL] # yields [false,true]
0.000000,0,0.000000,
0.000000,0,0.000000,eq/ne comparisons with true, false:
0.000000,0,0.000000,
0.000000,0,0.000000,false is eq to the empty string or the string 'false' or the special
0.000000,0,0.000000,empty string C<!!0> or C<!1>, i.e. C<SV_NO>, or the numbers 0 or 0.0.
0.000000,0,0.000000,
0.000000,0,0.000000,true is eq to the string 'true' or to the special string C<!0>
0.000000,0,0.000000,(i.e. C<SV_YES>) or to the numbers 1 or 1.0.
0.000000,0,0.000000,
0.000000,0,0.000000,=item blessed objects
0.000000,0,0.000000,
0.000000,0,0.000000,Blessed objects are not directly representable in JSON, but
0.000000,0,0.000000,C<Cpanel::JSON::XS> allows various optional ways of handling
0.000000,0,0.000000,objects. See L<OBJECT SERIALIZATION>, below, for details.
0.000000,0,0.000000,
0.000000,0,0.000000,See the C<allow_blessed> and C<convert_blessed> methods on various
0.000000,0,0.000000,options on how to deal with this: basically, you can choose between
0.000000,0,0.000000,throwing an exception, encoding the reference as if it weren't
0.000000,0,0.000000,blessed, use the objects overloaded stringification method or provide
0.000000,0,0.000000,your own serializer method.
0.000000,0,0.000000,
0.000000,0,0.000000,=item simple scalars
0.000000,0,0.000000,
0.000000,0,0.000000,Simple Perl scalars (any scalar that is not a reference) are the most
0.000000,0,0.000000,difficult objects to encode: Cpanel::JSON::XS will encode undefined
0.000000,0,0.000000,scalars or inf/nan as JSON C<null> values and other scalars to either
0.000000,0,0.000000,number or string in non-deterministic way which may be affected or
0.000000,0,0.000000,changed by Perl version or any other loaded Perl module.
0.000000,0,0.000000,
0.000000,0,0.000000,If you want to have stable and deterministic types in JSON encoder then
0.000000,0,0.000000,use L<Cpanel::JSON::XS::Type>.
0.000000,0,0.000000,
0.000000,0,0.000000,Alternative way for deterministic types is to use C<type_all_string>
0.000000,0,0.000000,method when all perl scalars are encoded to JSON strings.
0.000000,0,0.000000,
0.000000,0,0.000000,Non-deterministic behavior is following: scalars that have last been
0.000000,0,0.000000,used in a string context before encoding as JSON strings, and anything
0.000000,0,0.000000,else as number value:
0.000000,0,0.000000,
0.000000,0,0.000000,# dump as number
0.000000,0,0.000000,encode_json [2]                      # yields [2]
0.000000,0,0.000000,encode_json [-3.0e17]                # yields [-3e+17]
0.000000,0,0.000000,my $value = 5; encode_json [$value]  # yields [5]
0.000000,0,0.000000,
0.000000,0,0.000000,# used as string, but the two representations are for the same number
0.000000,0,0.000000,print $value;
0.000000,0,0.000000,encode_json [$value]                 # yields [5]
0.000000,0,0.000000,
0.000000,0,0.000000,# used as different string (non-matching dual-var)
0.000000,0,0.000000,my $str = '0 but true';
0.000000,0,0.000000,my $num = 1 + $str;
0.000000,0,0.000000,encode_json [$num, $str]           # yields [1,"0 but true"]
0.000000,0,0.000000,
0.000000,0,0.000000,# undef becomes null
0.000000,0,0.000000,encode_json [undef]                  # yields [null]
0.000000,0,0.000000,
0.000000,0,0.000000,# inf or nan becomes null, unless you answered
0.000000,0,0.000000,# "Do you want to handle inf/nan as strings" with yes
0.000000,0,0.000000,encode_json [9**9**9]                # yields [null]
0.000000,0,0.000000,
0.000000,0,0.000000,You can force the type to be a JSON string by stringifying it:
0.000000,0,0.000000,
0.000000,0,0.000000,my $x = 3.1; # some variable containing a number
0.000000,0,0.000000,"$x";        # stringified
0.000000,0,0.000000,$x .= "";    # another, more awkward way to stringify
0.000000,0,0.000000,print $x;    # perl does it for you, too, quite often
0.000000,0,0.000000,
0.000000,0,0.000000,You can force the type to be a JSON number by numifying it:
0.000000,0,0.000000,
0.000000,0,0.000000,my $x = "3"; # some variable containing a string
0.000000,0,0.000000,$x += 0;     # numify it, ensuring it will be dumped as a number
0.000000,0,0.000000,$x *= 1;     # same thing, the choice is yours.
0.000000,0,0.000000,
0.000000,0,0.000000,Note that numerical precision has the same meaning as under Perl (so
0.000000,0,0.000000,binary to decimal conversion follows the same rules as in Perl, which
0.000000,0,0.000000,can differ to other languages). Also, your perl interpreter might expose
0.000000,0,0.000000,extensions to the floating point numbers of your platform, such as
0.000000,0,0.000000,infinities or NaN's - these cannot be represented in JSON, and thus
0.000000,0,0.000000,null is returned instead. Optionally you can configure it to stringify
0.000000,0,0.000000,inf and nan values.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 OBJECT SERIALIZATION
0.000000,0,0.000000,
0.000000,0,0.000000,As JSON cannot directly represent Perl objects, you have to choose between
0.000000,0,0.000000,a pure JSON representation (without the ability to deserialize the object
0.000000,0,0.000000,automatically again), and a nonstandard extension to the JSON syntax,
0.000000,0,0.000000,tagged values.
0.000000,0,0.000000,
0.000000,0,0.000000,=head3 SERIALIZATION
0.000000,0,0.000000,
0.000000,0,0.000000,What happens when C<Cpanel::JSON::XS> encounters a Perl object depends
0.000000,0,0.000000,on the C<allow_blessed>, C<convert_blessed> and C<allow_tags>
0.000000,0,0.000000,settings, which are used in this order:
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item 1. C<allow_tags> is enabled and the object has a C<FREEZE> method.
0.000000,0,0.000000,
0.000000,0,0.000000,In this case, C<Cpanel::JSON::XS> uses the L<Types::Serialiser> object
0.000000,0,0.000000,serialization protocol to create a tagged JSON value, using a nonstandard
0.000000,0,0.000000,extension to the JSON syntax.
0.000000,0,0.000000,
0.000000,0,0.000000,This works by invoking the C<FREEZE> method on the object, with the first
0.000000,0,0.000000,argument being the object to serialize, and the second argument being the
0.000000,0,0.000000,constant string C<JSON> to distinguish it from other serializers.
0.000000,0,0.000000,
0.000000,0,0.000000,The C<FREEZE> method can return any number of values (i.e. zero or
0.000000,0,0.000000,more). These values and the paclkage/classname of the object will then be
0.000000,0,0.000000,encoded as a tagged JSON value in the following format:
0.000000,0,0.000000,
0.000000,0,0.000000,("classname")[FREEZE return values...]
0.000000,0,0.000000,
0.000000,0,0.000000,e.g.:
0.000000,0,0.000000,
0.000000,0,0.000000,("URI")["http://www.google.com/"]
0.000000,0,0.000000,("MyDate")[2013,10,29]
0.000000,0,0.000000,("ImageData::JPEG")["Z3...VlCg=="]
0.000000,0,0.000000,
0.000000,0,0.000000,For example, the hypothetical C<My::Object> C<FREEZE> method might use the
0.000000,0,0.000000,objects C<type> and C<id> members to encode the object:
0.000000,0,0.000000,
0.000000,0,0.000000,sub My::Object::FREEZE {
0.000000,0,0.000000,my ($self, $serializer) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,($self->{type}, $self->{id})
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item 2. C<convert_blessed> is enabled and the object has a C<TO_JSON> method.
0.000000,0,0.000000,
0.000000,0,0.000000,In this case, the C<TO_JSON> method of the object is invoked in scalar
0.000000,0,0.000000,context. It must return a single scalar that can be directly encoded into
0.000000,0,0.000000,JSON. This scalar replaces the object in the JSON text.
0.000000,0,0.000000,
0.000000,0,0.000000,For example, the following C<TO_JSON> method will convert all L<URI>
0.000000,0,0.000000,objects to JSON strings when serialized. The fact that these values
0.000000,0,0.000000,originally were L<URI> objects is lost.
0.000000,0,0.000000,
0.000000,0,0.000000,sub URI::TO_JSON {
0.000000,0,0.000000,my ($uri) = @_;
0.000000,0,0.000000,$uri->as_string
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item 3. C<convert_blessed> is enabled and the object has a stringification overload.
0.000000,0,0.000000,
0.000000,0,0.000000,In this case, the overloaded C<""> method of the object is invoked in scalar
0.000000,0,0.000000,context. It must return a single scalar that can be directly encoded into
0.000000,0,0.000000,JSON. This scalar replaces the object in the JSON text.
0.000000,0,0.000000,
0.000000,0,0.000000,For example, the following C<""> method will convert all L<URI>
0.000000,0,0.000000,objects to JSON strings when serialized. The fact that these values
0.000000,0,0.000000,originally were L<URI> objects is lost.
0.000000,0,0.000000,
0.000000,0,0.000000,package URI;
0.000000,0,0.000000,use overload '""' => sub { shift->as_string };
0.000000,0,0.000000,
0.000000,0,0.000000,=item 4. C<allow_blessed> is enabled.
0.000000,0,0.000000,
0.000000,0,0.000000,The object will be serialized as a JSON null value.
0.000000,0,0.000000,
0.000000,0,0.000000,=item 5. none of the above
0.000000,0,0.000000,
0.000000,0,0.000000,If none of the settings are enabled or the respective methods are missing,
0.000000,0,0.000000,C<Cpanel::JSON::XS> throws an exception.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head3 DESERIALIZATION
0.000000,0,0.000000,
0.000000,0,0.000000,For deserialization there are only two cases to consider: either
0.000000,0,0.000000,nonstandard tagging was used, in which case C<allow_tags> decides,
0.000000,0,0.000000,or objects cannot be automatically be deserialized, in which
0.000000,0,0.000000,case you can use postprocessing or the C<filter_json_object> or
0.000000,0,0.000000,C<filter_json_single_key_object> callbacks to get some real objects our of
0.000000,0,0.000000,your JSON.
0.000000,0,0.000000,
0.000000,0,0.000000,This section only considers the tagged value case: I a tagged JSON object
0.000000,0,0.000000,is encountered during decoding and C<allow_tags> is disabled, a parse
0.000000,0,0.000000,error will result (as if tagged values were not part of the grammar).
0.000000,0,0.000000,
0.000000,0,0.000000,If C<allow_tags> is enabled, C<Cpanel::JSON::XS> will look up the C<THAW> method
0.000000,0,0.000000,of the package/classname used during serialization (it will not attempt
0.000000,0,0.000000,to load the package as a Perl module). If there is no such method, the
0.000000,0,0.000000,decoding will fail with an error.
0.000000,0,0.000000,
0.000000,0,0.000000,Otherwise, the C<THAW> method is invoked with the classname as first
0.000000,0,0.000000,argument, the constant string C<JSON> as second argument, and all the
0.000000,0,0.000000,values from the JSON array (the values originally returned by the
0.000000,0,0.000000,C<FREEZE> method) as remaining arguments.
0.000000,0,0.000000,
0.000000,0,0.000000,The method must then return the object. While technically you can return
0.000000,0,0.000000,any Perl scalar, you might have to enable the C<enable_nonref> setting to
0.000000,0,0.000000,make that work in all cases, so better return an actual blessed reference.
0.000000,0,0.000000,
0.000000,0,0.000000,As an example, let's implement a C<THAW> function that regenerates the
0.000000,0,0.000000,C<My::Object> from the C<FREEZE> example earlier:
0.000000,0,0.000000,
0.000000,0,0.000000,sub My::Object::THAW {
0.000000,0,0.000000,my ($class, $serializer, $type, $id) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,$class->new (type => $type, id => $id)
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,See the L</SECURITY CONSIDERATIONS> section below. Allowing external
0.000000,0,0.000000,json objects being deserialized to perl objects is usually a very bad
0.000000,0,0.000000,idea.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 ENCODING/CODESET FLAG NOTES
0.000000,0,0.000000,
0.000000,0,0.000000,The interested reader might have seen a number of flags that signify
0.000000,0,0.000000,encodings or codesets - C<utf8>, C<latin1>, C<binary> and
0.000000,0,0.000000,C<ascii>. There seems to be some confusion on what these do, so here
0.000000,0,0.000000,is a short comparison:
0.000000,0,0.000000,
0.000000,0,0.000000,C<utf8> controls whether the JSON text created by C<encode> (and expected
0.000000,0,0.000000,by C<decode>) is UTF-8 encoded or not, while C<latin1> and C<ascii> only
0.000000,0,0.000000,control whether C<encode> escapes character values outside their respective
0.000000,0,0.000000,codeset range. Neither of these flags conflict with each other, although
0.000000,0,0.000000,some combinations make less sense than others.
0.000000,0,0.000000,
0.000000,0,0.000000,Care has been taken to make all flags symmetrical with respect to
0.000000,0,0.000000,C<encode> and C<decode>, that is, texts encoded with any combination of
0.000000,0,0.000000,these flag values will be correctly decoded when the same flags are used
0.000000,0,0.000000,- in general, if you use different flag settings while encoding vs. when
0.000000,0,0.000000,decoding you likely have a bug somewhere.
0.000000,0,0.000000,
0.000000,0,0.000000,Below comes a verbose discussion of these flags. Note that a "codeset" is
0.000000,0,0.000000,simply an abstract set of character-codepoint pairs, while an encoding
0.000000,0,0.000000,takes those codepoint numbers and I<encodes> them, in our case into
0.000000,0,0.000000,octets. Unicode is (among other things) a codeset, UTF-8 is an encoding,
0.000000,0,0.000000,and ISO-8859-1 (= latin 1) and ASCII are both codesets I<and> encodings at
0.000000,0,0.000000,the same time, which can be confusing.
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item C<utf8> flag disabled
0.000000,0,0.000000,
0.000000,0,0.000000,When C<utf8> is disabled (the default), then C<encode>/C<decode> generate
0.000000,0,0.000000,and expect Unicode strings, that is, characters with high ordinal Unicode
0.000000,0,0.000000,values (> 255) will be encoded as such characters, and likewise such
0.000000,0,0.000000,characters are decoded as-is, no changes to them will be done, except
0.000000,0,0.000000,"(re-)interpreting" them as Unicode codepoints or Unicode characters,
0.000000,0,0.000000,respectively (to Perl, these are the same thing in strings unless you do
0.000000,0,0.000000,funny/weird/dumb stuff).
0.000000,0,0.000000,
0.000000,0,0.000000,This is useful when you want to do the encoding yourself (e.g. when you
0.000000,0,0.000000,want to have UTF-16 encoded JSON texts) or when some other layer does
0.000000,0,0.000000,the encoding for you (for example, when printing to a terminal using a
0.000000,0,0.000000,filehandle that transparently encodes to UTF-8 you certainly do NOT want
0.000000,0,0.000000,to UTF-8 encode your data first and have Perl encode it another time).
0.000000,0,0.000000,
0.000000,0,0.000000,=item C<utf8> flag enabled
0.000000,0,0.000000,
0.000000,0,0.000000,If the C<utf8>-flag is enabled, C<encode>/C<decode> will encode all
0.000000,0,0.000000,characters using the corresponding UTF-8 multi-byte sequence, and will
0.000000,0,0.000000,expect your input strings to be encoded as UTF-8, that is, no "character"
0.000000,0,0.000000,of the input string must have any value > 255, as UTF-8 does not allow
0.000000,0,0.000000,that.
0.000000,0,0.000000,
0.000000,0,0.000000,The C<utf8> flag therefore switches between two modes: disabled means you
0.000000,0,0.000000,will get a Unicode string in Perl, enabled means you get an UTF-8 encoded
0.000000,0,0.000000,octet/binary string in Perl.
0.000000,0,0.000000,
0.000000,0,0.000000,=item C<latin1>, C<binary> or C<ascii> flags enabled
0.000000,0,0.000000,
0.000000,0,0.000000,With C<latin1> (or C<ascii>) enabled, C<encode> will escape
0.000000,0,0.000000,characters with ordinal values > 255 (> 127 with C<ascii>) and encode
0.000000,0,0.000000,the remaining characters as specified by the C<utf8> flag.
0.000000,0,0.000000,With C<binary> enabled, ordinal values > 255 are illegal.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<utf8> is disabled, then the result is also correctly encoded in those
0.000000,0,0.000000,character sets (as both are proper subsets of Unicode, meaning that a
0.000000,0,0.000000,Unicode string with all character values < 256 is the same thing as a
0.000000,0,0.000000,ISO-8859-1 string, and a Unicode string with all character values < 128 is
0.000000,0,0.000000,the same thing as an ASCII string in Perl).
0.000000,0,0.000000,
0.000000,0,0.000000,If C<utf8> is enabled, you still get a correct UTF-8-encoded string,
0.000000,0,0.000000,regardless of these flags, just some more characters will be escaped using
0.000000,0,0.000000,C<\uXXXX> then before.
0.000000,0,0.000000,
0.000000,0,0.000000,Note that ISO-8859-1-I<encoded> strings are not compatible with UTF-8
0.000000,0,0.000000,encoding, while ASCII-encoded strings are. That is because the ISO-8859-1
0.000000,0,0.000000,encoding is NOT a subset of UTF-8 (despite the ISO-8859-1 I<codeset> being
0.000000,0,0.000000,a subset of Unicode), while ASCII is.
0.000000,0,0.000000,
0.000000,0,0.000000,Surprisingly, C<decode> will ignore these flags and so treat all input
0.000000,0,0.000000,values as governed by the C<utf8> flag. If it is disabled, this allows you
0.000000,0,0.000000,to decode ISO-8859-1- and ASCII-encoded strings, as both strict subsets of
0.000000,0,0.000000,Unicode. If it is enabled, you can correctly decode UTF-8 encoded strings.
0.000000,0,0.000000,
0.000000,0,0.000000,So neither C<latin1>, C<binary> nor C<ascii> are incompatible with the
0.000000,0,0.000000,C<utf8> flag - they only govern when the JSON output engine escapes a
0.000000,0,0.000000,character or not.
0.000000,0,0.000000,
0.000000,0,0.000000,The main use for C<latin1> or C<binary> is to relatively efficiently
0.000000,0,0.000000,store binary data as JSON, at the expense of breaking compatibility
0.000000,0,0.000000,with most JSON decoders.
0.000000,0,0.000000,
0.000000,0,0.000000,The main use for C<ascii> is to force the output to not contain characters
0.000000,0,0.000000,with values > 127, which means you can interpret the resulting string
0.000000,0,0.000000,as UTF-8, ISO-8859-1, ASCII, KOI8-R or most about any character set and
0.000000,0,0.000000,8-bit-encoding, and still get the same data structure back. This is useful
0.000000,0,0.000000,when your channel for JSON transfer is not 8-bit clean or the encoding
0.000000,0,0.000000,might be mangled in between (e.g. in mail), and works because ASCII is a
0.000000,0,0.000000,proper subset of most 8-bit and multibyte encodings in use in the world.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 JSON and ECMAscript
0.000000,0,0.000000,
0.000000,0,0.000000,JSON syntax is based on how literals are represented in javascript (the
0.000000,0,0.000000,not-standardized predecessor of ECMAscript) which is presumably why it is
0.000000,0,0.000000,called "JavaScript Object Notation".
0.000000,0,0.000000,
0.000000,0,0.000000,However, JSON is not a subset (and also not a superset of course) of
0.000000,0,0.000000,ECMAscript (the standard) or javascript (whatever browsers actually
0.000000,0,0.000000,implement).
0.000000,0,0.000000,
0.000000,0,0.000000,If you want to use javascript's C<eval> function to "parse" JSON, you
0.000000,0,0.000000,might run into parse errors for valid JSON texts, or the resulting data
0.000000,0,0.000000,structure might not be queryable:
0.000000,0,0.000000,
0.000000,0,0.000000,One of the problems is that U+2028 and U+2029 are valid characters inside
0.000000,0,0.000000,JSON strings, but are not allowed in ECMAscript string literals, so the
0.000000,0,0.000000,following Perl fragment will not output something that can be guaranteed
0.000000,0,0.000000,to be parsable by javascript's C<eval>:
0.000000,0,0.000000,
0.000000,0,0.000000,use Cpanel::JSON::XS;
0.000000,0,0.000000,
0.000000,0,0.000000,print encode_json [chr 0x2028];
0.000000,0,0.000000,
0.000000,0,0.000000,The right fix for this is to use a proper JSON parser in your javascript
0.000000,0,0.000000,programs, and not rely on C<eval> (see for example Douglas Crockford's
0.000000,0,0.000000,F<json2.js> parser).
0.000000,0,0.000000,
0.000000,0,0.000000,If this is not an option, you can, as a stop-gap measure, simply encode to
0.000000,0,0.000000,ASCII-only JSON:
0.000000,0,0.000000,
0.000000,0,0.000000,use Cpanel::JSON::XS;
0.000000,0,0.000000,
0.000000,0,0.000000,print Cpanel::JSON::XS->new->ascii->encode ([chr 0x2028]);
0.000000,0,0.000000,
0.000000,0,0.000000,Note that this will enlarge the resulting JSON text quite a bit if you
0.000000,0,0.000000,have many non-ASCII characters. You might be tempted to run some regexes
0.000000,0,0.000000,to only escape U+2028 and U+2029, e.g.:
0.000000,0,0.000000,
0.000000,0,0.000000,# DO NOT USE THIS!
0.000000,0,0.000000,my $json = Cpanel::JSON::XS->new->utf8->encode ([chr 0x2028]);
0.000000,0,0.000000,$json =~ s/\xe2\x80\xa8/\\u2028/g; # escape U+2028
0.000000,0,0.000000,$json =~ s/\xe2\x80\xa9/\\u2029/g; # escape U+2029
0.000000,0,0.000000,print $json;
0.000000,0,0.000000,
0.000000,0,0.000000,Note that I<this is a bad idea>: the above only works for U+2028 and
0.000000,0,0.000000,U+2029 and thus only for fully ECMAscript-compliant parsers. Many existing
0.000000,0,0.000000,javascript implementations, however, have issues with other characters as
0.000000,0,0.000000,well - using C<eval> naively simply I<will> cause problems.
0.000000,0,0.000000,
0.000000,0,0.000000,Another problem is that some javascript implementations reserve
0.000000,0,0.000000,some property names for their own purposes (which probably makes
0.000000,0,0.000000,them non-ECMAscript-compliant). For example, Iceweasel reserves the
0.000000,0,0.000000,C<__proto__> property name for its own purposes.
0.000000,0,0.000000,
0.000000,0,0.000000,If that is a problem, you could parse try to filter the resulting JSON
0.000000,0,0.000000,output for these property strings, e.g.:
0.000000,0,0.000000,
0.000000,0,0.000000,$json =~ s/"__proto__"\s*:/"__proto__renamed":/g;
0.000000,0,0.000000,
0.000000,0,0.000000,This works because C<__proto__> is not valid outside of strings, so every
0.000000,0,0.000000,occurrence of C<"__proto__"\s*:> must be a string used as property name.
0.000000,0,0.000000,
0.000000,0,0.000000,Unicode non-characters between U+FFFD and U+10FFFF are decoded either
0.000000,0,0.000000,to the recommended U+FFFD REPLACEMENT CHARACTER (see Unicode PR #121:
0.000000,0,0.000000,Recommended Practice for Replacement Characters), or in the binary or
0.000000,0,0.000000,relaxed mode left as is, keeping the illegal non-characters as before.
0.000000,0,0.000000,
0.000000,0,0.000000,Raw non-Unicode characters outside the valid unicode range fail now to
0.000000,0,0.000000,parse, because "A string is a sequence of zero or more Unicode
0.000000,0,0.000000,characters" RFC 7159 section 1 and "JSON text SHALL be encoded in
0.000000,0,0.000000,Unicode RFC 7159 section 8.1. We use now the UTF8_DISALLOW_SUPER
0.000000,0,0.000000,flag when parsing unicode.
0.000000,0,0.000000,
0.000000,0,0.000000,If you know of other incompatibilities, please let me know.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 JSON and YAML
0.000000,0,0.000000,
0.000000,0,0.000000,You often hear that JSON is a subset of YAML.  I<in general, there is
0.000000,0,0.000000,no way to configure JSON::XS to output a data structure as valid YAML>
0.000000,0,0.000000,that works in all cases.  If you really must use Cpanel::JSON::XS to
0.000000,0,0.000000,generate YAML, you should use this algorithm (subject to change in
0.000000,0,0.000000,future versions):
0.000000,0,0.000000,
0.000000,0,0.000000,my $to_yaml = Cpanel::JSON::XS->new->utf8->space_after (1);
0.000000,0,0.000000,my $yaml = $to_yaml->encode ($ref) . "\n";
0.000000,0,0.000000,
0.000000,0,0.000000,This will I<usually> generate JSON texts that also parse as valid
0.000000,0,0.000000,YAML.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 SPEED
0.000000,0,0.000000,
0.000000,0,0.000000,It seems that JSON::XS is surprisingly fast, as shown in the following
0.000000,0,0.000000,tables. They have been generated with the help of the C<eg/bench> program
0.000000,0,0.000000,in the JSON::XS distribution, to make it easy to compare on your own
0.000000,0,0.000000,system.
0.000000,0,0.000000,
0.000000,0,0.000000,JSON::XS is with L<Data::MessagePack> and L<Sereal> one of the fastest
0.000000,0,0.000000,serializers, because JSON and JSON::XS do not support backrefs (no
0.000000,0,0.000000,graph structures), only trees. Storable supports backrefs,
0.000000,0,0.000000,i.e. graphs. Data::MessagePack encodes its data binary (as Storable)
0.000000,0,0.000000,and supports only very simple subset of JSON.
0.000000,0,0.000000,
0.000000,0,0.000000,First comes a comparison between various modules using
0.000000,0,0.000000,a very short single-line JSON string (also available at
0.000000,0,0.000000,L<http://dist.schmorp.de/misc/json/short.json>).
0.000000,0,0.000000,
0.000000,0,0.000000,{"method": "handleMessage", "params": ["user1",
0.000000,0,0.000000,"we were just talking"], "id": null, "array":[1,11,234,-5,1e5,1e7,
0.000000,0,0.000000,1,  0]}
0.000000,0,0.000000,
0.000000,0,0.000000,It shows the number of encodes/decodes per second (JSON::XS uses
0.000000,0,0.000000,the functional interface, while Cpanel::JSON::XS/2 uses the OO interface
0.000000,0,0.000000,with pretty-printing and hash key sorting enabled, Cpanel::JSON::XS/3 enables
0.000000,0,0.000000,shrink. JSON::DWIW/DS uses the deserialize function, while JSON::DWIW::FJ
0.000000,0,0.000000,uses the from_json method). Higher is better:
0.000000,0,0.000000,
0.000000,0,0.000000,module        |     encode |     decode |
0.000000,0,0.000000,--------------|------------|------------|
0.000000,0,0.000000,JSON::DWIW/DS |  86302.551 | 102300.098 |
0.000000,0,0.000000,JSON::DWIW/FJ |  86302.551 |  75983.768 |
0.000000,0,0.000000,JSON::PP      |  15827.562 |   6638.658 |
0.000000,0,0.000000,JSON::Syck    |  63358.066 |  47662.545 |
0.000000,0,0.000000,JSON::XS      | 511500.488 | 511500.488 |
0.000000,0,0.000000,JSON::XS/2    | 291271.111 | 388361.481 |
0.000000,0,0.000000,JSON::XS/3    | 361577.931 | 361577.931 |
0.000000,0,0.000000,Storable      |  66788.280 | 265462.278 |
0.000000,0,0.000000,--------------+------------+------------+
0.000000,0,0.000000,
0.000000,0,0.000000,That is, JSON::XS is almost six times faster than JSON::DWIW on encoding,
0.000000,0,0.000000,about five times faster on decoding, and over thirty to seventy times
0.000000,0,0.000000,faster than JSON's pure perl implementation. It also compares favourably
0.000000,0,0.000000,to Storable for small amounts of data.
0.000000,0,0.000000,
0.000000,0,0.000000,Using a longer test string (roughly 18KB, generated from Yahoo! Locals
0.000000,0,0.000000,search API (L<http://dist.schmorp.de/misc/json/long.json>).
0.000000,0,0.000000,
0.000000,0,0.000000,module        |     encode |     decode |
0.000000,0,0.000000,--------------|------------|------------|
0.000000,0,0.000000,JSON::DWIW/DS |   1647.927 |   2673.916 |
0.000000,0,0.000000,JSON::DWIW/FJ |   1630.249 |   2596.128 |
0.000000,0,0.000000,JSON::PP      |    400.640 |     62.311 |
0.000000,0,0.000000,JSON::Syck    |   1481.040 |   1524.869 |
0.000000,0,0.000000,JSON::XS      |  20661.596 |   9541.183 |
0.000000,0,0.000000,JSON::XS/2    |  10683.403 |   9416.938 |
0.000000,0,0.000000,JSON::XS/3    |  20661.596 |   9400.054 |
0.000000,0,0.000000,Storable      |  19765.806 |  10000.725 |
0.000000,0,0.000000,--------------+------------+------------+
0.000000,0,0.000000,
0.000000,0,0.000000,Again, JSON::XS leads by far (except for Storable which non-surprisingly
0.000000,0,0.000000,decodes a bit faster).
0.000000,0,0.000000,
0.000000,0,0.000000,On large strings containing lots of high Unicode characters, some modules
0.000000,0,0.000000,(such as JSON::PC) seem to decode faster than JSON::XS, but the result
0.000000,0,0.000000,will be broken due to missing (or wrong) Unicode handling. Others refuse
0.000000,0,0.000000,to decode or encode properly, so it was impossible to prepare a fair
0.000000,0,0.000000,comparison table for that case.
0.000000,0,0.000000,
0.000000,0,0.000000,For updated graphs see L<https://github.com/Sereal/Sereal/wiki/Sereal-Comparison-Graphs>
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 INTEROP with JSON and JSON::XS and other JSON modules
0.000000,0,0.000000,
0.000000,0,0.000000,As long as you only serialize data that can be directly expressed in
0.000000,0,0.000000,JSON, C<Cpanel::JSON::XS> is incapable of generating invalid JSON
0.000000,0,0.000000,output (modulo bugs, but C<JSON::XS> has found more bugs in the
0.000000,0,0.000000,official JSON testsuite (1) than the official JSON testsuite has found
0.000000,0,0.000000,in C<JSON::XS> (0)).
0.000000,0,0.000000,C<Cpanel::JSON::XS> is currently the only known JSON decoder which passes all
0.000000,0,0.000000,L<http://seriot.ch/parsing_json.html> tests, while being the fastest also.
0.000000,0,0.000000,
0.000000,0,0.000000,When you have trouble decoding JSON generated by this module using other
0.000000,0,0.000000,decoders, then it is very likely that you have an encoding mismatch or the
0.000000,0,0.000000,other decoder is broken.
0.000000,0,0.000000,
0.000000,0,0.000000,When decoding, C<JSON::XS> is strict by default and will likely catch
0.000000,0,0.000000,all errors. There are currently two settings that change this:
0.000000,0,0.000000,C<relaxed> makes C<JSON::XS> accept (but not generate) some
0.000000,0,0.000000,non-standard extensions, and C<allow_tags> or C<allow_blessed> will
0.000000,0,0.000000,allow you to encode and decode Perl objects, at the cost of being
0.000000,0,0.000000,totally insecure and not outputting valid JSON anymore.
0.000000,0,0.000000,
0.000000,0,0.000000,JSON-XS-3.01 broke interoperability with JSON-2.90 with booleans. See L<JSON>.
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS needs to know the JSON and JSON::XS versions to be able work
0.000000,0,0.000000,with those objects, especially when encoding a booleans like C<{"is_true":true}>.
0.000000,0,0.000000,So you need to load these modules before.
0.000000,0,0.000000,
0.000000,0,0.000000,true/false overloading and boolean representations are supported.
0.000000,0,0.000000,
0.000000,0,0.000000,JSON::XS and JSON::PP representations are accepted and older JSON::XS
0.000000,0,0.000000,accepts Cpanel::JSON::XS booleans. All JSON modules JSON, JSON, PP,
0.000000,0,0.000000,JSON::XS, Cpanel::JSON::XS produce JSON::PP::Boolean objects, just
0.000000,0,0.000000,Mojo and JSON::YAJL not.  Mojo produces Mojo::JSON::_Bool and
0.000000,0,0.000000,JSON::YAJL::Parser just an unblessed IV.
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS accepts JSON::PP::Boolean and Mojo::JSON::_Bool
0.000000,0,0.000000,objects as booleans.
0.000000,0,0.000000,
0.000000,0,0.000000,I cannot think of any reason to still use JSON::XS anymore.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 TAGGED VALUE SYNTAX AND STANDARD JSON EN/DECODERS
0.000000,0,0.000000,
0.000000,0,0.000000,When you use C<allow_tags> to use the extended (and also nonstandard
0.000000,0,0.000000,and invalid) JSON syntax for serialized objects, and you still want to
0.000000,0,0.000000,decode the generated serialize objects, you can run a regex to replace
0.000000,0,0.000000,the tagged syntax by standard JSON arrays (it only works for "normal"
0.000000,0,0.000000,package names without comma, newlines or single colons). First, the
0.000000,0,0.000000,readable Perl version:
0.000000,0,0.000000,
0.000000,0,0.000000,# if your FREEZE methods return no values, you need this replace first:
0.000000,0,0.000000,$json =~ s/\( \s* (" (?: [^\\":,]+|\\.|::)* ") \s* \) \s* \[\s*\]/[$1]/gx;
0.000000,0,0.000000,
0.000000,0,0.000000,# this works for non-empty constructor arg lists:
0.000000,0,0.000000,$json =~ s/\( \s* (" (?: [^\\":,]+|\\.|::)* ") \s* \) \s* \[/[$1,/gx;
0.000000,0,0.000000,
0.000000,0,0.000000,And here is a less readable version that is easy to adapt to other
0.000000,0,0.000000,languages:
0.000000,0,0.000000,
0.000000,0,0.000000,$json =~ s/\(\s*("([^\\":,]+|\\.|::)*")\s*\)\s*\[/[$1,/g;
0.000000,0,0.000000,
0.000000,0,0.000000,Here is an ECMAScript version (same regex):
0.000000,0,0.000000,
0.000000,0,0.000000,json = json.replace (/\(\s*("([^\\":,]+|\\.|::)*")\s*\)\s*\[/g, "[$1,");
0.000000,0,0.000000,
0.000000,0,0.000000,Since this syntax converts to standard JSON arrays, it might be hard to
0.000000,0,0.000000,distinguish serialized objects from normal arrays. You can prepend a
0.000000,0,0.000000,"magic number" as first array element to reduce chances of a collision:
0.000000,0,0.000000,
0.000000,0,0.000000,$json =~ s/\(\s*("([^\\":,]+|\\.|::)*")\s*\)\s*\[/["XU1peReLzT4ggEllLanBYq4G9VzliwKF",$1,/g;
0.000000,0,0.000000,
0.000000,0,0.000000,And after decoding the JSON text, you could walk the data
0.000000,0,0.000000,structure looking for arrays with a first element of
0.000000,0,0.000000,C<XU1peReLzT4ggEllLanBYq4G9VzliwKF>.
0.000000,0,0.000000,
0.000000,0,0.000000,The same approach can be used to create the tagged format with another
0.000000,0,0.000000,encoder. First, you create an array with the magic string as first member,
0.000000,0,0.000000,the classname as second, and constructor arguments last, encode it as part
0.000000,0,0.000000,of your JSON structure, and then:
0.000000,0,0.000000,
0.000000,0,0.000000,$json =~ s/\[\s*"XU1peReLzT4ggEllLanBYq4G9VzliwKF"\s*,\s*("([^\\":,]+|\\.|::)*")\s*,/($1)[/g;
0.000000,0,0.000000,
0.000000,0,0.000000,Again, this has some limitations - the magic string must not be encoded
0.000000,0,0.000000,with character escapes, and the constructor arguments must be non-empty.
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 RFC7159
0.000000,0,0.000000,
0.000000,0,0.000000,Since this module was written, Google has written a new JSON RFC, RFC 7159
0.000000,0,0.000000,(and RFC7158). Unfortunately, this RFC breaks compatibility with both the
0.000000,0,0.000000,original JSON specification on www.json.org and RFC4627.
0.000000,0,0.000000,
0.000000,0,0.000000,As far as I can see, you can get partial compatibility when parsing by
0.000000,0,0.000000,using C<< ->allow_nonref >>. However, consider the security implications
0.000000,0,0.000000,of doing so.
0.000000,0,0.000000,
0.000000,0,0.000000,I haven't decided yet when to break compatibility with RFC4627 by default
0.000000,0,0.000000,(and potentially leave applications insecure) and change the default to
0.000000,0,0.000000,follow RFC7159, but application authors are well advised to call C<<
0.000000,0,0.000000,->allow_nonref(0) >> even if this is the current default, if they cannot
0.000000,0,0.000000,handle non-reference values, in preparation for the day when the default
0.000000,0,0.000000,will change.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SECURITY CONSIDERATIONS
0.000000,0,0.000000,
0.000000,0,0.000000,JSON::XS and Cpanel::JSON::XS are not only fast. JSON is generally the
0.000000,0,0.000000,most secure serializing format, because it is the only one besides
0.000000,0,0.000000,Data::MessagePack, which does not deserialize objects per default. For
0.000000,0,0.000000,all languages, not just perl.  The binary variant BSON (MongoDB) does
0.000000,0,0.000000,more but is unsafe.
0.000000,0,0.000000,
0.000000,0,0.000000,It is trivial for any attacker to create such serialized objects in
0.000000,0,0.000000,JSON and trick perl into expanding them, thereby triggering certain
0.000000,0,0.000000,methods. Watch L<https://www.youtube.com/watch?v=Gzx6KlqiIZE> for an
0.000000,0,0.000000,exploit demo for "CVE-2015-1592 SixApart MovableType Storable Perl
0.000000,0,0.000000,Code Execution" for a deserializer which expands objects.
0.000000,0,0.000000,Deserializing even coderefs (methods, functions) or external
0.000000,0,0.000000,data would be considered the most dangerous.
0.000000,0,0.000000,
0.000000,0,0.000000,Security relevant overview of serializers regarding deserializing
0.000000,0,0.000000,objects by default:
0.000000,0,0.000000,
0.000000,0,0.000000,Objects   Coderefs  External Data
0.000000,0,0.000000,
0.000000,0,0.000000,Data::Dumper      YES       YES       YES
0.000000,0,0.000000,Storable          YES       NO (def)  NO
0.000000,0,0.000000,Sereal            YES       NO        NO
0.000000,0,0.000000,YAML              YES       NO        NO
0.000000,0,0.000000,B::C              YES       YES       YES
0.000000,0,0.000000,B::Bytecode       YES       YES       YES
0.000000,0,0.000000,BSON              YES       YES       NO
0.000000,0,0.000000,JSON::SL          YES       NO        YES
0.000000,0,0.000000,JSON              NO (def)  NO        NO
0.000000,0,0.000000,Data::MessagePack NO        NO        NO
0.000000,0,0.000000,XML               NO        NO        YES
0.000000,0,0.000000,
0.000000,0,0.000000,Pickle            YES       YES       YES
0.000000,0,0.000000,PHP Deserialize   YES       NO        NO
0.000000,0,0.000000,
0.000000,0,0.000000,When you are using JSON in a protocol, talking to untrusted potentially
0.000000,0,0.000000,hostile creatures requires relatively few measures.
0.000000,0,0.000000,
0.000000,0,0.000000,First of all, your JSON decoder should be secure, that is, should not have
0.000000,0,0.000000,any buffer overflows. Obviously, this module should ensure that.
0.000000,0,0.000000,
0.000000,0,0.000000,Second, you need to avoid resource-starving attacks. That means you should
0.000000,0,0.000000,limit the size of JSON texts you accept, or make sure then when your
0.000000,0,0.000000,resources run out, that's just fine (e.g. by using a separate process that
0.000000,0,0.000000,can crash safely). The size of a JSON text in octets or characters is
0.000000,0,0.000000,usually a good indication of the size of the resources required to decode
0.000000,0,0.000000,it into a Perl structure. While JSON::XS can check the size of the JSON
0.000000,0,0.000000,text, it might be too late when you already have it in memory, so you
0.000000,0,0.000000,might want to check the size before you accept the string.
0.000000,0,0.000000,
0.000000,0,0.000000,Third, Cpanel::JSON::XS recurses using the C stack when decoding objects and
0.000000,0,0.000000,arrays. The C stack is a limited resource: for instance, on my amd64
0.000000,0,0.000000,machine with 8MB of stack size I can decode around 180k nested arrays but
0.000000,0,0.000000,only 14k nested JSON objects (due to perl itself recursing deeply on croak
0.000000,0,0.000000,to free the temporary). If that is exceeded, the program crashes. To be
0.000000,0,0.000000,conservative, the default nesting limit is set to 512. If your process
0.000000,0,0.000000,has a smaller stack, you should adjust this setting accordingly with the
0.000000,0,0.000000,C<max_depth> method.
0.000000,0,0.000000,
0.000000,0,0.000000,Also keep in mind that Cpanel::JSON::XS might leak contents of your Perl data
0.000000,0,0.000000,structures in its error messages, so when you serialize sensitive
0.000000,0,0.000000,information you might want to make sure that exceptions thrown by JSON::XS
0.000000,0,0.000000,will not end up in front of untrusted eyes.
0.000000,0,0.000000,
0.000000,0,0.000000,If you are using Cpanel::JSON::XS to return packets to consumption
0.000000,0,0.000000,by JavaScript scripts in a browser you should have a look at
0.000000,0,0.000000,L<http://blog.archive.jpsykes.com/47/practical-csrf-and-json-security/> to
0.000000,0,0.000000,see whether you are vulnerable to some common attack vectors (which really
0.000000,0,0.000000,are browser design bugs, but it is still you who will have to deal with
0.000000,0,0.000000,it, as major browser developers care only for features, not about getting
0.000000,0,0.000000,security right). You might also want to also look at L<Mojo::JSON>
0.000000,0,0.000000,special escape rules to prevent from XSS attacks.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 "OLD" VS. "NEW" JSON (RFC 4627 VS. RFC 7159)
0.000000,0,0.000000,
0.000000,0,0.000000,TL;DR: Due to security concerns, Cpanel::JSON::XS will not allow
0.000000,0,0.000000,scalar data in JSON texts by default - you need to create your own
0.000000,0,0.000000,Cpanel::JSON::XS object and enable C<allow_nonref>:
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,my $json = JSON::XS->new->allow_nonref;
0.000000,0,0.000000,
0.000000,0,0.000000,$text = $json->encode ($data);
0.000000,0,0.000000,$data = $json->decode ($text);
0.000000,0,0.000000,
0.000000,0,0.000000,The long version: JSON being an important and supposedly stable format,
0.000000,0,0.000000,the IETF standardized it as RFC 4627 in 2006. Unfortunately the inventor
0.000000,0,0.000000,of JSON Douglas Crockford unilaterally changed the definition of JSON in
0.000000,0,0.000000,javascript. Rather than create a fork, the IETF decided to standardize the
0.000000,0,0.000000,new syntax (apparently, so I as told, without finding it very amusing).
0.000000,0,0.000000,
0.000000,0,0.000000,The biggest difference between the original JSON and the new JSON is that
0.000000,0,0.000000,the new JSON supports scalars (anything other than arrays and objects) at
0.000000,0,0.000000,the top-level of a JSON text. While this is strictly backwards compatible
0.000000,0,0.000000,to older versions, it breaks a number of protocols that relied on sending
0.000000,0,0.000000,JSON back-to-back, and is a minor security concern.
0.000000,0,0.000000,
0.000000,0,0.000000,For example, imagine you have two banks communicating, and on one side,
0.000000,0,0.000000,the JSON coder gets upgraded. Two messages, such as C<10> and C<1000>
0.000000,0,0.000000,might then be confused to mean C<101000>, something that couldn't happen
0.000000,0,0.000000,in the original JSON, because neither of these messages would be valid
0.000000,0,0.000000,JSON.
0.000000,0,0.000000,
0.000000,0,0.000000,If one side accepts these messages, then an upgrade in the coder on either
0.000000,0,0.000000,side could result in this becoming exploitable.
0.000000,0,0.000000,
0.000000,0,0.000000,This module has always allowed these messages as an optional extension, by
0.000000,0,0.000000,default disabled. The security concerns are the reason why the default is
0.000000,0,0.000000,still disabled, but future versions might/will likely upgrade to the newer
0.000000,0,0.000000,RFC as default format, so you are advised to check your implementation
0.000000,0,0.000000,and/or override the default with C<< ->allow_nonref (0) >> to ensure that
0.000000,0,0.000000,future versions are safe.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 THREADS
0.000000,0,0.000000,
0.000000,0,0.000000,Cpanel::JSON::XS has proper ithreads support, unlike JSON::XS. If you
0.000000,0,0.000000,encounter any bugs with thread support please report them.
0.000000,0,0.000000,
0.000000,0,0.000000,From Version 4.00 - 4.19 you couldn't encode true with threads::shared
0.000000,0,0.000000,magic.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 BUGS
0.000000,0,0.000000,
0.000000,0,0.000000,While the goal of the Cpanel::JSON::XS module is to be correct, that
0.000000,0,0.000000,unfortunately does not mean it's bug-free, only that the author thinks
0.000000,0,0.000000,its design is bug-free. If you keep reporting bugs and tests they will
0.000000,0,0.000000,be fixed swiftly, though.
0.000000,0,0.000000,
0.000000,0,0.000000,Since the JSON::XS author refuses to use a public bugtracker and
0.000000,0,0.000000,prefers private emails, we use the tracker at B<github>, so you might want
0.000000,0,0.000000,to report any issues twice. Once in private to MLEHMANN to be fixed in
0.000000,0,0.000000,JSON::XS and one to our the public tracker. Issues fixed by JSON::XS
0.000000,0,0.000000,with a new release will also be backported to Cpanel::JSON::XS and
0.000000,0,0.000000,5.6.2, as long as cPanel relies on 5.6.2 and Cpanel::JSON::XS as our
0.000000,0,0.000000,serializer of choice.
0.000000,0,0.000000,
0.000000,0,0.000000,L<https://github.com/rurban/Cpanel-JSON-XS/issues>
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 LICENSE
0.000000,0,0.000000,
0.000000,0,0.000000,This module is available under the same licences as perl, the Artistic
0.000000,0,0.000000,license and the GPL.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub allow_bigint {
0.000000,0,0.000000,Carp::carp("allow_bigint() is obsoleted. use allow_bignum() instead.");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000000,0,0.000000,package
0.000000,0,0.000000,JSON::PP::Boolean;
0.000000,0,0.000000,
0.000275,1,0.000275,require overload;
0.000000,0,0.000000,
0.000002,1,0.000002,local $^W; # silence redefine warnings. no warnings 'redefine' does not help
0.000000,0,0.000000,# These already come with JSON::PP::Boolean. Avoid redefine warning.
0.000006,1,0.000006,if (!defined $JSON::PP::Boolean::VERSION or $JSON::PP::VERSION lt '4.00') {
0.000000,0,0.000000,&overload::import( 'overload',
0.000000,0,0.000000,"0+"     => sub { ${$_[0]} },
0.000000,0,0.000000,"++"     => sub { $_[0] = ${$_[0]} + 1 },
0.000000,0,0.000000,"--"     => sub { $_[0] = ${$_[0]} - 1 },
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,# workaround 5.6 reserved keyword warning
0.000000,0,0.000000,&overload::import( 'overload',
0.000000,0,0.000000,'""'     => sub { ${$_[0]} == 1 ? '1' : '0' }, # GH 29
0.000000,0,0.000000,'eq'     => sub {
0.000000,0,0.000000,my ($obj, $op) = $_[2] ? ($_[1], $_[0]) : ($_[0], $_[1]);
0.000000,0,0.000000,#warn "eq obj:$obj op:$op len:", length($op) > 0, " swap:$_[2]";
0.000000,0,0.000000,if (ref $op) { # if 2nd also blessed might recurse endlessly
0.000000,0,0.000000,return $obj ? 1 == $op : 0 == $op;
0.000000,0,0.000000,}
0.000000,0,0.000000,# if string, only accept numbers or true|false or "" (e.g. !!0 / SV_NO)
0.000000,0,0.000000,elsif ($op !~ /^[0-9]+$/) {
0.000000,0,0.000000,return "$obj" eq '1' ? 'true' eq $op : 'false' eq $op || "" eq $op;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,return $obj ? 1 == $op : 0 == $op;
0.000000,0,0.000000,}
0.000000,0,0.000000,},
0.000000,0,0.000000,'ne'     => sub {
0.000000,0,0.000000,my ($obj, $op) = $_[2] ? ($_[1], $_[0]) : ($_[0], $_[1]);
0.000000,0,0.000000,#warn "ne obj:$obj op:$op";
0.000000,0,0.000000,return !($obj eq $op);
0.000000,0,0.000000,},
0.000009,1,0.000009,fallback => 1);
0.000090,1,0.000090,}
0.000000,0,0.000000,
0.000000,0,0.000000,our ($true, $false);
0.000000,0,0.000000,BEGIN {
0.000004,1,0.000004,if ($INC{'JSON/XS.pm'}
0.000000,0,0.000000,and $INC{'Types/Serialiser.pm'}
0.000000,0,0.000000,and $JSON::XS::VERSION ge "3.00") {
0.000000,0,0.000000,$true  = $Types::Serialiser::true; # readonly if loaded by JSON::XS
0.000000,0,0.000000,$false = $Types::Serialiser::false;
0.000000,0,0.000000,} else {
0.000001,1,0.000001,$true  = do { bless \(my $dummy = 1), "JSON::PP::Boolean" };
0.000001,1,0.000001,$false = do { bless \(my $dummy = 0), "JSON::PP::Boolean" };
0.000000,0,0.000000,}
0.000061,1,0.000061,}
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000000,1,0.000000,my $const_true  = $true;
0.000000,1,0.000000,my $const_false = $false;
0.000004,1,0.000004,*true  = sub () { $const_true  };
0.000005,1,0.000005,*false = sub () { $const_false };
0.000132,1,0.000132,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub is_bool($) {
0.000000,0,0.000000,shift if @_ == 2; # as method call
0.000000,0,0.000000,(ref($_[0]) and UNIVERSAL::isa( $_[0], JSON::PP::Boolean::))
0.000000,0,0.000000,or (exists $INC{'Types/Serialiser.pm'} and Types::Serialiser::is_bool($_[0]))
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000944,1,0.000944,XSLoader::load 'Cpanel::JSON::XS', $XS_VERSION;
0.000000,0,0.000000,
0.000019,1,0.000019,1;
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SEE ALSO
0.000000,0,0.000000,
0.000000,0,0.000000,The F<cpanel_json_xs> command line utility for quick experiments.
0.000000,0,0.000000,
0.000000,0,0.000000,L<JSON>, L<JSON::XS>, L<JSON::MaybeXS>, L<Mojo::JSON>, L<Mojo::JSON::MaybeXS>,
0.000000,0,0.000000,L<JSON::SL>, L<JSON::DWIW>, L<JSON::YAJL>,  L<JSON::Any>, L<Test::JSON>,
0.000000,0,0.000000,L<Locale::Wolowitz>,
0.000000,0,0.000000,L<https://metacpan.org/search?q=JSON>
0.000000,0,0.000000,
0.000000,0,0.000000,L<https://tools.ietf.org/html/rfc7159>
0.000000,0,0.000000,
0.000000,0,0.000000,L<https://tools.ietf.org/html/rfc4627>
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 AUTHOR
0.000000,0,0.000000,
0.000000,0,0.000000,Reini Urban <rurban@cpan.org>
0.000000,0,0.000000,
0.000000,0,0.000000,Marc Lehmann <schmorp@schmorp.de>, http://home.schmorp.de/
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 MAINTAINER
0.000000,0,0.000000,
0.000000,0,0.000000,Reini Urban <rurban@cpan.org>
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
