# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package File::Spec::Unix;
0.000000,0,0.000000,
0.000019,2,0.000010,use strict;
0.000698,2,0.000349,use Cwd ();
0.000000,0,0.000000,
0.000001,1,0.000001,our $VERSION = '3.84';
0.000006,1,0.000006,$VERSION =~ tr/_//d;
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,File::Spec::Unix - File::Spec for Unix, base for other File::Spec modules
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,require File::Spec::Unix; # Done automatically by File::Spec
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,Methods for manipulating file specifications.  Other File::Spec
0.000000,0,0.000000,modules, such as File::Spec::Mac, inherit from File::Spec::Unix and
0.000000,0,0.000000,override specific methods.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 METHODS
0.000000,0,0.000000,
0.000000,0,0.000000,=over 2
0.000000,0,0.000000,
0.000000,0,0.000000,=item canonpath()
0.000000,0,0.000000,
0.000000,0,0.000000,No physical check on the filesystem, but a logical cleanup of a
0.000000,0,0.000000,path. On UNIX eliminates successive slashes and successive "/.".
0.000000,0,0.000000,
0.000000,0,0.000000,$cpath = File::Spec->canonpath( $path ) ;
0.000000,0,0.000000,
0.000000,0,0.000000,Note that this does *not* collapse F<x/../y> sections into F<y>.  This
0.000000,0,0.000000,is by design.  If F</foo> on your system is a symlink to F</bar/baz>,
0.000000,0,0.000000,then F</foo/../quux> is actually F</bar/quux>, not F</quux> as a naive
0.000000,0,0.000000,F<../>-removal would give you.  If you want to do this kind of
0.000000,0,0.000000,processing, you probably want C<Cwd>'s C<realpath()> function to
0.000000,0,0.000000,actually traverse the filesystem cleaning up paths like this.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub _pp_canonpath {
0.000000,0,0.000000,my ($self,$path) = @_;
0.000000,0,0.000000,return unless defined $path;
0.000000,0,0.000000,
0.000000,0,0.000000,# Handle POSIX-style node names beginning with double slash (qnx, nto)
0.000000,0,0.000000,# (POSIX says: "a pathname that begins with two successive slashes
0.000000,0,0.000000,# may be interpreted in an implementation-defined manner, although
0.000000,0,0.000000,# more than two leading slashes shall be treated as a single slash.")
0.000000,0,0.000000,my $node = '';
0.000000,0,0.000000,my $double_slashes_special = $^O eq 'qnx' || $^O eq 'nto';
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,if ( $double_slashes_special
0.000000,0,0.000000,&& ( $path =~ s{^(//[^/]+)/?\z}{}s || $path =~ s{^(//[^/]+)/}{/}s ) ) {
0.000000,0,0.000000,$node = $1;
0.000000,0,0.000000,}
0.000000,0,0.000000,# This used to be
0.000000,0,0.000000,# $path =~ s|/+|/|g unless ($^O eq 'cygwin');
0.000000,0,0.000000,# but that made tests 29, 30, 35, 46, and 213 (as of #13272) to fail
0.000000,0,0.000000,# (Mainly because trailing "" directories didn't get stripped).
0.000000,0,0.000000,# Why would cygwin avoid collapsing multiple slashes into one? --jhi
0.000000,0,0.000000,$path =~ s|/{2,}|/|g;                            # xx////xx  -> xx/xx
0.000000,0,0.000000,$path =~ s{(?:/\.)+(?:/|\z)}{/}g;                # xx/././xx -> xx/xx
0.000000,0,0.000000,$path =~ s|^(?:\./)+||s unless $path eq "./";    # ./xx      -> xx
0.000000,0,0.000000,$path =~ s|^/(?:\.\./)+|/|;                      # /../../xx -> xx
0.000000,0,0.000000,$path =~ s|^/\.\.$|/|;                         # /..       -> /
0.000000,0,0.000000,$path =~ s|/\z|| unless $path eq "/";          # xx/       -> xx
0.000000,0,0.000000,return "$node$path";
0.000000,0,0.000000,}
0.000001,1,0.000001,*canonpath = \&_pp_canonpath unless defined &canonpath;
0.000000,0,0.000000,
0.000000,0,0.000000,=item catdir()
0.000000,0,0.000000,
0.000000,0,0.000000,Concatenate two or more directory names to form a complete path ending
0.000000,0,0.000000,with a directory. But remove the trailing slash from the resulting
0.000000,0,0.000000,string, because it doesn't look good, isn't necessary and confuses
0.000000,0,0.000000,OS2. Of course, if this is the root directory, don't cut off the
0.000000,0,0.000000,trailing slash :-)
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub _pp_catdir {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,$self->canonpath(join('/', @_, '')); # '' because need a trailing '/'
0.000000,0,0.000000,}
0.000001,1,0.000001,*catdir = \&_pp_catdir unless defined &catdir;
0.000000,0,0.000000,
0.000000,0,0.000000,=item catfile
0.000000,0,0.000000,
0.000000,0,0.000000,Concatenate one or more directory names and a filename to form a
0.000000,0,0.000000,complete path ending with a filename
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub _pp_catfile {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my $file = $self->canonpath(pop @_);
0.000000,0,0.000000,return $file unless @_;
0.000000,0,0.000000,my $dir = $self->catdir(@_);
0.000000,0,0.000000,$dir .= "/" unless substr($dir,-1) eq "/";
0.000000,0,0.000000,return $dir.$file;
0.000000,0,0.000000,}
0.000000,1,0.000000,*catfile = \&_pp_catfile unless defined &catfile;
0.000000,0,0.000000,
0.000000,0,0.000000,=item curdir
0.000000,0,0.000000,
0.000000,0,0.000000,Returns a string representation of the current directory.  "." on UNIX.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub curdir { '.' }
0.000083,2,0.000041,use constant _fn_curdir => ".";
0.000000,0,0.000000,
0.000000,0,0.000000,=item devnull
0.000000,0,0.000000,
0.000000,0,0.000000,Returns a string representation of the null device. "/dev/null" on UNIX.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub devnull { '/dev/null' }
0.000053,2,0.000027,use constant _fn_devnull => "/dev/null";
0.000000,0,0.000000,
0.000000,0,0.000000,=item rootdir
0.000000,0,0.000000,
0.000000,0,0.000000,Returns a string representation of the root directory.  "/" on UNIX.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub rootdir { '/' }
0.000332,2,0.000166,use constant _fn_rootdir => "/";
0.000000,0,0.000000,
0.000000,0,0.000000,=item tmpdir
0.000000,0,0.000000,
0.000000,0,0.000000,Returns a string representation of the first writable directory from
0.000000,0,0.000000,the following list or the current directory if none from the list are
0.000000,0,0.000000,writable:
0.000000,0,0.000000,
0.000000,0,0.000000,$ENV{TMPDIR}
0.000000,0,0.000000,/tmp
0.000000,0,0.000000,
0.000000,0,0.000000,If running under taint mode, and if $ENV{TMPDIR}
0.000000,0,0.000000,is tainted, it is not used.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,1,0.000000,my ($tmpdir, %tmpenv);
0.000000,0,0.000000,# Cache and return the calculated tmpdir, recording which env vars
0.000000,0,0.000000,# determined it.
0.000000,0,0.000000,sub _cache_tmpdir {
0.000000,0,0.000000,@tmpenv{@_[2..$#_]} = @ENV{@_[2..$#_]};
0.000000,0,0.000000,return $tmpdir = $_[1];
0.000000,0,0.000000,}
0.000000,0,0.000000,# Retrieve the cached tmpdir, checking first whether relevant env vars have
0.000000,0,0.000000,# changed and invalidated the cache.
0.000000,0,0.000000,sub _cached_tmpdir {
0.000000,0,0.000000,shift;
0.000000,0,0.000000,local $^W;
0.000000,0,0.000000,return if grep $ENV{$_} ne $tmpenv{$_}, @_;
0.000000,0,0.000000,return $tmpdir;
0.000000,0,0.000000,}
0.000000,0,0.000000,sub _tmpdir {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my @dirlist = @_;
0.000306,2,0.000153,my $taint = do { no strict 'refs'; ${"\cTAINT"} };
0.000000,0,0.000000,if ($taint) { # Check for taint mode on perl >= 5.8.0
0.000000,0,0.000000,require Scalar::Util;
0.000000,0,0.000000,@dirlist = grep { ! Scalar::Util::tainted($_) } @dirlist;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($] < 5.007) { # No ${^TAINT} before 5.8
0.000000,0,0.000000,@dirlist = grep { !defined($_) || eval { eval('1'.substr $_,0,0) } }
0.000000,0,0.000000,@dirlist;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,foreach (@dirlist) {
0.000000,0,0.000000,next unless defined && -d && -w _;
0.000000,0,0.000000,$tmpdir = $_;
0.000000,0,0.000000,last;
0.000000,0,0.000000,}
0.000000,0,0.000000,$tmpdir = $self->curdir unless defined $tmpdir;
0.000000,0,0.000000,$tmpdir = defined $tmpdir && $self->canonpath($tmpdir);
0.000000,0,0.000000,if ( !$self->file_name_is_absolute($tmpdir) ) {
0.000000,0,0.000000,# See [perl #120593] for the full details
0.000000,0,0.000000,# If possible, return a full path, rather than '.' or 'lib', but
0.000000,0,0.000000,# jump through some hoops to avoid returning a tainted value.
0.000000,0,0.000000,($tmpdir) = grep {
0.000000,0,0.000000,$taint     ? ! Scalar::Util::tainted($_) :
0.000000,0,0.000000,$] < 5.007 ? eval { eval('1'.substr $_,0,0) } : 1
0.000000,0,0.000000,} $self->rel2abs($tmpdir), $tmpdir;
0.000000,0,0.000000,}
0.000000,0,0.000000,return $tmpdir;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub tmpdir {
0.000000,0,0.000000,my $cached = $_[0]->_cached_tmpdir('TMPDIR');
0.000000,0,0.000000,return $cached if defined $cached;
0.000000,0,0.000000,$_[0]->_cache_tmpdir($_[0]->_tmpdir( $ENV{TMPDIR}, "/tmp" ), 'TMPDIR');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item updir
0.000000,0,0.000000,
0.000000,0,0.000000,Returns a string representation of the parent directory.  ".." on UNIX.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub updir { '..' }
0.000120,2,0.000060,use constant _fn_updir => "..";
0.000000,0,0.000000,
0.000000,0,0.000000,=item no_upwards
0.000000,0,0.000000,
0.000000,0,0.000000,Given a list of file names, strip out those that refer to a parent
0.000000,0,0.000000,directory. (Does not strip symlinks, only '.', '..', and equivalents.)
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub no_upwards {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,return grep(!/^\.{1,2}\z/s, @_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item case_tolerant
0.000000,0,0.000000,
0.000000,0,0.000000,Returns a true or false value indicating, respectively, that alphabetic
0.000000,0,0.000000,is not or is significant when comparing file specifications.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub case_tolerant { 0 }
0.001190,2,0.000595,use constant _fn_case_tolerant => 0;
0.000000,0,0.000000,
0.000000,0,0.000000,=item file_name_is_absolute
0.000000,0,0.000000,
0.000000,0,0.000000,Takes as argument a path and returns true if it is an absolute path.
0.000000,0,0.000000,
0.000000,0,0.000000,This does not consult the local filesystem on Unix, Win32, OS/2 or Mac 
0.000000,0,0.000000,OS (Classic).  It does consult the working environment for VMS (see
0.000000,0,0.000000,L<File::Spec::VMS/file_name_is_absolute>).
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub file_name_is_absolute {
0.000000,0,0.000000,my ($self,$file) = @_;
0.000000,0,0.000000,return scalar($file =~ m:^/:s);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item path
0.000000,0,0.000000,
0.000000,0,0.000000,Takes no argument, returns the environment variable PATH as an array.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub path {
0.000000,0,0.000000,return () unless exists $ENV{PATH};
0.000000,0,0.000000,my @path = split(':', $ENV{PATH});
0.000000,0,0.000000,foreach (@path) { $_ = '.' if $_ eq '' }
0.000000,0,0.000000,return @path;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item join
0.000000,0,0.000000,
0.000000,0,0.000000,join is the same as catfile.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub join {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,return $self->catfile(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item splitpath
0.000000,0,0.000000,
0.000000,0,0.000000,($volume,$directories,$file) = File::Spec->splitpath( $path );
0.000000,0,0.000000,($volume,$directories,$file) = File::Spec->splitpath( $path,
0.000000,0,0.000000,$no_file );
0.000000,0,0.000000,
0.000000,0,0.000000,Splits a path into volume, directory, and filename portions. On systems
0.000000,0,0.000000,with no concept of volume, returns '' for volume. 
0.000000,0,0.000000,
0.000000,0,0.000000,For systems with no syntax differentiating filenames from directories, 
0.000000,0,0.000000,assumes that the last file is a path unless $no_file is true or a 
0.000000,0,0.000000,trailing separator or /. or /.. is present. On Unix this means that $no_file
0.000000,0,0.000000,true makes this return ( '', $path, '' ).
0.000000,0,0.000000,
0.000000,0,0.000000,The directory portion may or may not be returned with a trailing '/'.
0.000000,0,0.000000,
0.000000,0,0.000000,The results can be passed to L</catpath()> to get back a path equivalent to
0.000000,0,0.000000,(usually identical to) the original path.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub splitpath {
0.000000,0,0.000000,my ($self,$path, $nofile) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my ($volume,$directory,$file) = ('','','');
0.000000,0,0.000000,
0.000000,0,0.000000,if ( $nofile ) {
0.000000,0,0.000000,$directory = $path;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$path =~ m|^ ( (?: .* / (?: \.\.?\z )? )? ) ([^/]*) |xs;
0.000000,0,0.000000,$directory = $1;
0.000000,0,0.000000,$file      = $2;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return ($volume,$directory,$file);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item splitdir
0.000000,0,0.000000,
0.000000,0,0.000000,The opposite of L</catdir()>.
0.000000,0,0.000000,
0.000000,0,0.000000,@dirs = File::Spec->splitdir( $directories );
0.000000,0,0.000000,
0.000000,0,0.000000,$directories must be only the directory portion of the path on systems 
0.000000,0,0.000000,that have the concept of a volume or that have path syntax that differentiates
0.000000,0,0.000000,files from directories.
0.000000,0,0.000000,
0.000000,0,0.000000,Unlike just splitting the directories on the separator, empty
0.000000,0,0.000000,directory names (C<''>) can be returned, because these are significant
0.000000,0,0.000000,on some OSs.
0.000000,0,0.000000,
0.000000,0,0.000000,On Unix,
0.000000,0,0.000000,
0.000000,0,0.000000,File::Spec->splitdir( "/a/b//c/" );
0.000000,0,0.000000,
0.000000,0,0.000000,Yields:
0.000000,0,0.000000,
0.000000,0,0.000000,( '', 'a', 'b', '', 'c', '' )
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub splitdir {
0.000000,0,0.000000,return split m|/|, $_[1], -1;  # Preserve trailing fields
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=item catpath()
0.000000,0,0.000000,
0.000000,0,0.000000,Takes volume, directory and file portions and returns an entire path. Under
0.000000,0,0.000000,Unix, $volume is ignored, and directory and file are concatenated.  A '/' is
0.000000,0,0.000000,inserted if needed (though if the directory portion doesn't start with
0.000000,0,0.000000,'/' it is not added).  On other OSs, $volume is significant.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub catpath {
0.000000,0,0.000000,my ($self,$volume,$directory,$file) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,if ( $directory ne ''                && 
0.000000,0,0.000000,$file ne ''                     && 
0.000000,0,0.000000,substr( $directory, -1 ) ne '/' && 
0.000000,0,0.000000,substr( $file, 0, 1 ) ne '/' 
0.000000,0,0.000000,) {
0.000000,0,0.000000,$directory .= "/$file" ;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$directory .= $file ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return $directory ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item abs2rel
0.000000,0,0.000000,
0.000000,0,0.000000,Takes a destination path and an optional base path returns a relative path
0.000000,0,0.000000,from the base path to the destination path:
0.000000,0,0.000000,
0.000000,0,0.000000,$rel_path = File::Spec->abs2rel( $path ) ;
0.000000,0,0.000000,$rel_path = File::Spec->abs2rel( $path, $base ) ;
0.000000,0,0.000000,
0.000000,0,0.000000,If $base is not present or '', then L<cwd()|Cwd> is used. If $base is
0.000000,0,0.000000,relative, then it is converted to absolute form using
0.000000,0,0.000000,L</rel2abs()>. This means that it is taken to be relative to
0.000000,0,0.000000,L<cwd()|Cwd>.
0.000000,0,0.000000,
0.000000,0,0.000000,On systems that have a grammar that indicates filenames, this ignores the 
0.000000,0,0.000000,$base filename. Otherwise all path components are assumed to be
0.000000,0,0.000000,directories.
0.000000,0,0.000000,
0.000000,0,0.000000,If $path is relative, it is converted to absolute form using L</rel2abs()>.
0.000000,0,0.000000,This means that it is taken to be relative to L<cwd()|Cwd>.
0.000000,0,0.000000,
0.000000,0,0.000000,No checks against the filesystem are made, so the result may not be correct if
0.000000,0,0.000000,C<$base> contains symbolic links.  (Apply
0.000000,0,0.000000,L<Cwd::abs_path()|Cwd/abs_path> beforehand if that
0.000000,0,0.000000,is a concern.)  On VMS, there is interaction with the working environment, as
0.000000,0,0.000000,logicals and macros are expanded.
0.000000,0,0.000000,
0.000000,0,0.000000,Based on code written by Shigio Yamaguchi.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub abs2rel {
0.000000,0,0.000000,my($self,$path,$base) = @_;
0.000000,0,0.000000,$base = Cwd::getcwd() unless defined $base and length $base;
0.000000,0,0.000000,
0.000000,0,0.000000,($path, $base) = map $self->canonpath($_), $path, $base;
0.000000,0,0.000000,
0.000000,0,0.000000,my $path_directories;
0.000000,0,0.000000,my $base_directories;
0.000000,0,0.000000,
0.000000,0,0.000000,if (grep $self->file_name_is_absolute($_), $path, $base) {
0.000000,0,0.000000,($path, $base) = map $self->rel2abs($_), $path, $base;
0.000000,0,0.000000,
0.000000,0,0.000000,my ($path_volume) = $self->splitpath($path, 1);
0.000000,0,0.000000,my ($base_volume) = $self->splitpath($base, 1);
0.000000,0,0.000000,
0.000000,0,0.000000,# Can't relativize across volumes
0.000000,0,0.000000,return $path unless $path_volume eq $base_volume;
0.000000,0,0.000000,
0.000000,0,0.000000,$path_directories = ($self->splitpath($path, 1))[1];
0.000000,0,0.000000,$base_directories = ($self->splitpath($base, 1))[1];
0.000000,0,0.000000,
0.000000,0,0.000000,# For UNC paths, the user might give a volume like //foo/bar that
0.000000,0,0.000000,# strictly speaking has no directory portion.  Treat it as if it
0.000000,0,0.000000,# had the root directory for that volume.
0.000000,0,0.000000,if (!length($base_directories) and $self->file_name_is_absolute($base)) {
0.000000,0,0.000000,$base_directories = $self->rootdir;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,my $wd= ($self->splitpath(Cwd::getcwd(), 1))[1];
0.000000,0,0.000000,$path_directories = $self->catdir($wd, $path);
0.000000,0,0.000000,$base_directories = $self->catdir($wd, $base);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Now, remove all leading components that are the same
0.000000,0,0.000000,my @pathchunks = $self->splitdir( $path_directories );
0.000000,0,0.000000,my @basechunks = $self->splitdir( $base_directories );
0.000000,0,0.000000,
0.000000,0,0.000000,if ($base_directories eq $self->rootdir) {
0.000000,0,0.000000,return $self->curdir if $path_directories eq $self->rootdir;
0.000000,0,0.000000,shift @pathchunks;
0.000000,0,0.000000,return $self->canonpath( $self->catpath('', $self->catdir( @pathchunks ), '') );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my @common;
0.000000,0,0.000000,while (@pathchunks && @basechunks && $self->_same($pathchunks[0], $basechunks[0])) {
0.000000,0,0.000000,push @common, shift @pathchunks ;
0.000000,0,0.000000,shift @basechunks ;
0.000000,0,0.000000,}
0.000000,0,0.000000,return $self->curdir unless @pathchunks || @basechunks;
0.000000,0,0.000000,
0.000000,0,0.000000,# @basechunks now contains the directories the resulting relative path 
0.000000,0,0.000000,# must ascend out of before it can descend to $path_directory.  If there
0.000000,0,0.000000,# are updir components, we must descend into the corresponding directories
0.000000,0,0.000000,# (this only works if they are no symlinks).
0.000000,0,0.000000,my @reverse_base;
0.000000,0,0.000000,while( defined(my $dir= shift @basechunks) ) {
0.000000,0,0.000000,if( $dir ne $self->updir ) {
0.000000,0,0.000000,unshift @reverse_base, $self->updir;
0.000000,0,0.000000,push @common, $dir;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif( @common ) {
0.000000,0,0.000000,if( @reverse_base && $reverse_base[0] eq $self->updir ) {
0.000000,0,0.000000,shift @reverse_base;
0.000000,0,0.000000,pop @common;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,unshift @reverse_base, pop @common;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,my $result_dirs = $self->catdir( @reverse_base, @pathchunks );
0.000000,0,0.000000,return $self->canonpath( $self->catpath('', $result_dirs, '') );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _same {
0.000000,0,0.000000,$_[1] eq $_[2];
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=item rel2abs()
0.000000,0,0.000000,
0.000000,0,0.000000,Converts a relative path to an absolute path. 
0.000000,0,0.000000,
0.000000,0,0.000000,$abs_path = File::Spec->rel2abs( $path ) ;
0.000000,0,0.000000,$abs_path = File::Spec->rel2abs( $path, $base ) ;
0.000000,0,0.000000,
0.000000,0,0.000000,If $base is not present or '', then L<cwd()|Cwd> is used. If $base is
0.000000,0,0.000000,relative, then it is converted to absolute form using
0.000000,0,0.000000,L</rel2abs()>. This means that it is taken to be relative to
0.000000,0,0.000000,L<cwd()|Cwd>.
0.000000,0,0.000000,
0.000000,0,0.000000,On systems that have a grammar that indicates filenames, this ignores
0.000000,0,0.000000,the $base filename. Otherwise all path components are assumed to be
0.000000,0,0.000000,directories.
0.000000,0,0.000000,
0.000000,0,0.000000,If $path is absolute, it is cleaned up and returned using L</canonpath()>.
0.000000,0,0.000000,
0.000000,0,0.000000,No checks against the filesystem are made.  On VMS, there is
0.000000,0,0.000000,interaction with the working environment, as logicals and
0.000000,0,0.000000,macros are expanded.
0.000000,0,0.000000,
0.000000,0,0.000000,Based on code written by Shigio Yamaguchi.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub rel2abs {
0.000000,0,0.000000,my ($self,$path,$base ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# Clean up $path
0.000000,0,0.000000,if ( ! $self->file_name_is_absolute( $path ) ) {
0.000000,0,0.000000,# Figure out the effective $base and clean it up.
0.000000,0,0.000000,if ( !defined( $base ) || $base eq '' ) {
0.000000,0,0.000000,$base = Cwd::getcwd();
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ( ! $self->file_name_is_absolute( $base ) ) {
0.000000,0,0.000000,$base = $self->rel2abs( $base ) ;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$base = $self->canonpath( $base ) ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Glom them together
0.000000,0,0.000000,$path = $self->catdir( $base, $path ) ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->canonpath( $path ) ;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 COPYRIGHT
0.000000,0,0.000000,
0.000000,0,0.000000,Copyright (c) 2004 by the Perl 5 Porters.  All rights reserved.
0.000000,0,0.000000,
0.000000,0,0.000000,This program is free software; you can redistribute it and/or modify
0.000000,0,0.000000,it under the same terms as Perl itself.
0.000000,0,0.000000,
0.000000,0,0.000000,Please submit bug reports at L<https://github.com/Perl/perl5/issues>.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SEE ALSO
0.000000,0,0.000000,
0.000000,0,0.000000,L<File::Spec>
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,# Internal method to reduce xx\..\yy -> yy
0.000000,0,0.000000,sub _collapse {
0.000000,0,0.000000,my($fs, $path) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $updir  = $fs->updir;
0.000000,0,0.000000,my $curdir = $fs->curdir;
0.000000,0,0.000000,
0.000000,0,0.000000,my($vol, $dirs, $file) = $fs->splitpath($path);
0.000000,0,0.000000,my @dirs = $fs->splitdir($dirs);
0.000000,0,0.000000,pop @dirs if @dirs && $dirs[-1] eq '';
0.000000,0,0.000000,
0.000000,0,0.000000,my @collapsed;
0.000000,0,0.000000,foreach my $dir (@dirs) {
0.000000,0,0.000000,if( $dir eq $updir              and   # if we have an updir
0.000000,0,0.000000,@collapsed                  and   # and something to collapse
0.000000,0,0.000000,length $collapsed[-1]       and   # and its not the rootdir
0.000000,0,0.000000,$collapsed[-1] ne $updir    and   # nor another updir
0.000000,0,0.000000,$collapsed[-1] ne $curdir         # nor the curdir
0.000000,0,0.000000,) 
0.000000,0,0.000000,{                                     # then
0.000000,0,0.000000,pop @collapsed;                   # collapse
0.000000,0,0.000000,}
0.000000,0,0.000000,else {                                # else
0.000000,0,0.000000,push @collapsed, $dir;            # just hang onto it
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return $fs->catpath($vol,
0.000000,0,0.000000,$fs->catdir(@collapsed),
0.000000,0,0.000000,$file
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000010,1,0.000010,1;
