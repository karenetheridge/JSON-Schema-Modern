# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000005,2,0.000002,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000001,1,0.000001,my $default_for__5fformat_5fvalidations = ${$_[1]->{"\$default_for__5fformat_5fvalidations"}};
0.000000,1,0.000000,my $isa_check_for__5fformat_5fvalidations = ${$_[1]->{"\$isa_check_for__5fformat_5fvalidations"}};
0.000001,1,0.000001,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000000,0,0.000000,package JSON::Schema::Modern;
0.000065,2,0.000033,no warnings 'closure';
0.000000,0,0.000000,sub _assert__format_validations {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package Method::Generate::Accessor::_Generated;
0.000000,0,0.000000,BEGIN {
0.000001,1,0.000001,$^H = 2018;
0.000001,1,0.000001,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000010,1,0.000010,%^H = (
0.000000,0,0.000000,);
0.000043,1,0.000043,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.000179,64,0.000003,do {
0.000000,0,0.000000,my $val = exists $_[0]->{"_format_validations"} ? 
0.000000,0,0.000000,$_[0]->{"_format_validations"}
0.000065,64,0.000001,:    do {
0.000002,1,0.000002,my $value = $default_for__5fformat_5fvalidations->($_[0]);
0.000996,6,0.000166,do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and (not grep {my $v = ($value)->{$_};not((/\A(?:date\-time|date|time|duration|email|idn\-email|hostname|idn\-hostname|ipv4|ipv6|uri|uri\-reference|iri|iri\-reference|uuid|uri\-template|json\-pointer|relative\-json\-pointer|regex)\z/) or (((!!1)) and (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($v)) and not(grep !/\A(?:type|sub)\z/, keys %{$v}) and exists($v->{"type"}) and (defined($v->{"type"}) and !ref($v->{"type"}) and $v->{"type"} =~ m{\A(?:(?:array|boolean|integer|nu(?:ll|mber)|object|string))\z}) and exists($v->{"sub"}) and do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($v->{"sub"}) } })))} keys %{$value}) and (!exists $value->{"date-time"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"date-time"}) })) and (!exists $value->{"date"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"date"}) })) and (!exists $value->{"time"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"time"}) })) and (!exists $value->{"duration"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"duration"}) })) and (!exists $value->{"email"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"email"}) })) and (!exists $value->{"idn-email"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"idn-email"}) })) and (!exists $value->{"hostname"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"hostname"}) })) and (!exists $value->{"idn-hostname"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"idn-hostname"}) })) and (!exists $value->{"ipv4"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"ipv4"}) })) and (!exists $value->{"ipv6"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"ipv6"}) })) and (!exists $value->{"uri"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"uri"}) })) and (!exists $value->{"uri-reference"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"uri-reference"}) })) and (!exists $value->{"iri"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"iri"}) })) and (!exists $value->{"iri-reference"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"iri-reference"}) })) and (!exists $value->{"uuid"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"uuid"}) })) and (!exists $value->{"uri-template"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"uri-template"}) })) and (!exists $value->{"json-pointer"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"json-pointer"}) })) and (!exists $value->{"relative-json-pointer"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"relative-json-pointer"}) })) and (!exists $value->{"regex"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"regex"}) })) }) or Type::Tiny::_failed_check($isa_check_for__5fformat_5fvalidations, "Dict[date=>Optional[CodeRef],date-time=>Optional[CodeRef],duration=>Optional[CodeRef],email=>Optional[CodeRef],hostname=>Optional[CodeRef],idn-email=>Optional[CodeRef],idn-hostname=>Optional[CodeRef],ipv4=>Optional[CodeRef],ipv6=>Optional[CodeRef],iri=>Optional[CodeRef],iri-reference=>Optional[CodeRef],json-pointer=>Optional[CodeRef],regex=>Optional[CodeRef],relative-json-pointer=>Optional[CodeRef],time=>Optional[CodeRef],uri=>Optional[CodeRef],uri-reference=>Optional[CodeRef],uri-template=>Optional[CodeRef],uuid=>Optional[CodeRef],Slurpy[HashRef[Dict[sub=>CodeRef,type=>Enum[\"null\",\"object\",\"array\",\"boolean\",\"string\",\"number\",\"integer\"]]]]]", $value, "attribute_name","_format_validations","attribute_step","isa check","mgaca","0","varname","\$self->{\"_format_validations\"}"); $value };
0.000001,1,0.000001,$_[0]->{"_format_validations"} = $value
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000027,64,0.000000,exists $_[0]->{"_format_validations"}
0.000000,0,0.000000,or Carp::croak(q{Attempted to access '}."_format_validations".q{' but it is not set});
0.000014,64,0.000000,$val;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000002,1,0.000002,$$_UNQUOTED = \&_assert__format_validations;
0.000000,0,0.000000,}
0.000008,1,0.000008,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
