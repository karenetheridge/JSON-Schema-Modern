# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000031,2,0.000016,use strict;
0.000059,2,0.000029,use warnings;
0.000000,0,0.000000,package YAML::PP::Exception;
0.000000,0,0.000000,
0.000001,1,0.000001,our $VERSION = '0.035'; # VERSION
0.000000,0,0.000000,
0.000352,2,0.000176,use overload '""' => \&to_string;
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,my ($class, %args) = @_;
0.000000,0,0.000000,my $self = bless {
0.000000,0,0.000000,line => $args{line},
0.000000,0,0.000000,msg => $args{msg},
0.000000,0,0.000000,next => $args{next},
0.000000,0,0.000000,where => $args{where},
0.000000,0,0.000000,yaml => $args{yaml},
0.000000,0,0.000000,got => $args{got},
0.000000,0,0.000000,expected => $args{expected},
0.000000,0,0.000000,column => $args{column},
0.000000,0,0.000000,}, $class;
0.000000,0,0.000000,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub to_string {
0.000000,0,0.000000,my ($self) = @_;
0.000000,0,0.000000,my $next = $self->{next};
0.000000,0,0.000000,my $line = $self->{line};
0.000000,0,0.000000,my $column = $self->{column};
0.000000,0,0.000000,
0.000000,0,0.000000,my $yaml = '';
0.000000,0,0.000000,for my $token (@$next) {
0.000000,0,0.000000,last if $token->{name} eq 'EOL';
0.000000,0,0.000000,$yaml .= $token->{value};
0.000000,0,0.000000,}
0.000000,0,0.000000,$column = '???' unless defined $column;
0.000000,0,0.000000,
0.000000,0,0.000000,my $remaining_yaml = $self->{yaml};
0.000000,0,0.000000,$remaining_yaml = '' unless defined $remaining_yaml;
0.000000,0,0.000000,$yaml .= $remaining_yaml;
0.000000,0,0.000000,{
0.000000,0,0.000000,local $@; # avoid bug in old Data::Dumper
0.000000,0,0.000000,require Data::Dumper;
0.000000,0,0.000000,local $Data::Dumper::Useqq = 1;
0.000000,0,0.000000,local $Data::Dumper::Terse = 1;
0.000000,0,0.000000,$yaml = Data::Dumper->Dump([$yaml], ['yaml']);
0.000000,0,0.000000,chomp $yaml;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $lines = 5;
0.000000,0,0.000000,my @fields;
0.000000,0,0.000000,
0.000000,0,0.000000,if ($self->{got} and $self->{expected}) {
0.000000,0,0.000000,$lines = 6;
0.000000,0,0.000000,$line = $self->{got}->{line};
0.000000,0,0.000000,$column = $self->{got}->{column} + 1;
0.000000,0,0.000000,@fields = (
0.000000,0,0.000000,"Line" => $line,
0.000000,0,0.000000,"Column" => $column,
0.000000,0,0.000000,"Expected", join(" ", @{ $self->{expected} }),
0.000000,0,0.000000,"Got", $self->{got}->{name},
0.000000,0,0.000000,"Where", $self->{where},
0.000000,0,0.000000,"YAML", $yaml,
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,@fields = (
0.000000,0,0.000000,"Line" => $line,
0.000000,0,0.000000,"Column" => $column,
0.000000,0,0.000000,"Message", $self->{msg},
0.000000,0,0.000000,"Where", $self->{where},
0.000000,0,0.000000,"YAML", $yaml,
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,my $fmt = join "\n", ("%-10s: %s") x $lines;
0.000000,0,0.000000,my $string = sprintf $fmt, @fields;
0.000000,0,0.000000,return $string;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
