# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moo::Object;
0.000040,2,0.000020,use strict;
0.000038,2,0.000019,use warnings;
0.000000,0,0.000000,
0.000387,2,0.000193,use Carp ();
0.000000,0,0.000000,
0.000000,0,0.000000,our %NO_BUILD;
0.000000,0,0.000000,our %NO_DEMOLISH;
0.000000,0,0.000000,our $BUILD_MAKER;
0.000000,0,0.000000,our $DEMOLISH_MAKER;
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000009,21,0.000000,my $class = shift;
0.000020,21,0.000001,unless (exists $NO_DEMOLISH{$class}) {
0.000040,2,0.000020,unless ($NO_DEMOLISH{$class} = !$class->can('DEMOLISH')) {
0.000000,0,0.000000,($DEMOLISH_MAKER ||= do {
0.000000,0,0.000000,require Method::Generate::DemolishAll;
0.000000,0,0.000000,Method::Generate::DemolishAll->new
0.000000,0,0.000000,})->generate_method($class);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000057,21,0.000003,my $proto = $class->BUILDARGS(@_);
0.000084,21,0.000004,$NO_BUILD{$class} and
0.000000,0,0.000000,return bless({}, $class);
0.000012,2,0.000006,$NO_BUILD{$class} = !$class->can('BUILD') unless exists $NO_BUILD{$class};
0.000010,2,0.000005,$NO_BUILD{$class}
0.000000,0,0.000000,? bless({}, $class)
0.000000,0,0.000000,: bless({}, $class)->BUILDALL($proto);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Inlined into Method::Generate::Constructor::_generate_args() - keep in sync
0.000000,0,0.000000,sub BUILDARGS {
0.000008,24,0.000000,my $class = shift;
0.000000,0,0.000000,scalar @_ == 1
0.000000,0,0.000000,? ref $_[0] eq 'HASH'
0.000116,24,0.000005,? { %{ $_[0] } }
0.000000,0,0.000000,: Carp::croak("Single parameters to new() must be a HASH ref"
0.000000,0,0.000000,. " data => ". $_[0])
0.000000,0,0.000000,: @_ % 2
0.000000,0,0.000000,? Carp::croak("The new() method for $class expects a hash reference or a"
0.000000,0,0.000000,. " key/value list. You passed an odd number of arguments")
0.000000,0,0.000000,: {@_}
0.000000,0,0.000000,;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub BUILDALL {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,$self->${\(($BUILD_MAKER ||= do {
0.000000,0,0.000000,require Method::Generate::BuildAll;
0.000000,0,0.000000,Method::Generate::BuildAll->new
0.000000,0,0.000000,})->generate_method(ref($self)))}(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub DEMOLISHALL {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,$self->${\(($DEMOLISH_MAKER ||= do {
0.000000,0,0.000000,require Method::Generate::DemolishAll;
0.000000,0,0.000000,Method::Generate::DemolishAll->new
0.000000,0,0.000000,})->generate_method(ref($self)))}(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub does {
0.000000,0,0.000000,return !!0
0.000003,1,0.000003,unless ($INC{'Moose/Role.pm'} || $INC{'Role/Tiny.pm'});
0.000001,1,0.000001,require Moo::Role;
0.000013,1,0.000013,my $does = Moo::Role->can("does_role");
0.000165,4,0.000041,{ no warnings 'redefine'; *does = $does }
0.000007,1,0.000007,goto &$does;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# duplicated in Moo::Role
0.000000,0,0.000000,sub meta {
0.000000,0,0.000000,require Moo::HandleMoose::FakeMetaClass;
0.000000,0,0.000000,my $class = ref($_[0])||$_[0];
0.000000,0,0.000000,bless({ name => $class }, 'Moo::HandleMoose::FakeMetaClass');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,1;
