# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Pod::Escapes;
0.000035,2,0.000017,use strict;
0.000027,2,0.000013,use warnings;
0.000071,2,0.000035,use 5.006;
0.000000,0,0.000000,
0.000001,1,0.000001,use vars qw(
0.000000,0,0.000000,%Code2USASCII
0.000000,0,0.000000,%Name2character
0.000000,0,0.000000,%Name2character_number
0.000000,0,0.000000,%Latin1Code_to_fallback
0.000000,0,0.000000,%Latin1Char_to_fallback
0.000000,0,0.000000,$FAR_CHAR
0.000000,0,0.000000,$FAR_CHAR_NUMBER
0.000000,0,0.000000,$NOT_ASCII
0.000000,0,0.000000,@ISA $VERSION @EXPORT_OK %EXPORT_TAGS
0.001461,1,0.001461,);
0.000000,0,0.000000,
0.000001,1,0.000001,require Exporter;
0.000012,1,0.000012,@ISA = ('Exporter');
0.000001,1,0.000001,$VERSION = '1.07';
0.000001,1,0.000001,@EXPORT_OK = qw(
0.000000,0,0.000000,%Code2USASCII
0.000000,0,0.000000,%Name2character
0.000000,0,0.000000,%Name2character_number
0.000000,0,0.000000,%Latin1Code_to_fallback
0.000000,0,0.000000,%Latin1Char_to_fallback
0.000000,0,0.000000,e2char
0.000000,0,0.000000,e2charnum
0.000000,0,0.000000,);
0.000002,1,0.000002,%EXPORT_TAGS = ('ALL' => \@EXPORT_OK);
0.000000,0,0.000000,
0.000000,0,0.000000,#==========================================================================
0.000000,0,0.000000,
0.000000,1,0.000000,$FAR_CHAR = "?" unless defined $FAR_CHAR;
0.000001,1,0.000001,$FAR_CHAR_NUMBER = ord($FAR_CHAR) unless defined $FAR_CHAR_NUMBER;
0.000000,0,0.000000,
0.000000,1,0.000000,$NOT_ASCII = 'A' ne chr(65) unless defined $NOT_ASCII;
0.000000,0,0.000000,
0.000000,0,0.000000,#--------------------------------------------------------------------------
0.000000,0,0.000000,sub e2char {
0.000000,0,0.000000,my $in = $_[0];
0.000000,0,0.000000,return undef unless defined $in and length $in;
0.000000,0,0.000000,
0.000000,0,0.000000,# Convert to decimal:
0.000000,0,0.000000,if($in =~ m/^(0[0-7]*)$/s ) {
0.000000,0,0.000000,$in = oct $in;
0.000000,0,0.000000,} elsif($in =~ m/^0?x([0-9a-fA-F]+)$/s ) {
0.000000,0,0.000000,$in = hex $1;
0.000000,0,0.000000,} # else it's decimal, or named
0.000000,0,0.000000,
0.000000,0,0.000000,if($in =~ m/^\d+$/s) {
0.000000,0,0.000000,if($] < 5.007  and  $in > 255) { # can't be trusted with Unicode
0.000000,0,0.000000,return $FAR_CHAR;
0.000000,0,0.000000,} elsif ($] >= 5.007003) {
0.000000,0,0.000000,return chr(utf8::unicode_to_native($in));
0.000000,0,0.000000,} elsif ($NOT_ASCII) {
0.000000,0,0.000000,return $Code2USASCII{$in} # so "65" => "A" everywhere
0.000000,0,0.000000,|| $Latin1Code_to_fallback{$in} # Fallback.
0.000000,0,0.000000,|| $FAR_CHAR; # Fall further back
0.000000,0,0.000000,} else {
0.000000,0,0.000000,return chr($in);
0.000000,0,0.000000,}
0.000000,0,0.000000,} else {
0.000000,0,0.000000,return $Name2character{$in}; # returns undef if unknown
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#--------------------------------------------------------------------------
0.000000,0,0.000000,sub e2charnum {
0.000000,0,0.000000,my $in = $_[0];
0.000000,0,0.000000,return undef unless defined $in and length $in;
0.000000,0,0.000000,
0.000000,0,0.000000,# Convert to decimal:
0.000000,0,0.000000,if($in =~ m/^(0[0-7]*)$/s ) {
0.000000,0,0.000000,$in = oct $in;
0.000000,0,0.000000,} elsif($in =~ m/^0?x([0-9a-fA-F]+)$/s ) {
0.000000,0,0.000000,$in = hex $1;
0.000000,0,0.000000,} # else it's decimal, or named
0.000000,0,0.000000,
0.000000,0,0.000000,if($in =~ m/^[0-9]+$/s) {
0.000000,0,0.000000,return 0 + $in;
0.000000,0,0.000000,} else {
0.000000,0,0.000000,return $Name2character_number{$in}; # returns undef if unknown
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#--------------------------------------------------------------------------
0.000000,0,0.000000,
0.000054,1,0.000054,%Code2USASCII = (
0.000000,0,0.000000,# mostly generated by
0.000000,0,0.000000,#  perl -e "printf qq{  \x25 3s, '\x25s',\n}, $_, chr($_) foreach (32 .. 126)"
0.000000,0,0.000000,32, ' ',
0.000000,0,0.000000,33, '!',
0.000000,0,0.000000,34, '"',
0.000000,0,0.000000,35, '#',
0.000000,0,0.000000,36, '$',
0.000000,0,0.000000,37, '%',
0.000000,0,0.000000,38, '&',
0.000000,0,0.000000,39, "'", #!
0.000000,0,0.000000,40, '(',
0.000000,0,0.000000,41, ')',
0.000000,0,0.000000,42, '*',
0.000000,0,0.000000,43, '+',
0.000000,0,0.000000,44, ',',
0.000000,0,0.000000,45, '-',
0.000000,0,0.000000,46, '.',
0.000000,0,0.000000,47, '/',
0.000000,0,0.000000,48, '0',
0.000000,0,0.000000,49, '1',
0.000000,0,0.000000,50, '2',
0.000000,0,0.000000,51, '3',
0.000000,0,0.000000,52, '4',
0.000000,0,0.000000,53, '5',
0.000000,0,0.000000,54, '6',
0.000000,0,0.000000,55, '7',
0.000000,0,0.000000,56, '8',
0.000000,0,0.000000,57, '9',
0.000000,0,0.000000,58, ':',
0.000000,0,0.000000,59, ';',
0.000000,0,0.000000,60, '<',
0.000000,0,0.000000,61, '=',
0.000000,0,0.000000,62, '>',
0.000000,0,0.000000,63, '?',
0.000000,0,0.000000,64, '@',
0.000000,0,0.000000,65, 'A',
0.000000,0,0.000000,66, 'B',
0.000000,0,0.000000,67, 'C',
0.000000,0,0.000000,68, 'D',
0.000000,0,0.000000,69, 'E',
0.000000,0,0.000000,70, 'F',
0.000000,0,0.000000,71, 'G',
0.000000,0,0.000000,72, 'H',
0.000000,0,0.000000,73, 'I',
0.000000,0,0.000000,74, 'J',
0.000000,0,0.000000,75, 'K',
0.000000,0,0.000000,76, 'L',
0.000000,0,0.000000,77, 'M',
0.000000,0,0.000000,78, 'N',
0.000000,0,0.000000,79, 'O',
0.000000,0,0.000000,80, 'P',
0.000000,0,0.000000,81, 'Q',
0.000000,0,0.000000,82, 'R',
0.000000,0,0.000000,83, 'S',
0.000000,0,0.000000,84, 'T',
0.000000,0,0.000000,85, 'U',
0.000000,0,0.000000,86, 'V',
0.000000,0,0.000000,87, 'W',
0.000000,0,0.000000,88, 'X',
0.000000,0,0.000000,89, 'Y',
0.000000,0,0.000000,90, 'Z',
0.000000,0,0.000000,91, '[',
0.000000,0,0.000000,92, "\\", #!
0.000000,0,0.000000,93, ']',
0.000000,0,0.000000,94, '^',
0.000000,0,0.000000,95, '_',
0.000000,0,0.000000,96, '`',
0.000000,0,0.000000,97, 'a',
0.000000,0,0.000000,98, 'b',
0.000000,0,0.000000,99, 'c',
0.000000,0,0.000000,100, 'd',
0.000000,0,0.000000,101, 'e',
0.000000,0,0.000000,102, 'f',
0.000000,0,0.000000,103, 'g',
0.000000,0,0.000000,104, 'h',
0.000000,0,0.000000,105, 'i',
0.000000,0,0.000000,106, 'j',
0.000000,0,0.000000,107, 'k',
0.000000,0,0.000000,108, 'l',
0.000000,0,0.000000,109, 'm',
0.000000,0,0.000000,110, 'n',
0.000000,0,0.000000,111, 'o',
0.000000,0,0.000000,112, 'p',
0.000000,0,0.000000,113, 'q',
0.000000,0,0.000000,114, 'r',
0.000000,0,0.000000,115, 's',
0.000000,0,0.000000,116, 't',
0.000000,0,0.000000,117, 'u',
0.000000,0,0.000000,118, 'v',
0.000000,0,0.000000,119, 'w',
0.000000,0,0.000000,120, 'x',
0.000000,0,0.000000,121, 'y',
0.000000,0,0.000000,122, 'z',
0.000000,0,0.000000,123, '{',
0.000000,0,0.000000,124, '|',
0.000000,0,0.000000,125, '}',
0.000000,0,0.000000,126, '~',
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,#--------------------------------------------------------------------------
0.000000,0,0.000000,
0.000000,1,0.000000,%Latin1Code_to_fallback = ();
0.000066,1,0.000066,@Latin1Code_to_fallback{0xA0 .. 0xFF} = (
0.000000,0,0.000000,# Copied from Text/Unidecode/x00.pm:
0.000000,0,0.000000,
0.000000,0,0.000000,' ', qq{!}, qq{C/}, 'PS', qq{\$?}, qq{Y=}, qq{|}, 'SS', qq{"}, qq{(c)}, 'a', qq{<<}, qq{!}, "", qq{(r)}, qq{-},
0.000000,0,0.000000,'deg', qq{+-}, '2', '3', qq{'}, 'u', 'P', qq{*}, qq{,}, '1', 'o', qq{>>}, qq{1/4}, qq{1/2}, qq{3/4}, qq{?},
0.000000,0,0.000000,'A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I',
0.000000,0,0.000000,'D', 'N', 'O', 'O', 'O', 'O', 'O', 'x', 'O', 'U', 'U', 'U', 'U', 'U', 'Th', 'ss',
0.000000,0,0.000000,'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i',
0.000000,0,0.000000,'d', 'n', 'o', 'o', 'o', 'o', 'o', qq{/}, 'o', 'u', 'u', 'u', 'u', 'y', 'th', 'y',
0.000000,0,0.000000,
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,{
0.000000,0,0.000000,# Now stuff %Latin1Char_to_fallback:
0.000000,2,0.000000,%Latin1Char_to_fallback = ();
0.000000,1,0.000000,my($k,$v);
0.000001,1,0.000001,while( ($k,$v) = each %Latin1Code_to_fallback) {
0.000102,96,0.000001,$Latin1Char_to_fallback{chr $k} = $v;
0.000000,0,0.000000,#print chr($k), ' => ', $v, "\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#--------------------------------------------------------------------------
0.000000,0,0.000000,
0.000000,0,0.000000,%Name2character_number = (
0.000000,0,0.000000,# General XML/XHTML:
0.000106,1,0.000106,'lt'   => 60,
0.000000,0,0.000000,'gt'   => 62,
0.000000,0,0.000000,'quot' => 34,
0.000000,0,0.000000,'amp'  => 38,
0.000000,0,0.000000,'apos' => 39,
0.000000,0,0.000000,
0.000000,0,0.000000,# POD-specific:
0.000000,0,0.000000,'sol'    => 47,
0.000000,0,0.000000,'verbar' => 124,
0.000000,0,0.000000,
0.000000,0,0.000000,'lchevron' => 171, # legacy for laquo
0.000000,0,0.000000,'rchevron' => 187, # legacy for raquo
0.000000,0,0.000000,
0.000000,0,0.000000,# Remember, grave looks like \ (as in virtu\)
0.000000,0,0.000000,#           acute looks like / (as in re/sume/)
0.000000,0,0.000000,#           circumflex looks like ^ (as in papier ma^che/)
0.000000,0,0.000000,#           umlaut/dieresis looks like " (as in nai"ve, Chloe")
0.000000,0,0.000000,
0.000000,0,0.000000,# From the XHTML 1 .ent files:
0.000000,0,0.000000,'nbsp'     , 160,
0.000000,0,0.000000,'iexcl'    , 161,
0.000000,0,0.000000,'cent'     , 162,
0.000000,0,0.000000,'pound'    , 163,
0.000000,0,0.000000,'curren'   , 164,
0.000000,0,0.000000,'yen'      , 165,
0.000000,0,0.000000,'brvbar'   , 166,
0.000000,0,0.000000,'sect'     , 167,
0.000000,0,0.000000,'uml'      , 168,
0.000000,0,0.000000,'copy'     , 169,
0.000000,0,0.000000,'ordf'     , 170,
0.000000,0,0.000000,'laquo'    , 171,
0.000000,0,0.000000,'not'      , 172,
0.000000,0,0.000000,'shy'      , 173,
0.000000,0,0.000000,'reg'      , 174,
0.000000,0,0.000000,'macr'     , 175,
0.000000,0,0.000000,'deg'      , 176,
0.000000,0,0.000000,'plusmn'   , 177,
0.000000,0,0.000000,'sup2'     , 178,
0.000000,0,0.000000,'sup3'     , 179,
0.000000,0,0.000000,'acute'    , 180,
0.000000,0,0.000000,'micro'    , 181,
0.000000,0,0.000000,'para'     , 182,
0.000000,0,0.000000,'middot'   , 183,
0.000000,0,0.000000,'cedil'    , 184,
0.000000,0,0.000000,'sup1'     , 185,
0.000000,0,0.000000,'ordm'     , 186,
0.000000,0,0.000000,'raquo'    , 187,
0.000000,0,0.000000,'frac14'   , 188,
0.000000,0,0.000000,'frac12'   , 189,
0.000000,0,0.000000,'frac34'   , 190,
0.000000,0,0.000000,'iquest'   , 191,
0.000000,0,0.000000,'Agrave'   , 192,
0.000000,0,0.000000,'Aacute'   , 193,
0.000000,0,0.000000,'Acirc'    , 194,
0.000000,0,0.000000,'Atilde'   , 195,
0.000000,0,0.000000,'Auml'     , 196,
0.000000,0,0.000000,'Aring'    , 197,
0.000000,0,0.000000,'AElig'    , 198,
0.000000,0,0.000000,'Ccedil'   , 199,
0.000000,0,0.000000,'Egrave'   , 200,
0.000000,0,0.000000,'Eacute'   , 201,
0.000000,0,0.000000,'Ecirc'    , 202,
0.000000,0,0.000000,'Euml'     , 203,
0.000000,0,0.000000,'Igrave'   , 204,
0.000000,0,0.000000,'Iacute'   , 205,
0.000000,0,0.000000,'Icirc'    , 206,
0.000000,0,0.000000,'Iuml'     , 207,
0.000000,0,0.000000,'ETH'      , 208,
0.000000,0,0.000000,'Ntilde'   , 209,
0.000000,0,0.000000,'Ograve'   , 210,
0.000000,0,0.000000,'Oacute'   , 211,
0.000000,0,0.000000,'Ocirc'    , 212,
0.000000,0,0.000000,'Otilde'   , 213,
0.000000,0,0.000000,'Ouml'     , 214,
0.000000,0,0.000000,'times'    , 215,
0.000000,0,0.000000,'Oslash'   , 216,
0.000000,0,0.000000,'Ugrave'   , 217,
0.000000,0,0.000000,'Uacute'   , 218,
0.000000,0,0.000000,'Ucirc'    , 219,
0.000000,0,0.000000,'Uuml'     , 220,
0.000000,0,0.000000,'Yacute'   , 221,
0.000000,0,0.000000,'THORN'    , 222,
0.000000,0,0.000000,'szlig'    , 223,
0.000000,0,0.000000,'agrave'   , 224,
0.000000,0,0.000000,'aacute'   , 225,
0.000000,0,0.000000,'acirc'    , 226,
0.000000,0,0.000000,'atilde'   , 227,
0.000000,0,0.000000,'auml'     , 228,
0.000000,0,0.000000,'aring'    , 229,
0.000000,0,0.000000,'aelig'    , 230,
0.000000,0,0.000000,'ccedil'   , 231,
0.000000,0,0.000000,'egrave'   , 232,
0.000000,0,0.000000,'eacute'   , 233,
0.000000,0,0.000000,'ecirc'    , 234,
0.000000,0,0.000000,'euml'     , 235,
0.000000,0,0.000000,'igrave'   , 236,
0.000000,0,0.000000,'iacute'   , 237,
0.000000,0,0.000000,'icirc'    , 238,
0.000000,0,0.000000,'iuml'     , 239,
0.000000,0,0.000000,'eth'      , 240,
0.000000,0,0.000000,'ntilde'   , 241,
0.000000,0,0.000000,'ograve'   , 242,
0.000000,0,0.000000,'oacute'   , 243,
0.000000,0,0.000000,'ocirc'    , 244,
0.000000,0,0.000000,'otilde'   , 245,
0.000000,0,0.000000,'ouml'     , 246,
0.000000,0,0.000000,'divide'   , 247,
0.000000,0,0.000000,'oslash'   , 248,
0.000000,0,0.000000,'ugrave'   , 249,
0.000000,0,0.000000,'uacute'   , 250,
0.000000,0,0.000000,'ucirc'    , 251,
0.000000,0,0.000000,'uuml'     , 252,
0.000000,0,0.000000,'yacute'   , 253,
0.000000,0,0.000000,'thorn'    , 254,
0.000000,0,0.000000,'yuml'     , 255,
0.000000,0,0.000000,
0.000000,0,0.000000,'fnof'     , 402,
0.000000,0,0.000000,'Alpha'    , 913,
0.000000,0,0.000000,'Beta'     , 914,
0.000000,0,0.000000,'Gamma'    , 915,
0.000000,0,0.000000,'Delta'    , 916,
0.000000,0,0.000000,'Epsilon'  , 917,
0.000000,0,0.000000,'Zeta'     , 918,
0.000000,0,0.000000,'Eta'      , 919,
0.000000,0,0.000000,'Theta'    , 920,
0.000000,0,0.000000,'Iota'     , 921,
0.000000,0,0.000000,'Kappa'    , 922,
0.000000,0,0.000000,'Lambda'   , 923,
0.000000,0,0.000000,'Mu'       , 924,
0.000000,0,0.000000,'Nu'       , 925,
0.000000,0,0.000000,'Xi'       , 926,
0.000000,0,0.000000,'Omicron'  , 927,
0.000000,0,0.000000,'Pi'       , 928,
0.000000,0,0.000000,'Rho'      , 929,
0.000000,0,0.000000,'Sigma'    , 931,
0.000000,0,0.000000,'Tau'      , 932,
0.000000,0,0.000000,'Upsilon'  , 933,
0.000000,0,0.000000,'Phi'      , 934,
0.000000,0,0.000000,'Chi'      , 935,
0.000000,0,0.000000,'Psi'      , 936,
0.000000,0,0.000000,'Omega'    , 937,
0.000000,0,0.000000,'alpha'    , 945,
0.000000,0,0.000000,'beta'     , 946,
0.000000,0,0.000000,'gamma'    , 947,
0.000000,0,0.000000,'delta'    , 948,
0.000000,0,0.000000,'epsilon'  , 949,
0.000000,0,0.000000,'zeta'     , 950,
0.000000,0,0.000000,'eta'      , 951,
0.000000,0,0.000000,'theta'    , 952,
0.000000,0,0.000000,'iota'     , 953,
0.000000,0,0.000000,'kappa'    , 954,
0.000000,0,0.000000,'lambda'   , 955,
0.000000,0,0.000000,'mu'       , 956,
0.000000,0,0.000000,'nu'       , 957,
0.000000,0,0.000000,'xi'       , 958,
0.000000,0,0.000000,'omicron'  , 959,
0.000000,0,0.000000,'pi'       , 960,
0.000000,0,0.000000,'rho'      , 961,
0.000000,0,0.000000,'sigmaf'   , 962,
0.000000,0,0.000000,'sigma'    , 963,
0.000000,0,0.000000,'tau'      , 964,
0.000000,0,0.000000,'upsilon'  , 965,
0.000000,0,0.000000,'phi'      , 966,
0.000000,0,0.000000,'chi'      , 967,
0.000000,0,0.000000,'psi'      , 968,
0.000000,0,0.000000,'omega'    , 969,
0.000000,0,0.000000,'thetasym' , 977,
0.000000,0,0.000000,'upsih'    , 978,
0.000000,0,0.000000,'piv'      , 982,
0.000000,0,0.000000,'bull'     , 8226,
0.000000,0,0.000000,'hellip'   , 8230,
0.000000,0,0.000000,'prime'    , 8242,
0.000000,0,0.000000,'Prime'    , 8243,
0.000000,0,0.000000,'oline'    , 8254,
0.000000,0,0.000000,'frasl'    , 8260,
0.000000,0,0.000000,'weierp'   , 8472,
0.000000,0,0.000000,'image'    , 8465,
0.000000,0,0.000000,'real'     , 8476,
0.000000,0,0.000000,'trade'    , 8482,
0.000000,0,0.000000,'alefsym'  , 8501,
0.000000,0,0.000000,'larr'     , 8592,
0.000000,0,0.000000,'uarr'     , 8593,
0.000000,0,0.000000,'rarr'     , 8594,
0.000000,0,0.000000,'darr'     , 8595,
0.000000,0,0.000000,'harr'     , 8596,
0.000000,0,0.000000,'crarr'    , 8629,
0.000000,0,0.000000,'lArr'     , 8656,
0.000000,0,0.000000,'uArr'     , 8657,
0.000000,0,0.000000,'rArr'     , 8658,
0.000000,0,0.000000,'dArr'     , 8659,
0.000000,0,0.000000,'hArr'     , 8660,
0.000000,0,0.000000,'forall'   , 8704,
0.000000,0,0.000000,'part'     , 8706,
0.000000,0,0.000000,'exist'    , 8707,
0.000000,0,0.000000,'empty'    , 8709,
0.000000,0,0.000000,'nabla'    , 8711,
0.000000,0,0.000000,'isin'     , 8712,
0.000000,0,0.000000,'notin'    , 8713,
0.000000,0,0.000000,'ni'       , 8715,
0.000000,0,0.000000,'prod'     , 8719,
0.000000,0,0.000000,'sum'      , 8721,
0.000000,0,0.000000,'minus'    , 8722,
0.000000,0,0.000000,'lowast'   , 8727,
0.000000,0,0.000000,'radic'    , 8730,
0.000000,0,0.000000,'prop'     , 8733,
0.000000,0,0.000000,'infin'    , 8734,
0.000000,0,0.000000,'ang'      , 8736,
0.000000,0,0.000000,'and'      , 8743,
0.000000,0,0.000000,'or'       , 8744,
0.000000,0,0.000000,'cap'      , 8745,
0.000000,0,0.000000,'cup'      , 8746,
0.000000,0,0.000000,'int'      , 8747,
0.000000,0,0.000000,'there4'   , 8756,
0.000000,0,0.000000,'sim'      , 8764,
0.000000,0,0.000000,'cong'     , 8773,
0.000000,0,0.000000,'asymp'    , 8776,
0.000000,0,0.000000,'ne'       , 8800,
0.000000,0,0.000000,'equiv'    , 8801,
0.000000,0,0.000000,'le'       , 8804,
0.000000,0,0.000000,'ge'       , 8805,
0.000000,0,0.000000,'sub'      , 8834,
0.000000,0,0.000000,'sup'      , 8835,
0.000000,0,0.000000,'nsub'     , 8836,
0.000000,0,0.000000,'sube'     , 8838,
0.000000,0,0.000000,'supe'     , 8839,
0.000000,0,0.000000,'oplus'    , 8853,
0.000000,0,0.000000,'otimes'   , 8855,
0.000000,0,0.000000,'perp'     , 8869,
0.000000,0,0.000000,'sdot'     , 8901,
0.000000,0,0.000000,'lceil'    , 8968,
0.000000,0,0.000000,'rceil'    , 8969,
0.000000,0,0.000000,'lfloor'   , 8970,
0.000000,0,0.000000,'rfloor'   , 8971,
0.000000,0,0.000000,'lang'     , 9001,
0.000000,0,0.000000,'rang'     , 9002,
0.000000,0,0.000000,'loz'      , 9674,
0.000000,0,0.000000,'spades'   , 9824,
0.000000,0,0.000000,'clubs'    , 9827,
0.000000,0,0.000000,'hearts'   , 9829,
0.000000,0,0.000000,'diams'    , 9830,
0.000000,0,0.000000,'OElig'    , 338,
0.000000,0,0.000000,'oelig'    , 339,
0.000000,0,0.000000,'Scaron'   , 352,
0.000000,0,0.000000,'scaron'   , 353,
0.000000,0,0.000000,'Yuml'     , 376,
0.000000,0,0.000000,'circ'     , 710,
0.000000,0,0.000000,'tilde'    , 732,
0.000000,0,0.000000,'ensp'     , 8194,
0.000000,0,0.000000,'emsp'     , 8195,
0.000000,0,0.000000,'thinsp'   , 8201,
0.000000,0,0.000000,'zwnj'     , 8204,
0.000000,0,0.000000,'zwj'      , 8205,
0.000000,0,0.000000,'lrm'      , 8206,
0.000000,0,0.000000,'rlm'      , 8207,
0.000000,0,0.000000,'ndash'    , 8211,
0.000000,0,0.000000,'mdash'    , 8212,
0.000000,0,0.000000,'lsquo'    , 8216,
0.000000,0,0.000000,'rsquo'    , 8217,
0.000000,0,0.000000,'sbquo'    , 8218,
0.000000,0,0.000000,'ldquo'    , 8220,
0.000000,0,0.000000,'rdquo'    , 8221,
0.000000,0,0.000000,'bdquo'    , 8222,
0.000000,0,0.000000,'dagger'   , 8224,
0.000000,0,0.000000,'Dagger'   , 8225,
0.000000,0,0.000000,'permil'   , 8240,
0.000000,0,0.000000,'lsaquo'   , 8249,
0.000000,0,0.000000,'rsaquo'   , 8250,
0.000000,0,0.000000,'euro'     , 8364,
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,# Fill out %Name2character...
0.000000,0,0.000000,{
0.000001,2,0.000000,%Name2character = ();
0.000000,1,0.000000,my($name, $number);
0.000001,1,0.000001,while( ($name, $number) = each %Name2character_number) {
0.000240,257,0.000001,if($] < 5.007  and  $number > 255) {
0.000000,0,0.000000,$Name2character{$name} = $FAR_CHAR;
0.000000,0,0.000000,# substitute for Unicode characters, for perls
0.000000,0,0.000000,#  that can't reliably handle them
0.000000,0,0.000000,} elsif ($] >= 5.007003) {
0.000000,0,0.000000,$Name2character{$name} = chr utf8::unicode_to_native($number);
0.000000,0,0.000000,# normal case for more recent Perls where we can translate from Unicode
0.000000,0,0.000000,# to the native character set.
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif (exists $Code2USASCII{$number}) {
0.000000,0,0.000000,$Name2character{$name} = $Code2USASCII{$number};
0.000000,0,0.000000,# on older Perls, we can use the translations we have hard-coded in this
0.000000,0,0.000000,# file, but these don't include the non-ASCII-range characters
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($NOT_ASCII && $number > 127 && $number < 256) {
0.000000,0,0.000000,# this range on old non-ASCII-platform perls is wrong
0.000000,0,0.000000,if (exists $Latin1Code_to_fallback{$number})  {
0.000000,0,0.000000,$Name2character{$name} = $Latin1Code_to_fallback{$number};
0.000000,0,0.000000,} else {
0.000000,0,0.000000,$Name2character{$name} = $FAR_CHAR;
0.000000,0,0.000000,}
0.000000,0,0.000000,} else {
0.000000,0,0.000000,$Name2character{$name} = chr $number;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#--------------------------------------------------------------------------
0.000101,1,0.000101,1;
0.000000,0,0.000000,__END__
