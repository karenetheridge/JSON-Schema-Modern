# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000004,2,0.000002,my $isa_check_for_evaluator = ${$_[1]->{"\$isa_check_for_evaluator"}};
0.000001,1,0.000001,my $isa_check_for_json_5fschema_5fdialect = ${$_[1]->{"\$isa_check_for_json_5fschema_5fdialect"}};
0.000000,1,0.000000,my $isa_check_for_errors = ${$_[1]->{"\$isa_check_for_errors"}};
0.000001,1,0.000001,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000001,1,0.000001,my $coerce_for_canonical_5furi = ${$_[1]->{"\$coerce_for_canonical_5furi"}};
0.000000,1,0.000000,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000001,1,0.000001,my $isa_check_for_metaschema_5furi = ${$_[1]->{"\$isa_check_for_metaschema_5furi"}};
0.000000,1,0.000000,my $coerce_for_json_5fschema_5fdialect = ${$_[1]->{"\$coerce_for_json_5fschema_5fdialect"}};
0.000000,1,0.000000,my $isa_check_for_canonical_5furi = ${$_[1]->{"\$isa_check_for_canonical_5furi"}};
0.000001,1,0.000001,my $isa_check_for_operationIds = ${$_[1]->{"\$isa_check_for_operationIds"}};
0.000000,1,0.000000,my $coerce_for_metaschema_5furi = ${$_[1]->{"\$coerce_for_metaschema_5furi"}};
0.000000,0,0.000000,package JSON::Schema::Modern::Document::OpenAPI;
0.000060,2,0.000030,no warnings 'closure';
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package JSON::Schema::Modern::Document::OpenAPI;
0.000000,0,0.000000,BEGIN {
0.000001,1,0.000001,$^H = 2018;
0.000001,1,0.000001,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000004,1,0.000004,%^H = (
0.000000,0,0.000000,);
0.000254,1,0.000254,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.000001,1,0.000001,my $invoker = CORE::shift();
0.000001,1,0.000001,my $class = CORE::ref($invoker) ? CORE::ref($invoker) : $invoker;
0.000000,1,0.000000,if ($class ne "JSON::Schema::Modern::Document::OpenAPI") {
0.000000,0,0.000000,if ($Moo::MAKERS{$class}) {
0.000000,0,0.000000,if ($Moo::MAKERS{$class}{constructor}) {
0.000000,0,0.000000,package JSON::Schema::Modern::Document::OpenAPI;
0.000000,0,0.000000,return $invoker->SUPER::new(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,Moo->_constructor_maker_for($class);
0.000000,0,0.000000,return $invoker->new(@_);
0.000000,0,0.000000,} elsif ($INC{"Moose.pm"} and my $meta = Class::MOP::get_metaclass_by_name($class)) {
0.000000,0,0.000000,return $meta->new_object(
0.000000,0,0.000000,$class->can("BUILDARGS") ? $class->BUILDARGS(@_)
0.000000,0,0.000000,: $class->Moo::Object::BUILDARGS(@_)
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,my $args = scalar @_ == 1
0.000000,0,0.000000,? CORE::ref $_[0] eq 'HASH'
0.000005,1,0.000005,? { %{ $_[0] } }
0.000000,0,0.000000,: Carp::croak("Single parameters to new() must be a HASH ref"
0.000000,0,0.000000,. " data => ". $_[0])
0.000000,0,0.000000,: @_ % 2
0.000000,0,0.000000,? Carp::croak("The new() method for $class expects a hash reference or a"
0.000000,0,0.000000,. " key/value list. You passed an odd number of arguments")
0.000000,0,0.000000,: {@_}
0.000000,0,0.000000,;
0.000003,1,0.000003,if (my @missing = grep !exists $args->{$_}, "evaluator", "schema") {
0.000000,0,0.000000,Carp::croak("Missing required arguments: ".CORE::join(', ', sort @missing));
0.000000,0,0.000000,}
0.000012,1,0.000012,my $new = $invoker->JSON::Schema::Modern::Document::SUPER::new($class->FOREIGNBUILDARGS(@_));
0.000000,1,0.000000,(exists $args->{"canonical_uri"} and ($new->{"canonical_uri"} = scalar do { my $value = do {
0.000002,1,0.000002,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => "canonical_uri",
0.000000,0,0.000000,name     => "canonical_uri",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.000001,1,0.000001,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.000001,1,0.000001,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.000003,1,0.000003,$coerce_for_canonical_5furi->($args->{"canonical_uri"})),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"canonical_uri\" failed: ".$@);
0.000001,1,0.000001,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.000001,1,0.000001,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000114,7,0.000016,(do { no warnings "void"; package Type::Tiny; ((((Scalar::Util::blessed($value) and $value->isa(q[Mojo::URL]))) && (do { local $_ = $value; not defined $_->fragment }))) or Type::Tiny::_failed_check($isa_check_for_canonical_5furi, "__ANON__", $value, "attribute_name","canonical_uri","attribute_step","isa check","mgaca","0","varname","\$args->{\"canonical_uri\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"errors"} and ($new->{"errors"} = scalar do { my $value = $args->{"errors"};
0.000112,2,0.000056,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_arrayref($value)) and do { my $ok = 1; for my $i (@{$value}) { ($ok = 0, last) unless (Scalar::Util::blessed($i) and $i->isa(q[JSON::Schema::Modern::Error])) }; $ok } }) or Type::Tiny::_failed_check($isa_check_for_errors, "ArrayRef[InstanceOf[\"JSON::Schema::Modern::Error\"]]", $value, "attribute_name","errors","attribute_step","isa check","mgaca","0","varname","\$args->{\"errors\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000009,2,0.000005,(exists $args->{"evaluator"} and (do { Scalar::Util::weaken($new->{"evaluator"} = scalar do { my $value = $args->{"evaluator"};
0.000085,5,0.000017,(do { no warnings "void"; package Type::Tiny; ((Scalar::Util::blessed($value) and $value->isa(q[JSON::Schema::Modern]))) or Type::Tiny::_failed_check($isa_check_for_evaluator, "InstanceOf[\"JSON::Schema::Modern\"]", $value, "attribute_name","evaluator","attribute_step","isa check","mgaca","0","varname","\$args->{\"evaluator\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000088,3,0.000029,); no warnings 'void'; $new->{"evaluator"} })),
0.000000,0,0.000000,(exists $args->{"json_schema_dialect"} and ($new->{"json_schema_dialect"} = scalar do { my $value = do {
0.000000,0,0.000000,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => "json_schema_dialect",
0.000000,0,0.000000,name     => "json_schema_dialect",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.000000,0,0.000000,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.000000,0,0.000000,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.000000,0,0.000000,$coerce_for_json_5fschema_5fdialect->($args->{"json_schema_dialect"})),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"json_schema_dialect\" failed: ".$@);
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.000000,0,0.000000,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000119,2,0.000059,(do { no warnings "void"; package Type::Tiny; ((Scalar::Util::blessed($value) and $value->isa(q[Mojo::URL]))) or Type::Tiny::_failed_check($isa_check_for_json_5fschema_5fdialect, "InstanceOf[\"Mojo::URL\"]", $value, "attribute_name","json_schema_dialect","attribute_step","isa check","mgaca","0","varname","\$args->{\"json_schema_dialect\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,1,0.000000,($new->{"metaschema_uri"} = scalar do { my $value = do {
0.000003,1,0.000003,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => "metaschema_uri",
0.000000,0,0.000000,name     => "metaschema_uri",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.000001,1,0.000001,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.000001,1,0.000001,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.000000,0,0.000000,$coerce_for_metaschema_5furi->((
0.000000,0,0.000000,exists $args->{"metaschema_uri"}
0.000003,1,0.000003,? $args->{"metaschema_uri"}
0.000000,0,0.000000,: "https://spec.openapis.org/oas/3.1/schema-base/latest"))),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"metaschema_uri\" failed: ".$@);
0.000001,1,0.000001,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.000001,1,0.000001,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000097,5,0.000019,(do { no warnings "void"; package Type::Tiny; ((Scalar::Util::blessed($value) and $value->isa(q[Mojo::URL]))) or Type::Tiny::_failed_check($isa_check_for_metaschema_5furi, "InstanceOf[\"Mojo::URL\"]", $value, "attribute_name","metaschema_uri","attribute_step","isa check","mgaca","0","varname","\$args->{\"metaschema_uri\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,),
0.000000,0,0.000000,(exists $args->{"operationIds"} and ($new->{"operationIds"} = scalar do { my $value = $args->{"operationIds"};
0.000358,2,0.000179,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and do { my $ok = 1; for my $i (values %{$value}) { ($ok = 0, last) unless do { package Type::Tiny; defined($i) and do { ref(\$i) eq 'SCALAR' or ref(\(my $val = $i)) eq 'SCALAR' } } }; $ok } }) or Type::Tiny::_failed_check($isa_check_for_operationIds, "HashRef[Str]", $value, "attribute_name","operationIds","attribute_step","isa check","mgaca","0","varname","\$args->{\"operationIds\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"schema"} and ($new->{"schema"} = $args->{"schema"})),
0.000000,0,0.000000,(($args)[0]->{__no_BUILD__} or (
0.000036,1,0.000036,$new->JSON::Schema::Modern::Document::BUILD($args),
0.000000,0,0.000000,)),
0.000000,0,0.000000,return $new;
0.000000,0,0.000000,}
0.000001,1,0.000001,$$_UNQUOTED = \&new;
0.000000,0,0.000000,}
0.000009,1,0.000009,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
