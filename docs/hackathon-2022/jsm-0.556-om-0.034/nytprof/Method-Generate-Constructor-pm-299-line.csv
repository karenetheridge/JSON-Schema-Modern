# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Method::Generate::Constructor;
0.000028,2,0.000014,use strict;
0.000017,2,0.000008,use warnings;
0.000000,0,0.000000,
0.000017,2,0.000008,use Sub::Quote qw(quote_sub quotify);
0.000013,2,0.000006,use Sub::Defer;
0.000015,2,0.000007,use Moo::_Utils qw(_getstash _getglob _linear_isa);
0.000013,2,0.000007,use Scalar::Util qw(weaken);
0.000012,2,0.000006,use Carp qw(croak);
0.000188,2,0.000094,use Carp::Heavy ();
0.000029,1,0.000029,BEGIN { our @CARP_NOT = qw(Sub::Defer) }
0.000000,0,0.000000,BEGIN {
0.000000,1,0.000000,local $Moo::sification::disabled = 1;
0.000001,1,0.000001,require Moo;
0.000004,1,0.000004,Moo->import;
0.001246,1,0.001246,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub register_attribute_specs {
0.000052,62,0.000001,my ($self, @new_specs) = @_;
0.000102,62,0.000002,$self->assert_constructor;
0.000039,62,0.000001,my $specs = $self->{attribute_specs}||={};
0.000073,62,0.000001,my $ag = $self->accessor_generator;
0.000136,62,0.000002,while (my ($name, $new_spec) = splice @new_specs, 0, 2) {
0.000147,63,0.000002,if ($name =~ s/^\+//) {
0.000000,0,0.000000,croak "has '+${name}' given but no ${name} attribute already exists"
0.000001,2,0.000000,unless my $old_spec = $specs->{$name};
0.000068,2,0.000034,$ag->merge_specs($new_spec, $old_spec);
0.000000,0,0.000000,}
0.000071,63,0.000001,if ($new_spec->{required}
0.000000,0,0.000000,&& !(
0.000000,0,0.000000,$ag->has_default($name, $new_spec)
0.000000,0,0.000000,|| !exists $new_spec->{init_arg}
0.000000,0,0.000000,|| defined $new_spec->{init_arg}
0.000000,0,0.000000,)
0.000000,0,0.000000,) {
0.000000,0,0.000000,croak "You cannot have a required attribute (${name})"
0.000000,0,0.000000,. " without a default, builder, or an init_arg";
0.000000,0,0.000000,}
0.000000,0,0.000000,$new_spec->{index} = scalar keys %$specs
0.000075,63,0.000001,unless defined $new_spec->{index};
0.000064,63,0.000001,$specs->{$name} = $new_spec;
0.000000,0,0.000000,}
0.000147,62,0.000002,$self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub all_attribute_specs {
0.000000,0,0.000000,$_[0]->{attribute_specs}
0.000045,3,0.000015,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub accessor_generator {
0.000000,0,0.000000,$_[0]->{accessor_generator}
0.000141,76,0.000002,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub construction_string {
0.000004,9,0.000000,my ($self) = @_;
0.000000,0,0.000000,$self->{construction_string}
0.000031,9,0.000003,||= $self->_build_construction_string;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub buildall_generator {
0.000638,3,0.000213,require Method::Generate::BuildAll;
0.000033,3,0.000011,Method::Generate::BuildAll->new;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _build_construction_string {
0.000001,7,0.000000,my ($self) = @_;
0.000003,7,0.000000,my $builder = $self->{construction_builder};
0.000045,7,0.000006,$builder ? $self->$builder
0.000000,0,0.000000,: 'bless('
0.000000,0,0.000000,.$self->accessor_generator->default_construction_string
0.000000,0,0.000000,.', $class);'
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub install_delayed {
0.000006,10,0.000001,my ($self) = @_;
0.000034,10,0.000003,$self->assert_constructor;
0.000007,10,0.000001,my $package = $self->{package};
0.000042,10,0.000004,my (undef, @isa) = @{_linear_isa($package)};
0.000012,10,0.000001,my $isa = join ',', @isa;
0.000053,10,0.000005,my (undef, $from_file, $from_line) = caller(Carp::short_error_loc());
0.000000,0,0.000000,my $constructor = defer_sub "${package}::new" => sub {
0.000065,8,0.000008,my (undef, @new_isa) = @{_linear_isa($package)};
0.000016,8,0.000002,if (join(',', @new_isa) ne $isa) {
0.000000,0,0.000000,my ($expected_new) = grep { *{_getglob($_.'::new')}{CODE} } @isa;
0.000000,0,0.000000,my ($found_new) = grep { *{_getglob($_.'::new')}{CODE} } @new_isa;
0.000000,0,0.000000,if (($found_new||'') ne ($expected_new||'')) {
0.000000,0,0.000000,$found_new ||= 'none';
0.000000,0,0.000000,$expected_new ||= 'none';
0.000000,0,0.000000,croak "Expected parent constructor of $package to be"
0.000000,0,0.000000,. " $expected_new, but found $found_new: changing the inheritance"
0.000000,0,0.000000,. " chain (\@ISA) at runtime (after $from_file line $from_line) is unsupported";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $constructor = $self->generate_method(
0.000052,8,0.000006,$package, 'new', $self->{attribute_specs}, { no_install => 1, no_defer => 1 }
0.000000,0,0.000000,);
0.000011,8,0.000001,$self->{inlined} = 1;
0.000034,8,0.000004,weaken($self->{constructor} = $constructor);
0.000029,8,0.000004,$constructor;
0.000058,10,0.000006,};
0.000009,10,0.000001,$self->{inlined} = 0;
0.000024,10,0.000002,weaken($self->{constructor} = $constructor);
0.000018,10,0.000002,$self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub current_constructor {
0.000038,74,0.000001,my ($self, $package) = @_;
0.000284,74,0.000004,return *{_getglob("${package}::new")}{CODE};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub assert_constructor {
0.000027,74,0.000000,my ($self) = @_;
0.000052,74,0.000001,my $package = $self->{package} or return 1;
0.000153,74,0.000002,my $current = $self->current_constructor($package)
0.000000,0,0.000000,or return 1;
0.000000,0,0.000000,my $constructor = $self->{constructor}
0.000026,64,0.000000,or croak "Unknown constructor for $package already exists";
0.000044,64,0.000001,croak "Constructor for $package has been replaced with an unknown sub"
0.000000,0,0.000000,if $constructor != $current;
0.000000,0,0.000000,croak "Constructor for $package has been inlined and cannot be updated"
0.000117,64,0.000002,if $self->{inlined};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub generate_method {
0.000004,8,0.000000,my ($self, $into, $name, $spec, $quote_opts) = @_;
0.000000,0,0.000000,$quote_opts = {
0.000019,8,0.000002,%{$quote_opts||{}},
0.000000,0,0.000000,package => $into,
0.000000,0,0.000000,};
0.000070,8,0.000009,foreach my $no_init (grep !exists($spec->{$_}{init_arg}), keys %$spec) {
0.000051,51,0.000001,$spec->{$no_init}{init_arg} = $no_init;
0.000000,0,0.000000,}
0.000016,8,0.000002,local $self->{captures} = {};
0.000000,0,0.000000,
0.000075,8,0.000009,my $into_buildargs = $into->can('BUILDARGS');
0.000000,0,0.000000,
0.000339,8,0.000042,my $body
0.000000,0,0.000000,= '    my $invoker = CORE::shift();'."\n"
0.000000,0,0.000000,. '    my $class = CORE::ref($invoker) ? CORE::ref($invoker) : $invoker;'."\n"
0.000000,0,0.000000,. $self->_handle_subconstructor($into, $name)
0.000000,0,0.000000,. ( $into_buildargs && $into_buildargs != \&Moo::Object::BUILDARGS
0.000000,0,0.000000,? $self->_generate_args_via_buildargs
0.000000,0,0.000000,: $self->_generate_args
0.000000,0,0.000000,)
0.000000,0,0.000000,. $self->_check_required($spec)
0.000000,0,0.000000,. '    my $new = '.$self->construction_string.";\n"
0.000000,0,0.000000,. $self->_assign_new($spec)
0.000000,0,0.000000,. ( $into->can('BUILD')
0.000000,0,0.000000,? $self->buildall_generator->buildall_body_for( $into, '$new', '$args' )
0.000000,0,0.000000,: ''
0.000000,0,0.000000,)
0.000000,0,0.000000,. '    return $new;'."\n";
0.000000,0,0.000000,
0.000047,8,0.000006,if ($into->can('DEMOLISH')) {
0.000000,0,0.000000,require Method::Generate::DemolishAll;
0.000000,0,0.000000,Method::Generate::DemolishAll->new->generate_method($into);
0.000000,0,0.000000,}
0.000000,0,0.000000,quote_sub
0.000000,0,0.000000,"${into}::${name}" => $body,
0.000091,8,0.000011,$self->{captures}, $quote_opts||{}
0.000000,0,0.000000,;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _handle_subconstructor {
0.000003,8,0.000000,my ($self, $into, $name) = @_;
0.000065,8,0.000008,if (my $gen = $self->{subconstructor_handler}) {
0.000000,0,0.000000,'    if ($class ne '.quotify($into).') {'."\n".
0.000000,0,0.000000,$gen.
0.000000,0,0.000000,'    }'."\n";
0.000000,0,0.000000,} else {
0.000000,0,0.000000,''
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _cap_call {
0.000013,55,0.000000,my ($self, $code, $captures) = @_;
0.000109,55,0.000002,@{$self->{captures}}{keys %$captures} = values %$captures if $captures;
0.000083,55,0.000002,$code;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_args_via_buildargs {
0.000000,2,0.000000,my ($self) = @_;
0.000004,2,0.000002,q{    my $args = $class->BUILDARGS(@_);}."\n"
0.000000,0,0.000000,.q{    Carp::croak("BUILDARGS did not return a hashref") unless CORE::ref($args) eq 'HASH';}
0.000000,0,0.000000,."\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# inlined from Moo::Object - update that first.
0.000000,0,0.000000,sub _generate_args {
0.000004,6,0.000001,my ($self) = @_;
0.000011,6,0.000002,return <<'_EOA';
0.000000,0,0.000000,my $args = scalar @_ == 1
0.000000,0,0.000000,? CORE::ref $_[0] eq 'HASH'
0.000000,0,0.000000,? { %{ $_[0] } }
0.000000,0,0.000000,: Carp::croak("Single parameters to new() must be a HASH ref"
0.000000,0,0.000000,. " data => ". $_[0])
0.000000,0,0.000000,: @_ % 2
0.000000,0,0.000000,? Carp::croak("The new() method for $class expects a hash reference or a"
0.000000,0,0.000000,. " key/value list. You passed an odd number of arguments")
0.000000,0,0.000000,: {@_}
0.000000,0,0.000000,;
0.000000,0,0.000000,_EOA
0.000000,0,0.000000,
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _assign_new {
0.000003,8,0.000000,my ($self, $spec) = @_;
0.000009,8,0.000001,my $ag = $self->accessor_generator;
0.000002,8,0.000000,my %test;
0.000027,8,0.000003,NAME: foreach my $name (sort keys %$spec) {
0.000022,61,0.000000,my $attr_spec = $spec->{$name};
0.000000,0,0.000000,next NAME unless defined($attr_spec->{init_arg})
0.000029,61,0.000000,or $ag->has_eager_default($name, $attr_spec);
0.000047,55,0.000001,$test{$name} = $attr_spec->{init_arg};
0.000000,0,0.000000,}
0.000000,0,0.000000,join '', map {
0.000230,63,0.000004,my $arg = $test{$_};
0.000070,55,0.000001,my $arg_key = quotify($arg);
0.000024,55,0.000000,my $test = defined $arg ? "exists \$args->{$arg_key}" : undef;
0.000010,55,0.000000,my $source = defined $arg ? "\$args->{$arg_key}" : undef;
0.000028,55,0.000001,my $attr_spec = $spec->{$_};
0.000156,55,0.000003,$self->_cap_call($ag->generate_populate_set(
0.000000,0,0.000000,'$new', $_, $attr_spec, $source, $test, $arg,
0.000000,0,0.000000,));
0.000000,0,0.000000,} sort keys %test;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _check_required {
0.000004,8,0.000000,my ($self, $spec) = @_;
0.000000,0,0.000000,my @required_init =
0.000000,0,0.000000,map $spec->{$_}{init_arg},
0.000000,0,0.000000,grep {
0.000132,69,0.000002,my $s = $spec->{$_}; # ignore required if default or builder set
0.000000,0,0.000000,$s->{required} and not($s->{builder} or exists $s->{default})
0.000044,61,0.000001,} sort keys %$spec;
0.000036,8,0.000005,return '' unless @required_init;
0.000029,5,0.000006,'    if (my @missing = grep !exists $args->{$_}, '
0.000000,0,0.000000,.join(', ', map quotify($_), @required_init).') {'."\n"
0.000000,0,0.000000,.q{      Carp::croak("Missing required arguments: ".CORE::join(', ', sort @missing));}."\n"
0.000000,0,0.000000,."    }\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# bootstrap our own constructor
0.000000,0,0.000000,sub new {
0.000000,1,0.000000,my $class = shift;
0.000004,1,0.000004,delete _getstash(__PACKAGE__)->{new};
0.000010,1,0.000010,bless $class->BUILDARGS(@_), $class;
0.000000,0,0.000000,}
0.000012,1,0.000012,Moo->_constructor_maker_for(__PACKAGE__)
0.000000,0,0.000000,->register_attribute_specs(
0.000000,0,0.000000,attribute_specs => {
0.000000,0,0.000000,is => 'ro',
0.000000,0,0.000000,reader => 'all_attribute_specs',
0.000000,0,0.000000,},
0.000000,0,0.000000,accessor_generator => { is => 'ro' },
0.000000,0,0.000000,construction_string => { is => 'lazy' },
0.000000,0,0.000000,construction_builder => { is => 'bare' },
0.000000,0,0.000000,subconstructor_handler => { is => 'ro' },
0.000000,0,0.000000,package => { is => 'bare' },
0.000000,0,0.000000,);
0.000000,1,0.000000,if ($INC{'Moo/HandleMoose.pm'} && !$Moo::sification::disabled) {
0.000000,0,0.000000,Moo::HandleMoose::inject_fake_metaclass_for(__PACKAGE__);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000007,1,0.000007,1;
