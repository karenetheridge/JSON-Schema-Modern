# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Mojo::JSON::Pointer;
0.000377,2,0.000189,use Mojo::Base -base;
0.000000,0,0.000000,
0.000002,1,0.000002,has 'data';
0.000000,0,0.000000,
0.000000,0,0.000000,sub contains { shift->_pointer(0, @_) }
0.172105,47846,0.000004,sub get      { shift->_pointer(1, @_) }
0.000000,0,0.000000,
0.000066,15,0.000004,sub new { @_ > 1 ? shift->SUPER::new(data => shift) : shift->SUPER::new }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _pointer {
0.029325,47846,0.000001,my ($self, $get, $pointer) = @_;
0.000000,0,0.000000,
0.077128,47846,0.000002,my $data = $self->data;
0.214435,47846,0.000004,return length $pointer ? undef : $get ? $data : 1 unless $pointer =~ s!^/!!;
0.056963,20362,0.000003,for my $p (length $pointer ? (split /\//, $pointer, -1) : ($pointer)) {
0.077522,49431,0.000002,$p =~ s!~1!/!g;
0.054156,49431,0.000001,$p =~ s/~0/~/g;
0.000000,0,0.000000,
0.000000,0,0.000000,# Hash
0.096729,49431,0.000002,if (ref $data eq 'HASH' && exists $data->{$p}) { $data = $data->{$p} }
0.000000,0,0.000000,
0.000000,0,0.000000,# Array
0.000000,0,0.000000,elsif (ref $data eq 'ARRAY' && $p =~ /^\d+$/ && @$data > $p) { $data = $data->[$p] }
0.000000,0,0.000000,
0.000000,0,0.000000,# Nothing
0.000000,0,0.000000,else { return undef }
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.041306,20362,0.000002,return $get ? $data : 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,=encoding utf8
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,Mojo::JSON::Pointer - JSON Pointers
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,use Mojo::JSON::Pointer;
0.000000,0,0.000000,
0.000000,0,0.000000,my $pointer = Mojo::JSON::Pointer->new({foo => [23, 'bar']});
0.000000,0,0.000000,say $pointer->get('/foo/1');
0.000000,0,0.000000,say 'Contains "/foo".' if $pointer->contains('/foo');
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,L<Mojo::JSON::Pointer> is an implementation of L<RFC 6901|https://tools.ietf.org/html/rfc6901>.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 ATTRIBUTES
0.000000,0,0.000000,
0.000000,0,0.000000,L<Mojo::JSON::Pointer> implements the following attributes.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 data
0.000000,0,0.000000,
0.000000,0,0.000000,my $data = $pointer->data;
0.000000,0,0.000000,$pointer = $pointer->data({foo => 'bar'});
0.000000,0,0.000000,
0.000000,0,0.000000,Data structure to be processed.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 METHODS
0.000000,0,0.000000,
0.000000,0,0.000000,L<Mojo::JSON::Pointer> inherits all methods from L<Mojo::Base> and implements the following new ones.
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 contains
0.000000,0,0.000000,
0.000000,0,0.000000,my $bool = $pointer->contains('/foo/1');
0.000000,0,0.000000,
0.000000,0,0.000000,Check if L</"data"> contains a value that can be identified with the given JSON Pointer.
0.000000,0,0.000000,
0.000000,0,0.000000,# True
0.000000,0,0.000000,Mojo::JSON::Pointer->new('just a string')->contains('');
0.000000,0,0.000000,Mojo::JSON::Pointer->new({'♥' => 'mojolicious'})->contains('/♥');
0.000000,0,0.000000,Mojo::JSON::Pointer->new({foo => 'bar', baz => [4, 5]})->contains('/foo');
0.000000,0,0.000000,Mojo::JSON::Pointer->new({foo => 'bar', baz => [4, 5]})->contains('/baz/1');
0.000000,0,0.000000,
0.000000,0,0.000000,# False
0.000000,0,0.000000,Mojo::JSON::Pointer->new({'♥' => 'mojolicious'})->contains('/☃');
0.000000,0,0.000000,Mojo::JSON::Pointer->new({foo => 'bar', baz => [4, 5]})->contains('/bar');
0.000000,0,0.000000,Mojo::JSON::Pointer->new({foo => 'bar', baz => [4, 5]})->contains('/baz/9');
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 get
0.000000,0,0.000000,
0.000000,0,0.000000,my $value = $pointer->get('/foo/bar');
0.000000,0,0.000000,
0.000000,0,0.000000,Extract value from L</"data"> identified by the given JSON Pointer.
0.000000,0,0.000000,
0.000000,0,0.000000,# "just a string"
0.000000,0,0.000000,Mojo::JSON::Pointer->new('just a string')->get('');
0.000000,0,0.000000,
0.000000,0,0.000000,# "mojolicious"
0.000000,0,0.000000,Mojo::JSON::Pointer->new({'♥' => 'mojolicious'})->get('/♥');
0.000000,0,0.000000,
0.000000,0,0.000000,# "bar"
0.000000,0,0.000000,Mojo::JSON::Pointer->new({foo => 'bar', baz => [4, 5, 6]})->get('/foo');
0.000000,0,0.000000,
0.000000,0,0.000000,# "4"
0.000000,0,0.000000,Mojo::JSON::Pointer->new({foo => 'bar', baz => [4, 5, 6]})->get('/baz/0');
0.000000,0,0.000000,
0.000000,0,0.000000,# "6"
0.000000,0,0.000000,Mojo::JSON::Pointer->new({foo => 'bar', baz => [4, 5, 6]})->get('/baz/2');
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 new
0.000000,0,0.000000,
0.000000,0,0.000000,my $pointer = Mojo::JSON::Pointer->new;
0.000000,0,0.000000,my $pointer = Mojo::JSON::Pointer->new({foo => 'bar'});
0.000000,0,0.000000,
0.000000,0,0.000000,Build new L<Mojo::JSON::Pointer> object.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SEE ALSO
0.000000,0,0.000000,
0.000000,0,0.000000,L<Mojolicious>, L<Mojolicious::Guides>, L<https://mojolicious.org>.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
