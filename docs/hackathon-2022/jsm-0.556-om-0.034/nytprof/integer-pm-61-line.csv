# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package integer;
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = '1.01';
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,integer - Perl pragma to use integer arithmetic instead of floating point
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,use integer;
0.000000,0,0.000000,$x = 10/3;
0.000000,0,0.000000,# $x is now 3, not 3.33333333333333333
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,This tells the compiler to use integer operations from here to the end
0.000000,0,0.000000,of the enclosing BLOCK.  On many machines, this doesn't matter a great
0.000000,0,0.000000,deal for most computations, but on those without floating point
0.000000,0,0.000000,hardware, it can make a big difference in performance.
0.000000,0,0.000000,
0.000000,0,0.000000,Note that this only affects how most of the arithmetic and relational
0.000000,0,0.000000,B<operators> handle their operands and results, and B<not> how all
0.000000,0,0.000000,numbers everywhere are treated.  Specifically, C<use integer;> has the
0.000000,0,0.000000,effect that before computing the results of the arithmetic operators
0.000000,0,0.000000,(+, -, *, /, %, +=, -=, *=, /=, %=, and unary minus), the comparison
0.000000,0,0.000000,operators (<, <=, >, >=, ==, !=, <=>), and the bitwise operators (|, &,
0.000000,0,0.000000,^, <<, >>, |=, &=, ^=, <<=, >>=), the operands have their fractional
0.000000,0,0.000000,portions truncated (or floored), and the result will have its
0.000000,0,0.000000,fractional portion truncated as well.  In addition, the range of
0.000000,0,0.000000,operands and results is restricted to that of familiar two's complement
0.000000,0,0.000000,integers, i.e., -(2**31) .. (2**31-1) on 32-bit architectures, and
0.000000,0,0.000000,-(2**63) .. (2**63-1) on 64-bit architectures.  For example, this code
0.000000,0,0.000000,
0.000000,0,0.000000,use integer;
0.000000,0,0.000000,$x = 5.8;
0.000000,0,0.000000,$y = 2.5;
0.000000,0,0.000000,$z = 2.7;
0.000000,0,0.000000,$a = 2**31 - 1;  # Largest positive integer on 32-bit machines
0.000000,0,0.000000,$, = ", ";
0.000000,0,0.000000,print $x, -$x, $x+$y, $x-$y, $x/$y, $x*$y, $y==$z, $a, $a+1;
0.000000,0,0.000000,
0.000000,0,0.000000,will print:  5.8, -5, 7, 3, 2, 10, 1, 2147483647, -2147483648
0.000000,0,0.000000,
0.000000,0,0.000000,Note that $x is still printed as having its true non-integer value of
0.000000,0,0.000000,5.8 since it wasn't operated on.  And note too the wrap-around from the
0.000000,0,0.000000,largest positive integer to the largest negative one.   Also, arguments
0.000000,0,0.000000,passed to functions and the values returned by them are B<not> affected
0.000000,0,0.000000,by C<use integer;>.  E.g.,
0.000000,0,0.000000,
0.000000,0,0.000000,srand(1.5);
0.000000,0,0.000000,$, = ", ";
0.000000,0,0.000000,print sin(.5), cos(.5), atan2(1,2), sqrt(2), rand(10);
0.000000,0,0.000000,
0.000000,0,0.000000,will give the same result with or without C<use integer;>  The power
0.000000,0,0.000000,operator C<**> is also not affected, so that 2 ** .5 is always the
0.000000,0,0.000000,square root of 2.  Now, it so happens that the pre- and post- increment
0.000000,0,0.000000,and decrement operators, ++ and --, are not affected by C<use integer;>
0.000000,0,0.000000,either.  Some may rightly consider this to be a bug -- but at least it's
0.000000,0,0.000000,a long-standing one.
0.000000,0,0.000000,
0.000000,0,0.000000,Finally, C<use integer;> also has an additional affect on the bitwise
0.000000,0,0.000000,operators.  Normally, the operands and results are treated as
0.000000,0,0.000000,B<unsigned> integers, but with C<use integer;> the operands and results
0.000000,0,0.000000,are B<signed>.  This means, among other things, that ~0 is -1, and -2 &
0.000000,0,0.000000,-5 is -6.
0.000000,0,0.000000,
0.000000,0,0.000000,Internally, native integer arithmetic (as provided by your C compiler)
0.000000,0,0.000000,is used.  This means that Perl's own semantics for arithmetic
0.000000,0,0.000000,operations may not be preserved.  One common source of trouble is the
0.000000,0,0.000000,modulus of negative numbers, which Perl does one way, but your hardware
0.000000,0,0.000000,may do another.
0.000000,0,0.000000,
0.000000,0,0.000000,% perl -le 'print (4 % -3)'
0.000000,0,0.000000,-2
0.000000,0,0.000000,% perl -Minteger -le 'print (4 % -3)'
0.000000,0,0.000000,1
0.000000,0,0.000000,
0.000000,0,0.000000,See L<perlmodlib/"Pragmatic Modules">, L<perlop/"Integer Arithmetic">
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,1,0.000000,$integer::hint_bits = 0x1;
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000039,6,0.000006,$^H |= $integer::hint_bits;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub unimport {
0.000014,2,0.000007,$^H &= ~$integer::hint_bits;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000002,1,0.000002,1;
