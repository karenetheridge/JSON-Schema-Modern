# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,###       !!!ACHTUNG!!!
0.000000,0,0.000000,#
0.000000,0,0.000000,# This module is to be loaded at configure time straight from the Makefile.PL
0.000000,0,0.000000,# in order to get access to some of the constants / utils
0.000000,0,0.000000,# None of the dependencies will be available yet at this point, so make
0.000000,0,0.000000,# sure to never use anything beyond what the minimum supported perl came with
0.000000,0,0.000000,# (no, relying on configure_requires is not ok)
0.000000,0,0.000000,
0.000000,0,0.000000,package # hide from the pauses
0.000000,0,0.000000,namespace::clean::_Util;
0.000000,0,0.000000,
0.000039,2,0.000019,use warnings;
0.000040,2,0.000020,use strict;
0.000000,0,0.000000,
0.000100,2,0.000050,use base 'Exporter';
0.000002,1,0.000002,our @EXPORT_OK = qw( DEBUGGER_NEEDS_CV_RENAME DEBUGGER_NEEDS_CV_PIVOT );
0.000000,0,0.000000,
0.000064,2,0.000032,use constant DEBUGGER_NEEDS_CV_RENAME => ( ( "$]" > 5.008_008 ) and ( "$]" < 5.013_006 ) );
0.000139,2,0.000070,use constant DEBUGGER_NEEDS_CV_PIVOT => ( ( ! DEBUGGER_NEEDS_CV_RENAME ) and ( "$]" < 5.015_005 ) );
0.000000,0,0.000000,
0.000000,0,0.000000,# FIXME - ideally this needs to be provided by some abstraction lib
0.000000,0,0.000000,# but we don't have that yet
0.000000,0,0.000000,BEGIN {
0.000000,0,0.000000,#
0.000000,0,0.000000,# Note - both get_subname and set_subname are only called by one block
0.000000,0,0.000000,# which is compiled away unless CV_RENAME is true ( the 5.8.9 ~ 5.12 range ).
0.000000,0,0.000000,# Hence we compile/provide the definitions here only when needed
0.000000,0,0.000000,#
0.000005,1,0.000005,DEBUGGER_NEEDS_CV_RENAME and ( eval <<'EOS' or die $@ );
0.000000,0,0.000000,{
0.000000,0,0.000000,my( $sub_name_loaded, $sub_util_loaded );
0.000000,0,0.000000,
0.000000,0,0.000000,sub _namer_load_error {
0.000000,0,0.000000,return '' if $sub_util_loaded or $sub_name_loaded;
0.000000,0,0.000000,
0.000000,0,0.000000,# if S::N is loaded first *and* so is B - then go with that, otherwise
0.000000,0,0.000000,# prefer Sub::Util as S::U will provide a faster get_subname and will
0.000000,0,0.000000,# not need further require() calls
0.000000,0,0.000000,# this is rather arbitrary but remember this code exists only perls
0.000000,0,0.000000,# between 5.8.9 ~ 5.13.5
0.000000,0,0.000000,
0.000000,0,0.000000,# when changing version also change in Makefile.PL
0.000000,0,0.000000,my $sn_ver = 0.04;
0.000000,0,0.000000,
0.000000,0,0.000000,local $@;
0.000000,0,0.000000,my $err = '';
0.000000,0,0.000000,
0.000000,0,0.000000,(
0.000000,0,0.000000,! (
0.000000,0,0.000000,$INC{"B.pm"}
0.000000,0,0.000000,and
0.000000,0,0.000000,$INC{"Sub/Name.pm"}
0.000000,0,0.000000,and
0.000000,0,0.000000,eval { Sub::Name->VERSION($sn_ver) }
0.000000,0,0.000000,)
0.000000,0,0.000000,and
0.000000,0,0.000000,eval { require Sub::Util }
0.000000,0,0.000000,and
0.000000,0,0.000000,# see https://github.com/moose/Moo/commit/dafa5118
0.000000,0,0.000000,defined &Sub::Util::set_subname
0.000000,0,0.000000,and
0.000000,0,0.000000,$sub_util_loaded = 1
0.000000,0,0.000000,)
0.000000,0,0.000000,or
0.000000,0,0.000000,(
0.000000,0,0.000000,eval { require Sub::Name and Sub::Name->VERSION($sn_ver) }
0.000000,0,0.000000,and
0.000000,0,0.000000,$sub_name_loaded = 1
0.000000,0,0.000000,)
0.000000,0,0.000000,or
0.000000,0,0.000000,$err = "When running under -d on this perl $], namespace::clean requires either Sub::Name $sn_ver or Sub::Util to be installed"
0.000000,0,0.000000,;
0.000000,0,0.000000,
0.000000,0,0.000000,$err;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub set_subname {
0.000000,0,0.000000,if( my $err = _namer_load_error() ) {
0.000000,0,0.000000,die $err;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif( $sub_name_loaded ) {
0.000000,0,0.000000,&Sub::Name::subname;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif( $sub_util_loaded ) {
0.000000,0,0.000000,&Sub::Util::set_subname;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,die "How the fuck did we get here? Read source and debug please!";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub get_subname {
0.000000,0,0.000000,if(
0.000000,0,0.000000,_namer_load_error()
0.000000,0,0.000000,or
0.000000,0,0.000000,! $sub_util_loaded
0.000000,0,0.000000,) {
0.000000,0,0.000000,require B;
0.000000,0,0.000000,my $gv = B::svref_2object( $_[0] )->GV;
0.000000,0,0.000000,join '::', $gv->STASH->NAME, $gv->NAME;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,&Sub::Util::subname;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,1;
0.000000,0,0.000000,EOS
0.000000,0,0.000000,
0.000139,1,0.000139,}
0.000000,0,0.000000,
0.000006,1,0.000006,1;
