# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,# ABSTRACT: Load YAML into data with Parser and Constructor
0.000035,2,0.000017,use strict;
0.000055,2,0.000027,use warnings;
0.000000,0,0.000000,package YAML::PP::Loader;
0.000000,0,0.000000,
0.000001,1,0.000001,our $VERSION = '0.035'; # VERSION
0.000000,0,0.000000,
0.000508,2,0.000254,use YAML::PP::Parser;
0.000519,2,0.000259,use YAML::PP::Constructor;
0.000463,2,0.000232,use YAML::PP::Reader;
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000004,1,0.000004,my ($class, %args) = @_;
0.000000,0,0.000000,
0.000002,1,0.000002,my $cyclic_refs = delete $args{cyclic_refs} || 'allow';
0.000001,1,0.000001,my $default_yaml_version = delete $args{default_yaml_version} || '1.2';
0.000001,1,0.000001,my $preserve = delete $args{preserve};
0.000001,1,0.000001,my $duplicate_keys = delete $args{duplicate_keys};
0.000001,1,0.000001,my $schemas = delete $args{schemas};
0.000001,1,0.000001,$schemas ||= {
0.000000,0,0.000000,'1.2' => YAML::PP->default_schema(
0.000000,0,0.000000,boolean => 'perl',
0.000000,0,0.000000,)
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000005,1,0.000005,my $constructor = delete $args{constructor} || YAML::PP::Constructor->new(
0.000000,0,0.000000,schemas => $schemas,
0.000000,0,0.000000,cyclic_refs => $cyclic_refs,
0.000000,0,0.000000,default_yaml_version => $default_yaml_version,
0.000000,0,0.000000,preserve => $preserve,
0.000000,0,0.000000,duplicate_keys => $duplicate_keys,
0.000000,0,0.000000,);
0.000000,1,0.000000,my $parser = delete $args{parser};
0.000005,1,0.000005,unless ($parser) {
0.000000,0,0.000000,$parser = YAML::PP::Parser->new(
0.000000,0,0.000000,default_yaml_version => $default_yaml_version,
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000004,1,0.000004,unless ($parser->receiver) {
0.000000,0,0.000000,$parser->set_receiver($constructor);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000001,1,0.000001,if (keys %args) {
0.000000,0,0.000000,die "Unexpected arguments: " . join ', ', sort keys %args;
0.000000,0,0.000000,}
0.000001,1,0.000001,my $self = bless {
0.000000,0,0.000000,parser => $parser,
0.000000,0,0.000000,constructor => $constructor,
0.000000,0,0.000000,}, $class;
0.000004,1,0.000004,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub clone {
0.000000,0,0.000000,my ($self) = @_;
0.000000,0,0.000000,my $clone = {
0.000000,0,0.000000,parser => $self->parser->clone,
0.000000,0,0.000000,constructor => $self->constructor->clone,
0.000000,0,0.000000,};
0.000000,0,0.000000,bless $clone, ref $self;
0.000000,0,0.000000,$clone->parser->set_receiver($clone->constructor);
0.000000,0,0.000000,return $clone;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000007,2,0.000004,sub parser { return $_[0]->{parser} }
0.000002,1,0.000002,sub constructor { return $_[0]->{constructor} }
0.000000,0,0.000000,
0.000000,0,0.000000,sub filename {
0.000000,0,0.000000,my ($self) = @_;
0.000000,0,0.000000,my $reader = $self->parser->reader;
0.000000,0,0.000000,if ($reader->isa('YAML::PP::Reader::File')) {
0.000000,0,0.000000,return $reader->input;
0.000000,0,0.000000,}
0.000000,0,0.000000,die "Reader is not a YAML::PP::Reader::File";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub load_string {
0.000000,0,0.000000,my ($self, $yaml) = @_;
0.000000,0,0.000000,$self->parser->set_reader(YAML::PP::Reader->new( input => $yaml ));
0.000000,0,0.000000,$self->load();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub load_file {
0.000001,1,0.000001,my ($self, $file) = @_;
0.000009,1,0.000009,$self->parser->set_reader(YAML::PP::Reader::File->new( input => $file ));
0.000005,1,0.000005,$self->load();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub load {
0.000001,1,0.000001,my ($self) = @_;
0.000001,1,0.000001,my $parser = $self->parser;
0.000003,1,0.000003,my $constructor = $self->constructor;
0.000000,0,0.000000,
0.000002,1,0.000002,$constructor->init;
0.000004,1,0.000004,$parser->parse();
0.000000,0,0.000000,
0.000001,1,0.000001,my $docs = $constructor->docs;
0.000003,1,0.000003,return wantarray ? @$docs : $docs->[0];
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000004,1,0.000004,1;
