# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package MooX::HandlesVia;
0.000000,0,0.000000,# ABSTRACT: NativeTrait-like behavior for Moo.
0.000000,1,0.000000,$MooX::HandlesVia::VERSION = '0.001009';
0.000039,2,0.000019,use strict;
0.000026,2,0.000013,use warnings;
0.000000,0,0.000000,
0.000061,2,0.000030,use Moo ();
0.000028,2,0.000014,use Moo::Role ();
0.000077,2,0.000039,use Module::Runtime qw/require_module/;
0.000000,0,0.000000,
0.000000,0,0.000000,# reserved hardcoded mappings for classname shortcuts.
0.000004,1,0.000004,my %RESERVED = (
0.000000,0,0.000000,'Array' => 'Data::Perl::Collection::Array::MooseLike',
0.000000,0,0.000000,'Hash' => 'Data::Perl::Collection::Hash::MooseLike',
0.000000,0,0.000000,'String' => 'Data::Perl::String::MooseLike',
0.000000,0,0.000000,'Bool' => 'Data::Perl::Bool::MooseLike',
0.000000,0,0.000000,'Number' => 'Data::Perl::Number::MooseLike',
0.000000,0,0.000000,'Code' => 'Data::Perl::Code',
0.000000,0,0.000000,);
0.000003,1,0.000003,my %REVERSED = reverse %RESERVED;
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000002,5,0.000000,my ($class) = @_;
0.000000,0,0.000000,
0.000034,2,0.000017,no strict 'refs';
0.000401,2,0.000200,no warnings 'redefine';
0.000000,0,0.000000,
0.000004,5,0.000001,my $target = caller;
0.000064,5,0.000013,if (my $has = $target->can('has')) {
0.000000,0,0.000000,my $newsub = sub {
0.000335,36,0.000009,$has->(process_has(@_));
0.000010,5,0.000002,};
0.000000,0,0.000000,
0.000016,5,0.000003,if (Moo::Role->is_role($target)) {
0.000000,0,0.000000,Moo::Role::_install_tracked($target, "has", $newsub);
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000013,5,0.000003,Moo::_install_tracked($target, "has", $newsub);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub process_has {
0.000107,36,0.000003,my ($name, %opts) = @_;
0.000025,36,0.000001,my $handles = $opts{handles};
0.000108,36,0.000003,return ($name, %opts) if not $handles or ref $handles ne 'HASH';
0.000000,0,0.000000,
0.000012,13,0.000001,if (my $via = delete $opts{handles_via}) {
0.000005,12,0.000000,$via = ref $via eq 'ARRAY' ? $via->[0] : $via;
0.000000,0,0.000000,
0.000000,0,0.000000,# try to load the reserved mapping, if it exists, else the full name
0.000023,12,0.000002,$via = $RESERVED{$via} || $via;
0.000036,12,0.000003,require_module($via);
0.000000,0,0.000000,
0.000000,0,0.000000,# clone handles for HandlesMoose support
0.000028,12,0.000002,my %handles_clone = %$handles;
0.000000,0,0.000000,
0.000034,12,0.000003,while (my ($target, $delegation) = each %$handles) {
0.000000,0,0.000000,# if passed an array, handle the curry
0.000185,36,0.000005,if (ref $delegation eq 'ARRAY') {
0.000000,0,0.000000,my ($method, @curry) = @$delegation;
0.000000,0,0.000000,if ($via->can($method)) {
0.000000,0,0.000000,$handles->{$target} = ['${\\'.$via.'->can("'.$method.'")}', @curry];
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif (ref $delegation eq '') {
0.000000,0,0.000000,if ($via->can($delegation)) {
0.000000,0,0.000000,$handles->{$target} = '${\\'.$via.'->can("'.$delegation.'")}';
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# install our support for moose upgrading of class/role
0.000000,0,0.000000,# we deleted the handles_via key above, but install it as a native trait
0.000007,12,0.000001,my $inflator = $opts{moosify};
0.000000,0,0.000000,$opts{moosify} = sub {
0.000000,0,0.000000,my ($spec) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,$spec->{handles} = \%handles_clone;
0.000000,0,0.000000,$spec->{traits} = [$REVERSED{$via} || $via];
0.000000,0,0.000000,
0.000000,0,0.000000,# pass through if needed
0.000000,0,0.000000,$inflator->($spec) if ref($inflator) eq 'CODE';
0.000041,12,0.000003,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000048,13,0.000004,($name, %opts);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000006,1,0.000006,1;
0.000000,0,0.000000,
0.000000,0,0.000000,=pod
0.000000,0,0.000000,
0.000000,0,0.000000,=encoding UTF-8
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,MooX::HandlesVia - NativeTrait-like behavior for Moo.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 VERSION
0.000000,0,0.000000,
0.000000,0,0.000000,version 0.001009
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,{
0.000000,0,0.000000,package Hashy;
0.000000,0,0.000000,use Moo;
0.000000,0,0.000000,use MooX::HandlesVia;
0.000000,0,0.000000,
0.000000,0,0.000000,has hash => (
0.000000,0,0.000000,is => 'rw',
0.000000,0,0.000000,handles_via => 'Hash',
0.000000,0,0.000000,handles => {
0.000000,0,0.000000,get_val => 'get',
0.000000,0,0.000000,set_val => 'set',
0.000000,0,0.000000,all_keys => 'keys'
0.000000,0,0.000000,}
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $h = Hashy->new(hash => { a => 1, b => 2});
0.000000,0,0.000000,
0.000000,0,0.000000,$h->get_val('b'); # 2
0.000000,0,0.000000,
0.000000,0,0.000000,$h->set_val('a', 'BAR'); # sets a to BAR
0.000000,0,0.000000,
0.000000,0,0.000000,my @keys = $h->all_keys; # returns a, b
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,MooX::HandlesVia is an extension of Moo's 'handles' attribute functionality. It
0.000000,0,0.000000,provides a means of proxying functionality from an external class to the given
0.000000,0,0.000000,atttribute. This is most commonly used as a way to emulate 'Native Trait'
0.000000,0,0.000000,behavior that has become commonplace in Moose code, for which there was no Moo
0.000000,0,0.000000,alternative.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SHORTCOMINGS
0.000000,0,0.000000,
0.000000,0,0.000000,Due to current Moo implementation details there are some deficiencies in how
0.000000,0,0.000000,MooX::HandlesVia in comparison to what you would expect from Moose native
0.000000,0,0.000000,traits.
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item * methods delegated via the Moo 'handles' interface are passed the
0.000000,0,0.000000,attribue value directly. and there is no way to access the parent class. This
0.000000,0,0.000000,means if an attribute is updated any triggers or type coercions B<WILL NOT>
0.000000,0,0.000000,fire.
0.000000,0,0.000000,
0.000000,0,0.000000,=item * Moo attribute method delegations are passed the attribute value. This
0.000000,0,0.000000,is fine for references (objects, arrays, hashrefs..) it means simple scalar
0.000000,0,0.000000,types are B<READ ONLY>. This unfortunately means Number, String, Counter, Bool
0.000000,0,0.000000,cannot modify the attributes value, rendering them largely useless.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,If these are issues for you, consider L<Sub::HandlesVia>, which uses a
0.000000,0,0.000000,different architecture, respecting triggers and coercions, and allowing
0.000000,0,0.000000,read-write access to non-reference values. It should be possible to use
0.000000,0,0.000000,Sub::HandlesVia as a drop-in replacement for MooX::HandlesVia.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 PROVIDED INTERFACE/FUNCTIONS
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item B<process_has(@_)>
0.000000,0,0.000000,
0.000000,0,0.000000,MooX::HandlesVia preprocesses arguments passed to has() attribute declarations
0.000000,0,0.000000,via the process_has function. In a given Moo class, If 'handles_via' is set to
0.000000,0,0.000000,a ClassName string, and 'handles' is set with a hashref mapping of desired moo
0.000000,0,0.000000,class methods that should map to ClassName methods, process_has() will create
0.000000,0,0.000000,the appropriate binding to create the mapping IF ClassName provides that named
0.000000,0,0.000000,method.
0.000000,0,0.000000,
0.000000,0,0.000000,has options => (
0.000000,0,0.000000,is => 'rw',
0.000000,0,0.000000,handles_via => 'Array',
0.000000,0,0.000000,handles => {
0.000000,0,0.000000,mixup => 'shuffle',
0.000000,0,0.000000,unique_options => 'uniq',
0.000000,0,0.000000,all_options => 'elements'
0.000000,0,0.000000,}
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,The following handles_via keywords are reserved as shorthand for mapping to
0.000000,0,0.000000,L<Data::Perl>:
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item * B<Hash> maps to L<Data::Perl::Collection::Hash::MooseLike>
0.000000,0,0.000000,
0.000000,0,0.000000,=item * B<Array> maps to L<Data::Perl::Collection::Array::MooseLike>
0.000000,0,0.000000,
0.000000,0,0.000000,=item * B<String> maps to L<Data::Perl::String::MooseLike>
0.000000,0,0.000000,
0.000000,0,0.000000,=item * B<Number> maps to L<Data::Perl::Number::MooseLike>
0.000000,0,0.000000,
0.000000,0,0.000000,=item * B<Bool> maps to L<Data::Perl::Bool::MooseLike>
0.000000,0,0.000000,
0.000000,0,0.000000,=item * B<Code> maps to L<Data::Perl::Code>
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SEE ALSO
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item * L<Moo>
0.000000,0,0.000000,
0.000000,0,0.000000,=item * L<MooX::late>
0.000000,0,0.000000,
0.000000,0,0.000000,=item * L<Sub::HandlesVia>
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 ORIGINAL AUTHOR
0.000000,0,0.000000,
0.000000,0,0.000000,Matthew Phillips <mattp@cpan.org>
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 AUTHOR
0.000000,0,0.000000,
0.000000,0,0.000000,Toby Inkster <tobyink@cpan.org>
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 COPYRIGHT AND LICENSE
0.000000,0,0.000000,
0.000000,0,0.000000,This software is copyright (c) 2020 by Matthew Phillips <mattp@cpan.org>.
0.000000,0,0.000000,
0.000000,0,0.000000,This is free software; you can redistribute it and/or modify it under
0.000000,0,0.000000,the same terms as the Perl 5 programming language system itself.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
