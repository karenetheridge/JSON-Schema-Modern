# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000000,2,0.000000,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000000,1,0.000000,my $isa_check_for_errors = ${$_[1]->{"\$isa_check_for_errors"}};
0.000000,1,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000000,0,0.000000,package JSON::Schema::Modern::Document;
0.000033,2,0.000017,no warnings 'closure';
0.000000,0,0.000000,sub _set_errors {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package Method::Generate::Accessor::_Generated;
0.000000,0,0.000000,BEGIN {
0.000001,1,0.000001,$^H = 1762;
0.000000,1,0.000000,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000003,1,0.000003,%^H = (
0.000000,0,0.000000,);
0.000017,1,0.000017,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.000000,0,0.000000,scalar do { my $value = $_[1];
0.000094,2,0.000047,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_arrayref($value)) and do { my $ok = 1; for my $i (@{$value}) { ($ok = 0, last) unless (Scalar::Util::blessed($i) and $i->isa(q[JSON::Schema::Modern::Error])) }; $ok } }) or Type::Tiny::_failed_check($isa_check_for_errors, "ArrayRef[InstanceOf[\"JSON::Schema::Modern::Error\"]]", $value, "attribute_name","errors","attribute_step","isa check","mgaca","0","varname","\$self->{\"errors\"}"); $value }),
0.000000,0,0.000000,($_[0]->{"errors"} = $value),
0.000000,0,0.000000,($_[0]->{"errors"}),
0.000000,0,0.000000,}  }
0.000001,1,0.000001,$$_UNQUOTED = \&_set_errors;
0.000000,0,0.000000,}
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
