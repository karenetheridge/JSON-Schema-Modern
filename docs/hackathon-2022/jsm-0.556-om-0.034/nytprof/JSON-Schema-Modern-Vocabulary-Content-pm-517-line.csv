# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000065,2,0.000032,use strict;
0.000086,2,0.000043,use warnings;
0.000000,0,0.000000,package JSON::Schema::Modern::Vocabulary::Content;
0.000000,0,0.000000,# vim: set ts=8 sts=2 sw=2 tw=100 et :
0.000000,0,0.000000,# ABSTRACT: Implementation of the JSON Schema Content vocabulary
0.000000,0,0.000000,
0.000001,1,0.000001,our $VERSION = '0.556';
0.000000,0,0.000000,
0.000075,2,0.000038,use 5.020;
0.000050,2,0.000025,use Moo;
0.000096,3,0.000032,use strictures 2;
0.000118,2,0.000059,use experimental qw(signatures postderef);
0.000065,2,0.000033,use if "$]" >= 5.022, experimental => 're_strict';
0.000027,2,0.000013,no if "$]" >= 5.031009, feature => 'indirect';
0.000043,2,0.000022,no if "$]" >= 5.033001, feature => 'multidimensional';
0.000015,2,0.000008,no if "$]" >= 5.033006, feature => 'bareword_filehandles';
0.000017,2,0.000008,use Storable 'dclone';
0.000018,2,0.000009,use Feature::Compat::Try;
0.000018,2,0.000009,use JSON::Schema::Modern::Utilities qw(is_type A assert_keyword_type E abort);
0.000465,2,0.000232,use namespace::clean;
0.000000,0,0.000000,
0.000001,1,0.000001,with 'JSON::Schema::Modern::Vocabulary';
0.000000,0,0.000000,
0.000000,0,0.000000,sub vocabulary {
0.000003,1,0.000003,'https://json-schema.org/draft/2019-09/vocab/content' => 'draft2019-09',
0.000000,0,0.000000,'https://json-schema.org/draft/2020-12/vocab/content' => 'draft2020-12';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000006,3,0.000002,sub evaluation_order { 4 }
0.000000,0,0.000000,
0.000001,6,0.000000,sub keywords ($self, $spec_version) {
0.000000,0,0.000000,return (
0.000017,2,0.000008,qw(contentEncoding contentMediaType),
0.000000,0,0.000000,$spec_version ne 'draft7' ? 'contentSchema' : (),
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000013,4,0.000003,sub _traverse_keyword_contentEncoding ($self, $schema, $state) {
0.000001,1,0.000001,return if not assert_keyword_type($state, $schema, 'string');
0.000003,1,0.000003,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_contentEncoding ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not is_type('string', $data);
0.000000,0,0.000000,
0.000000,0,0.000000,if ($state->{validate_content_schemas}) {
0.000000,0,0.000000,my $decoder = $state->{evaluator}->get_encoding($schema->{contentEncoding});
0.000000,0,0.000000,abort($state, 'cannot find decoder for contentEncoding "%s"', $schema->{contentEncoding})
0.000000,0,0.000000,if not $decoder;
0.000000,0,0.000000,
0.000000,0,0.000000,# decode the data now, so we can report errors for the right keyword
0.000000,0,0.000000,try { $state->{_content_ref} = $decoder->(\$data) }
0.000000,0,0.000000,catch ($e) { return E($state, $e) }
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return A($state, $schema->{$state->{keyword}})
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,sub _traverse_keyword_contentMediaType { shift->_traverse_keyword_contentEncoding(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_contentMediaType ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not is_type('string', $data);
0.000000,0,0.000000,
0.000000,0,0.000000,if ($state->{validate_content_schemas}) {
0.000000,0,0.000000,my $decoder = $state->{evaluator}->get_media_type($schema->{contentMediaType});
0.000000,0,0.000000,abort($state, 'cannot find decoder for contentMediaType "%s"', $schema->{contentMediaType})
0.000000,0,0.000000,if not $decoder;
0.000000,0,0.000000,
0.000000,0,0.000000,# contentEncoding failed to decode the content
0.000000,0,0.000000,return 1 if exists $schema->{contentEncoding} and not exists $state->{_content_ref};
0.000000,0,0.000000,
0.000000,0,0.000000,# decode the data now, so we can report errors for the right keyword
0.000000,0,0.000000,try { $state->{_content_ref} = $decoder->($state->{_content_ref} // \$data) }
0.000000,0,0.000000,catch ($e) { return E($state, $e) }
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return A($state, $schema->{$state->{keyword}})
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,4,0.000000,sub _traverse_keyword_contentSchema ($self, $schema, $state) {
0.000000,0,0.000000,# since contentSchema should never be assumed to be evaluated in the context of the containing
0.000000,0,0.000000,# schema, it is not appropriate to gather identifiers found therein -- but we can still validate
0.000000,0,0.000000,# the subschema.
0.000008,1,0.000008,$self->traverse_subschema($schema, +{ %$state, identifiers => [] });
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_contentSchema ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not exists $schema->{contentMediaType};
0.000000,0,0.000000,return 1 if not is_type('string', $data);
0.000000,0,0.000000,
0.000000,0,0.000000,return A($state, dclone($schema->{contentSchema})) if not $state->{validate_content_schemas};
0.000000,0,0.000000,
0.000000,0,0.000000,return 1 if not exists $state->{_content_ref};  # contentMediaType failed to decode the content
0.000000,0,0.000000,
0.000000,0,0.000000,return 1 if $self->eval($state->{_content_ref}->$*, $schema->{contentSchema},
0.000000,0,0.000000,{ %$state, schema_path => $state->{schema_path}.'/contentSchema' });
0.000000,0,0.000000,return E($state, 'subschema is not valid');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000006,1,0.000006,1;
0.000000,0,0.000000,
0.000020,1,0.000020,__END__
