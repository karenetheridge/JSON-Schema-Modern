# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package MooX::TypeTiny;
0.000023,2,0.000012,use strict;
0.000034,2,0.000017,use warnings;
0.000000,1,0.000000,our $VERSION = '0.002003';
0.000002,1,0.000002,$VERSION =~ tr/_//d;
0.000000,0,0.000000,
0.000125,2,0.000063,use Moo::_Utils qw(_install_modifier);
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000004,7,0.000001,my $target = caller;
0.000005,7,0.000001,require Moo;
0.000564,7,0.000081,require Moo::Role;
0.000000,0,0.000000,
0.000014,7,0.000002,unless (Moo->is_class($target)) {
0.000000,0,0.000000,die "MooX::TypeTiny can only be used on Moo classes.";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,_install_modifier($target, 'before', ['has', 'extends', 'with'], sub {
0.000101,47,0.000002,my $am = Moo->_accessor_maker_for($target);
0.000000,0,0.000000,$am->does($_) or Moo::Role->apply_roles_to_object($am, $_)
0.000139,47,0.000003,for qw(MooX::TypeTiny::Role::GenerateAccessor);
0.000000,0,0.000000,
0.000000,0,0.000000,# make sure we have our own constructor
0.000162,47,0.000003,Moo->_constructor_maker_for($target);
0.000050,7,0.000007,});
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,__END__
