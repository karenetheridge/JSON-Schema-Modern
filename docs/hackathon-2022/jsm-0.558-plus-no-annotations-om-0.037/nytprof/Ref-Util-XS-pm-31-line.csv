# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Ref::Util::XS;
0.000000,0,0.000000,# ABSTRACT: XS implementation for Ref::Util
0.000000,1,0.000000,$Ref::Util::XS::VERSION = '0.117';
0.000022,2,0.000011,use strict;
0.000015,2,0.000008,use warnings;
0.000021,2,0.000010,use XSLoader;
0.000000,0,0.000000,
0.000093,3,0.000031,use Exporter 5.57 'import';
0.000000,0,0.000000,
0.000002,1,0.000002,our %EXPORT_TAGS = ( 'all' => [qw<
0.000000,0,0.000000,is_ref
0.000000,0,0.000000,is_scalarref
0.000000,0,0.000000,is_arrayref
0.000000,0,0.000000,is_hashref
0.000000,0,0.000000,is_coderef
0.000000,0,0.000000,is_regexpref
0.000000,0,0.000000,is_globref
0.000000,0,0.000000,is_formatref
0.000000,0,0.000000,is_ioref
0.000000,0,0.000000,is_refref
0.000000,0,0.000000,
0.000000,0,0.000000,is_plain_ref
0.000000,0,0.000000,is_plain_scalarref
0.000000,0,0.000000,is_plain_arrayref
0.000000,0,0.000000,is_plain_hashref
0.000000,0,0.000000,is_plain_coderef
0.000000,0,0.000000,is_plain_globref
0.000000,0,0.000000,is_plain_formatref
0.000000,0,0.000000,is_plain_refref
0.000000,0,0.000000,
0.000000,0,0.000000,is_blessed_ref
0.000000,0,0.000000,is_blessed_scalarref
0.000000,0,0.000000,is_blessed_arrayref
0.000000,0,0.000000,is_blessed_hashref
0.000000,0,0.000000,is_blessed_coderef
0.000000,0,0.000000,is_blessed_globref
0.000000,0,0.000000,is_blessed_formatref
0.000000,0,0.000000,is_blessed_refref
0.000000,0,0.000000,>] );
0.000000,0,0.000000,
0.000002,1,0.000002,our @EXPORT_OK   = ( @{ $EXPORT_TAGS{'all'} } );
0.000000,0,0.000000,
0.004285,1,0.004285,XSLoader::load('Ref::Util::XS', $Ref::Util::XS::{VERSION} ? ${ $Ref::Util::XS::{VERSION} } : ());
0.000000,0,0.000000,
0.000007,1,0.000007,if (_using_custom_ops()) {
0.000002,1,0.000002,for my $op (@{$EXPORT_TAGS{all}}) {
0.000159,2,0.000080,no strict 'refs';
0.000000,0,0.000000,*{"B::Deparse::pp_$op"} = sub {
0.000000,0,0.000000,my ($deparse, $bop, $cx) = @_;
0.000000,0,0.000000,my @kids = $deparse->deparse($bop->first, 6);
0.000000,0,0.000000,my $sib = $bop->first->sibling;
0.000000,0,0.000000,if (ref $sib ne 'B::NULL') {
0.000000,0,0.000000,push @kids, $deparse->deparse($sib, 6);
0.000000,0,0.000000,}
0.000000,0,0.000000,my $prefix
0.000000,0,0.000000,= (
0.000000,0,0.000000,exists &{"$deparse->{curstash}::$op"}
0.000000,0,0.000000,&& \&{"$deparse->{curstash}::$op"} == \&{__PACKAGE__.'::'.$op}
0.000000,0,0.000000,)
0.000000,0,0.000000,? '' : (__PACKAGE__.'::');
0.000000,0,0.000000,return "$prefix$op(" . join(", ", @kids) . ")";
0.000073,26,0.000003,};
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000011,1,0.000011,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
