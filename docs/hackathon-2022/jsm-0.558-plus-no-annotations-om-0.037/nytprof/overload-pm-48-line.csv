# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package overload;
0.000000,0,0.000000,
0.000026,2,0.000013,use strict;
0.000021,2,0.000011,no strict 'refs';
0.000286,2,0.000143,no warnings 'experimental::builtin';
0.000000,0,0.000000,
0.000001,1,0.000001,our $VERSION = '1.35';
0.000000,0,0.000000,
0.000005,1,0.000005,our %ops = (
0.000000,0,0.000000,with_assign         => "+ - * / % ** << >> x .",
0.000000,0,0.000000,assign              => "+= -= *= /= %= **= <<= >>= x= .=",
0.000000,0,0.000000,num_comparison      => "< <= >  >= == !=",
0.000000,0,0.000000,'3way_comparison'   => "<=> cmp",
0.000000,0,0.000000,str_comparison      => "lt le gt ge eq ne",
0.000000,0,0.000000,binary              => '& &= | |= ^ ^= &. &.= |. |.= ^. ^.=',
0.000000,0,0.000000,unary               => "neg ! ~ ~.",
0.000000,0,0.000000,mutators            => '++ --',
0.000000,0,0.000000,func                => "atan2 cos sin exp abs log sqrt int",
0.000000,0,0.000000,conversion          => 'bool "" 0+ qr',
0.000000,0,0.000000,iterators           => '<>',
0.000000,0,0.000000,filetest            => "-X",
0.000000,0,0.000000,dereferencing       => '${} @{} %{} &{} *{}',
0.000000,0,0.000000,matching            => '~~',
0.000000,0,0.000000,special             => 'nomethod fallback =',
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,1,0.000000,my %ops_seen;
0.000041,1,0.000041,@ops_seen{ map split(/ /), values %ops } = ();
0.000000,0,0.000000,
0.000000,0,0.000000,sub nil {}
0.000000,0,0.000000,
0.000000,0,0.000000,sub OVERLOAD {
0.000000,14,0.000000,my $package = shift;
0.000017,14,0.000001,my %arg = @_;
0.000006,14,0.000000,my $sub;
0.000035,14,0.000002,*{$package . "::(("} = \&nil; # Make it findable via fetchmethod.
0.000065,14,0.000005,for (keys %arg) {
0.000017,43,0.000000,if ($_ eq 'fallback') {
0.000019,11,0.000002,for my $sym (*{$package . "::()"}) {
0.000004,11,0.000000,*$sym = \&nil; # Make it findable via fetchmethod.
0.000009,11,0.000001,$$sym = $arg{$_};
0.000000,0,0.000000,}
0.000000,0,0.000000,} else {
0.000000,0,0.000000,warnings::warnif("overload arg '$_' is invalid")
0.000010,32,0.000000,unless exists $ops_seen{$_};
0.000009,32,0.000000,$sub = $arg{$_};
0.000006,32,0.000000,if (not ref $sub) {
0.000002,1,0.000002,$ {$package . "::(" . $_} = $sub;
0.000000,1,0.000000,$sub = \&nil;
0.000000,0,0.000000,}
0.000000,0,0.000000,#print STDERR "Setting '$ {'package'}::\cO$_' to \\&'$sub'.\n";
0.000035,32,0.000001,*{$package . "::(" . $_} = \&{ $sub };
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000016,14,0.000001,my $package = (caller())[0];
0.000000,0,0.000000,# *{$package . "::OVERLOAD"} = \&OVERLOAD;
0.000004,14,0.000000,shift;
0.000063,14,0.000005,$package->overload::OVERLOAD(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub unimport {
0.000001,1,0.000001,my $package = (caller())[0];
0.000000,1,0.000000,shift;
0.000003,1,0.000003,*{$package . "::(("} = \&nil;
0.000005,1,0.000005,for (@_) {
0.000000,0,0.000000,warnings::warnif("overload arg '$_' is invalid")
0.000002,4,0.000000,unless exists $ops_seen{$_};
0.000009,4,0.000002,delete $ {$package . "::"}{$_ eq 'fallback' ? '()' : "(" .$_};
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub Overloaded {
0.000000,0,0.000000,my $package = shift;
0.000000,0,0.000000,$package = ref $package if ref $package;
0.000000,0,0.000000,mycan ($package, '()') || mycan ($package, '((');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub ov_method {
0.000000,0,0.000000,my $globref = shift;
0.000000,0,0.000000,return undef unless $globref;
0.000000,0,0.000000,my $sub = \&{*$globref};
0.000108,2,0.000054,no overloading;
0.000000,0,0.000000,return $sub if $sub != \&nil;
0.000000,0,0.000000,return shift->can($ {*$globref});
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub OverloadedStringify {
0.000000,0,0.000000,my $package = shift;
0.000000,0,0.000000,$package = ref $package if ref $package;
0.000000,0,0.000000,#$package->can('(""')
0.000000,0,0.000000,ov_method mycan($package, '(""'), $package
0.000000,0,0.000000,or ov_method mycan($package, '(0+'), $package
0.000000,0,0.000000,or ov_method mycan($package, '(bool'), $package
0.000000,0,0.000000,or ov_method mycan($package, '(nomethod'), $package;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub Method {
0.000000,0,0.000000,my $package = shift;
0.000000,0,0.000000,if(ref $package) {
0.000000,0,0.000000,local $@;
0.000000,0,0.000000,local $!;
0.000000,0,0.000000,$package = builtin::blessed($package);
0.000000,0,0.000000,return undef if !defined $package;
0.000000,0,0.000000,}
0.000000,0,0.000000,#my $meth = $package->can('(' . shift);
0.000000,0,0.000000,ov_method mycan($package, '(' . shift), $package;
0.000000,0,0.000000,#return $meth if $meth ne \&nil;
0.000000,0,0.000000,#return $ {*{$meth}};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub AddrRef {
0.000091,2,0.000046,no overloading;
0.000000,0,0.000000,"$_[0]";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000001,1,0.000001,*StrVal = *AddrRef;
0.000000,0,0.000000,
0.000000,0,0.000000,sub mycan {				# Real can would leave stubs.
0.000000,0,0.000000,my ($package, $meth) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,local $@;
0.000000,0,0.000000,local $!;
0.000000,0,0.000000,require mro;
0.000000,0,0.000000,
0.000000,0,0.000000,my $mro = mro::get_linear_isa($package);
0.000000,0,0.000000,foreach my $p (@$mro) {
0.000000,0,0.000000,my $fqmeth = $p . q{::} . $meth;
0.000000,0,0.000000,return \*{$fqmeth} if defined &{$fqmeth};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return undef;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000001,1,0.000001,my %constants = (
0.000000,0,0.000000,'integer'	  =>  0x1000, # HINT_NEW_INTEGER
0.000000,0,0.000000,'float'	  =>  0x2000, # HINT_NEW_FLOAT
0.000000,0,0.000000,'binary'	  =>  0x4000, # HINT_NEW_BINARY
0.000000,0,0.000000,'q'	  =>  0x8000, # HINT_NEW_STRING
0.000000,0,0.000000,'qr'	  => 0x10000, # HINT_NEW_RE
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000192,2,0.000096,use warnings::register;
0.000000,0,0.000000,sub constant {
0.000000,0,0.000000,# Arguments: what, sub
0.000000,0,0.000000,while (@_) {
0.000000,0,0.000000,if (@_ == 1) {
0.000000,0,0.000000,warnings::warnif ("Odd number of arguments for overload::constant");
0.000000,0,0.000000,last;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif (!exists $constants {$_ [0]}) {
0.000000,0,0.000000,warnings::warnif ("'$_[0]' is not an overloadable type");
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif (!ref $_ [1] || "$_[1]" !~ /(^|=)CODE\(0x[0-9a-f]+\)$/) {
0.000000,0,0.000000,# Can't use C<ref $_[1] eq "CODE"> above as code references can be
0.000000,0,0.000000,# blessed, and C<ref> would return the package the ref is blessed into.
0.000000,0,0.000000,if (warnings::enabled) {
0.000000,0,0.000000,$_ [1] = "undef" unless defined $_ [1];
0.000000,0,0.000000,warnings::warn ("'$_[1]' is not a code reference");
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$^H{$_[0]} = $_[1];
0.000000,0,0.000000,$^H |= $constants{$_[0]};
0.000000,0,0.000000,}
0.000000,0,0.000000,shift, shift;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub remove_constant {
0.000000,0,0.000000,# Arguments: what, sub
0.000000,0,0.000000,while (@_) {
0.000000,0,0.000000,delete $^H{$_[0]};
0.000000,0,0.000000,$^H &= ~ $constants{$_[0]};
0.000000,0,0.000000,shift, shift;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000008,1,0.000008,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
