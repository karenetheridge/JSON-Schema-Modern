# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000002,2,0.000001,my $coerce_for_exception = ${$_[1]->{"\$coerce_for_exception"}};
0.000000,1,0.000000,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000001,1,0.000001,my $isa_check_for_valid = ${$_[1]->{"\$isa_check_for_valid"}};
0.000000,1,0.000000,my $isa_check_for_annotations = ${$_[1]->{"\$isa_check_for_annotations"}};
0.000000,1,0.000000,my $isa_check_for_exception = ${$_[1]->{"\$isa_check_for_exception"}};
0.000000,1,0.000000,my $isa_check_for_formatted_5fannotations = ${$_[1]->{"\$isa_check_for_formatted_5fannotations"}};
0.000000,1,0.000000,my $coerce_for_annotations = ${$_[1]->{"\$coerce_for_annotations"}};
0.000001,1,0.000001,my $coerce_for_errors = ${$_[1]->{"\$coerce_for_errors"}};
0.000000,1,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000000,1,0.000000,my $isa_check_for_output_5fformat = ${$_[1]->{"\$isa_check_for_output_5fformat"}};
0.000000,1,0.000000,my $isa_check_for_errors = ${$_[1]->{"\$isa_check_for_errors"}};
0.000000,1,0.000000,my $coerce_for_valid = ${$_[1]->{"\$coerce_for_valid"}};
0.000000,0,0.000000,package JSON::Schema::Modern::Result;
0.000068,2,0.000034,no warnings 'closure';
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package JSON::Schema::Modern::Result;
0.000000,0,0.000000,BEGIN {
0.000002,1,0.000002,$^H = 2018;
0.000000,1,0.000000,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000005,1,0.000005,%^H = (
0.000000,0,0.000000,);
0.000262,1,0.000262,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.000001,1,0.000001,my $invoker = CORE::shift();
0.000000,1,0.000000,my $class = CORE::ref($invoker) ? CORE::ref($invoker) : $invoker;
0.000000,1,0.000000,if ($class ne "JSON::Schema::Modern::Result") {
0.000000,0,0.000000,if ($Moo::MAKERS{$class}) {
0.000000,0,0.000000,if ($Moo::MAKERS{$class}{constructor}) {
0.000000,0,0.000000,package JSON::Schema::Modern::Result;
0.000000,0,0.000000,return $invoker->SUPER::new(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,Moo->_constructor_maker_for($class);
0.000000,0,0.000000,return $invoker->new(@_);
0.000000,0,0.000000,} elsif ($INC{"Moose.pm"} and my $meta = Class::MOP::get_metaclass_by_name($class)) {
0.000000,0,0.000000,return $meta->new_object(
0.000000,0,0.000000,$class->can("BUILDARGS") ? $class->BUILDARGS(@_)
0.000000,0,0.000000,: $class->Moo::Object::BUILDARGS(@_)
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,my $args = scalar @_ == 1
0.000000,0,0.000000,? CORE::ref $_[0] eq 'HASH'
0.000002,1,0.000002,? { %{ $_[0] } }
0.000000,0,0.000000,: Carp::croak("Single parameters to new() must be a HASH ref"
0.000000,0,0.000000,. " data => ". $_[0])
0.000000,0,0.000000,: @_ % 2
0.000000,0,0.000000,? Carp::croak("The new() method for $class expects a hash reference or a"
0.000000,0,0.000000,. " key/value list. You passed an odd number of arguments")
0.000000,0,0.000000,: {@_}
0.000000,0,0.000000,;
0.000001,1,0.000001,my $new = bless({}, $class);;
0.000000,0,0.000000,(exists $args->{"annotations"} and ($new->{"annotations"} = scalar do { my $value = do {
0.000000,0,0.000000,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => "annotations",
0.000000,0,0.000000,name     => "annotations",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.000000,0,0.000000,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.000000,0,0.000000,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.000000,0,0.000000,$coerce_for_annotations->($args->{"annotations"})),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"annotations\" failed: ".$@);
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.000000,0,0.000000,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000147,2,0.000073,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_arrayref($value)) and do { my $ok = 1; for my $i (@{$value}) { ($ok = 0, last) unless (Scalar::Util::blessed($i) and $i->isa(q[JSON::Schema::Modern::Annotation])) }; $ok } }) or Type::Tiny::_failed_check($isa_check_for_annotations, "ArrayRef[InstanceOf[\"JSON::Schema::Modern::Annotation\"]]", $value, "attribute_name","annotations","attribute_step","isa check","mgaca","0","varname","\$args->{\"annotations\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"errors"} and ($new->{"errors"} = scalar do { my $value = do {
0.000000,0,0.000000,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => "errors",
0.000000,0,0.000000,name     => "errors",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.000000,0,0.000000,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.000000,0,0.000000,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.000000,0,0.000000,$coerce_for_errors->($args->{"errors"})),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"errors\" failed: ".$@);
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.000000,0,0.000000,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000096,2,0.000048,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_arrayref($value)) and do { my $ok = 1; for my $i (@{$value}) { ($ok = 0, last) unless (Scalar::Util::blessed($i) and $i->isa(q[JSON::Schema::Modern::Error])) }; $ok } }) or Type::Tiny::_failed_check($isa_check_for_errors, "ArrayRef[InstanceOf[\"JSON::Schema::Modern::Error\"]]", $value, "attribute_name","errors","attribute_step","isa check","mgaca","0","varname","\$args->{\"errors\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"exception"} and ($new->{"exception"} = scalar do { my $value = do {
0.000000,0,0.000000,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => "exception",
0.000000,0,0.000000,name     => "exception",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.000000,0,0.000000,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.000000,0,0.000000,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.000000,0,0.000000,$coerce_for_exception->($args->{"exception"})),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"exception\" failed: ".$@);
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.000000,0,0.000000,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000047,2,0.000023,(do { no warnings "void"; package Type::Tiny; ((Scalar::Util::blessed($value) and $value->isa(q[JSON::PP::Boolean]))) or Type::Tiny::_failed_check($isa_check_for_exception, "InstanceOf[\"JSON::PP::Boolean\"]", $value, "attribute_name","exception","attribute_step","isa check","mgaca","0","varname","\$args->{\"exception\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,($new->{"formatted_annotations"} = scalar do { my $value = (
0.000000,0,0.000000,exists $args->{"formatted_annotations"}
0.000000,1,0.000000,? $args->{"formatted_annotations"}
0.000000,0,0.000000,: 1);
0.000047,5,0.000009,(do { no warnings "void"; package Type::Tiny; ((!ref $value and (!defined $value or $value eq q() or $value eq '0' or $value eq '1'))) or Type::Tiny::_failed_check($isa_check_for_formatted_5fannotations, "Bool", $value, "attribute_name","formatted_annotations","attribute_step","isa check","mgaca","0","varname","\$args->{\"formatted_annotations\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,),
0.000000,0,0.000000,($new->{"output_format"} = scalar do { my $value = (
0.000000,0,0.000000,exists $args->{"output_format"}
0.000000,1,0.000000,? $args->{"output_format"}
0.000000,0,0.000000,: "basic");
0.000132,5,0.000026,(do { no warnings "void"; package Type::Tiny; ((defined($value) and !ref($value) and $value =~ m{\A(?:(?:basic|d(?:ata_only|etailed)|flag|strict_basic|terse|verbose))\z})) or Type::Tiny::_failed_check($isa_check_for_output_5fformat, "Enum[\"flag\",\"basic\",\"strict_basic\",\"detailed\",\"verbose\",\"terse\",\"data_only\"]", $value, "attribute_name","output_format","attribute_step","isa check","mgaca","0","varname","\$args->{\"output_format\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,),
0.000000,1,0.000000,(exists $args->{"valid"} and ($new->{"valid"} = scalar do { my $value = do {
0.000002,1,0.000002,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => "valid",
0.000000,0,0.000000,name     => "valid",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.000001,1,0.000001,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.000000,1,0.000000,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.000013,1,0.000013,$coerce_for_valid->($args->{"valid"})),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"valid\" failed: ".$@);
0.000001,1,0.000001,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.000001,1,0.000001,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000154,5,0.000031,(do { no warnings "void"; package Type::Tiny; ((Scalar::Util::blessed($value) and $value->isa(q[JSON::PP::Boolean]))) or Type::Tiny::_failed_check($isa_check_for_valid, "InstanceOf[\"JSON::PP::Boolean\"]", $value, "attribute_name","valid","attribute_step","isa check","mgaca","0","varname","\$args->{\"valid\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(($args)[0]->{__no_BUILD__} or (
0.000038,1,0.000038,$new->JSON::Schema::Modern::Result::BUILD($args),
0.000000,0,0.000000,)),
0.000000,0,0.000000,return $new;
0.000000,0,0.000000,}
0.000001,1,0.000001,$$_UNQUOTED = \&new;
0.000000,0,0.000000,}
0.000006,1,0.000006,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
