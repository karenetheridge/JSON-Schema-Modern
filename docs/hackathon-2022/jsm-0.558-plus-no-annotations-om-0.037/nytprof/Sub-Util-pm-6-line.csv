# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,# Copyright (c) 2014 Paul Evans <leonerd@leonerd.org.uk>. All rights reserved.
0.000000,0,0.000000,# This program is free software; you can redistribute it and/or
0.000000,0,0.000000,# modify it under the same terms as Perl itself.
0.000000,0,0.000000,
0.000000,0,0.000000,package Sub::Util;
0.000000,0,0.000000,
0.000040,2,0.000020,use strict;
0.000202,2,0.000101,use warnings;
0.000000,0,0.000000,
0.000399,1,0.000399,require Exporter;
0.000000,0,0.000000,
0.000010,1,0.000010,our @ISA = qw( Exporter );
0.000002,1,0.000002,our @EXPORT_OK = qw(
0.000000,0,0.000000,prototype set_prototype
0.000000,0,0.000000,subname set_subname
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION    = "1.62";
0.000006,1,0.000006,$VERSION =~ tr/_//d;
0.000000,0,0.000000,
0.002629,1,0.002629,require List::Util; # as it has the XS
0.000017,1,0.000017,List::Util->VERSION( $VERSION ); # Ensure we got the right XS version (RT#100863)
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,Sub::Util - A selection of utility subroutines for subs and CODE references
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,use Sub::Util qw( prototype set_prototype subname set_subname );
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,C<Sub::Util> contains a selection of utility subroutines that are useful for
0.000000,0,0.000000,operating on subs and CODE references.
0.000000,0,0.000000,
0.000000,0,0.000000,The rationale for inclusion in this module is that the function performs some
0.000000,0,0.000000,work for which an XS implementation is essential because it cannot be
0.000000,0,0.000000,implemented in Pure Perl, and which is sufficiently-widely used across CPAN
0.000000,0,0.000000,that its popularity warrants inclusion in a core module, which this is.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 FUNCTIONS
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 prototype
0.000000,0,0.000000,
0.000000,0,0.000000,my $proto = prototype( $code )
0.000000,0,0.000000,
0.000000,0,0.000000,I<Since version 1.40.>
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the prototype of the given C<$code> reference, if it has one, as a
0.000000,0,0.000000,string. This is the same as the C<CORE::prototype> operator; it is included
0.000000,0,0.000000,here simply for symmetry and completeness with the other functions.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,sub prototype
0.000000,0,0.000000,{
0.000000,0,0.000000,my ( $code ) = @_;
0.000000,0,0.000000,return CORE::prototype( $code );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 set_prototype
0.000000,0,0.000000,
0.000000,0,0.000000,my $code = set_prototype $prototype, $code;
0.000000,0,0.000000,
0.000000,0,0.000000,I<Since version 1.40.>
0.000000,0,0.000000,
0.000000,0,0.000000,Sets the prototype of the function given by the C<$code> reference, or deletes
0.000000,0,0.000000,it if C<$prototype> is C<undef>. Returns the C<$code> reference itself.
0.000000,0,0.000000,
0.000000,0,0.000000,I<Caution>: This function takes arguments in a different order to the previous
0.000000,0,0.000000,copy of the code from C<Scalar::Util>. This is to match the order of
0.000000,0,0.000000,C<set_subname>, and other potential additions in this file. This order has
0.000000,0,0.000000,been chosen as it allows a neat and simple chaining of other
0.000000,0,0.000000,C<Sub::Util::set_*> functions as might become available, such as:
0.000000,0,0.000000,
0.000000,0,0.000000,my $code =
0.000000,0,0.000000,set_subname   name_here =>
0.000000,0,0.000000,set_prototype '&@'      =>
0.000000,0,0.000000,set_attribute ':lvalue' =>
0.000000,0,0.000000,sub { ...... };
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 subname
0.000000,0,0.000000,
0.000000,0,0.000000,my $name = subname( $code )
0.000000,0,0.000000,
0.000000,0,0.000000,I<Since version 1.40.>
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the name of the given C<$code> reference, if it has one. Normal named
0.000000,0,0.000000,subs will give a fully-qualified name consisting of the package and the
0.000000,0,0.000000,localname separated by C<::>. Anonymous code references will give C<__ANON__>
0.000000,0,0.000000,as the localname. If the package the code was compiled in has been deleted
0.000000,0,0.000000,(e.g. using C<delete_package> from L<Symbol>), C<__ANON__> will be returned as
0.000000,0,0.000000,the package name. If a name has been set using L</set_subname>, this name will be
0.000000,0,0.000000,returned instead.
0.000000,0,0.000000,
0.000000,0,0.000000,This function was inspired by C<sub_fullname> from L<Sub::Identify>. The
0.000000,0,0.000000,remaining functions that C<Sub::Identify> implements can easily be emulated
0.000000,0,0.000000,using regexp operations, such as
0.000000,0,0.000000,
0.000000,0,0.000000,sub get_code_info { return (subname $_[0]) =~ m/^(.+)::(.*?)$/ }
0.000000,0,0.000000,sub sub_name      { return (get_code_info $_[0])[0] }
0.000000,0,0.000000,sub stash_name    { return (get_code_info $_[0])[1] }
0.000000,0,0.000000,
0.000000,0,0.000000,I<Users of Sub::Name beware>: This function is B<not> the same as
0.000000,0,0.000000,C<Sub::Name::subname>; it returns the existing name of the sub rather than
0.000000,0,0.000000,changing it. To set or change a name, see instead L</set_subname>.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 set_subname
0.000000,0,0.000000,
0.000000,0,0.000000,my $code = set_subname $name, $code;
0.000000,0,0.000000,
0.000000,0,0.000000,I<Since version 1.40.>
0.000000,0,0.000000,
0.000000,0,0.000000,Sets the name of the function given by the C<$code> reference. Returns the
0.000000,0,0.000000,C<$code> reference itself. If the C<$name> is unqualified, the package of the
0.000000,0,0.000000,caller is used to qualify it.
0.000000,0,0.000000,
0.000000,0,0.000000,This is useful for applying names to anonymous CODE references so that stack
0.000000,0,0.000000,traces and similar situations, to give a useful name rather than having the
0.000000,0,0.000000,default of C<__ANON__>. Note that this name is only used for this situation;
0.000000,0,0.000000,the C<set_subname> will not install it into the symbol table; you will have to
0.000000,0,0.000000,do that yourself if required.
0.000000,0,0.000000,
0.000000,0,0.000000,However, since the name is not used by perl except as the return value of
0.000000,0,0.000000,C<caller>, for stack traces or similar, there is no actual requirement that
0.000000,0,0.000000,the name be syntactically valid as a perl function name. This could be used to
0.000000,0,0.000000,attach extra information that could be useful in debugging stack traces.
0.000000,0,0.000000,
0.000000,0,0.000000,This function was copied from C<Sub::Name::subname> and renamed to the naming
0.000000,0,0.000000,convention of this module.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 AUTHOR
0.000000,0,0.000000,
0.000000,0,0.000000,The general structure of this module was written by Paul Evans
0.000000,0,0.000000,<leonerd@leonerd.org.uk>.
0.000000,0,0.000000,
0.000000,0,0.000000,The XS implementation of L</set_subname> was copied from L<Sub::Name> by
0.000000,0,0.000000,Matthijs van Duin <xmath@cpan.org>
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000005,1,0.000005,1;
