# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Symbol;
0.000000,0,0.000000,
0.000042,2,0.000021,use strict;
0.000171,2,0.000086,use warnings;
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,Symbol - manipulate Perl symbols and their names
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,use Symbol;
0.000000,0,0.000000,
0.000000,0,0.000000,$sym = gensym;
0.000000,0,0.000000,open($sym, '<', "filename");
0.000000,0,0.000000,$_ = <$sym>;
0.000000,0,0.000000,# etc.
0.000000,0,0.000000,
0.000000,0,0.000000,ungensym $sym;      # no effect
0.000000,0,0.000000,
0.000000,0,0.000000,# replace *FOO{IO} handle but not $FOO, %FOO, etc.
0.000000,0,0.000000,*FOO = geniosym;
0.000000,0,0.000000,
0.000000,0,0.000000,print qualify("x"), "\n";              # "main::x"
0.000000,0,0.000000,print qualify("x", "FOO"), "\n";       # "FOO::x"
0.000000,0,0.000000,print qualify("BAR::x"), "\n";         # "BAR::x"
0.000000,0,0.000000,print qualify("BAR::x", "FOO"), "\n";  # "BAR::x"
0.000000,0,0.000000,print qualify("STDOUT", "FOO"), "\n";  # "main::STDOUT" (global)
0.000000,0,0.000000,print qualify(\*x), "\n";              # returns \*x
0.000000,0,0.000000,print qualify(\*x, "FOO"), "\n";       # returns \*x
0.000000,0,0.000000,
0.000000,0,0.000000,use strict refs;
0.000000,0,0.000000,print { qualify_to_ref $fh } "foo!\n";
0.000000,0,0.000000,$ref = qualify_to_ref $name, $pkg;
0.000000,0,0.000000,
0.000000,0,0.000000,use Symbol qw(delete_package);
0.000000,0,0.000000,delete_package('Foo::Bar');
0.000000,0,0.000000,print "deleted\n" unless exists $Foo::{'Bar::'};
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,C<Symbol::gensym> creates an anonymous glob and returns a reference
0.000000,0,0.000000,to it.  Such a glob reference can be used as a file or directory
0.000000,0,0.000000,handle.
0.000000,0,0.000000,
0.000000,0,0.000000,For backward compatibility with older implementations that didn't
0.000000,0,0.000000,support anonymous globs, C<Symbol::ungensym> is also provided.
0.000000,0,0.000000,But it doesn't do anything.
0.000000,0,0.000000,
0.000000,0,0.000000,C<Symbol::geniosym> creates an anonymous IO handle.  This can be
0.000000,0,0.000000,assigned into an existing glob without affecting the non-IO portions
0.000000,0,0.000000,of the glob.
0.000000,0,0.000000,
0.000000,0,0.000000,C<Symbol::qualify> turns unqualified symbol names into qualified
0.000000,0,0.000000,variable names (e.g. "myvar" -E<gt> "MyPackage::myvar").  If it is given a
0.000000,0,0.000000,second parameter, C<qualify> uses it as the default package;
0.000000,0,0.000000,otherwise, it uses the package of its caller.  Regardless, global
0.000000,0,0.000000,variable names (e.g. "STDOUT", "ENV", "SIG") are always qualified with
0.000000,0,0.000000,"main::".
0.000000,0,0.000000,
0.000000,0,0.000000,Qualification applies only to symbol names (strings).  References are
0.000000,0,0.000000,left unchanged under the assumption that they are glob references,
0.000000,0,0.000000,which are qualified by their nature.
0.000000,0,0.000000,
0.000000,0,0.000000,C<Symbol::qualify_to_ref> is just like C<Symbol::qualify> except that it
0.000000,0,0.000000,returns a glob ref rather than a symbol name, so you can use the result
0.000000,0,0.000000,even if C<use strict 'refs'> is in effect.
0.000000,0,0.000000,
0.000000,0,0.000000,C<Symbol::delete_package> wipes out a whole package namespace.  Note
0.000000,0,0.000000,this routine is not exported by default--you may want to import it
0.000000,0,0.000000,explicitly.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 BUGS
0.000000,0,0.000000,
0.000000,0,0.000000,C<Symbol::delete_package> is a bit too powerful. It undefines every symbol that
0.000000,0,0.000000,lives in the specified package. Since perl, for performance reasons, does not
0.000000,0,0.000000,perform a symbol table lookup each time a function is called or a global
0.000000,0,0.000000,variable is accessed, some code that has already been loaded and that makes use
0.000000,0,0.000000,of symbols in package C<Foo> may stop working after you delete C<Foo>, even if
0.000000,0,0.000000,you reload the C<Foo> module afterwards.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000001,1,0.000001,require Exporter;
0.000008,1,0.000008,our @ISA = qw(Exporter);
0.000000,1,0.000000,our @EXPORT = qw(gensym ungensym qualify qualify_to_ref);
0.000000,1,0.000000,our @EXPORT_OK = qw(delete_package geniosym);
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = '1.09';
0.000000,0,0.000000,
0.000001,1,0.000001,my $genpkg = "Symbol::";
0.000000,1,0.000000,my $genseq = 0;
0.000000,0,0.000000,
0.000008,1,0.000008,my %global = map {$_ => 1} qw(ARGV ARGVOUT ENV INC SIG STDERR STDIN STDOUT);
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Note that we never _copy_ the glob; we just make a ref to it.
0.000000,0,0.000000,# If we did copy it, then SVf_FAKE would be set on the copy, and
0.000000,0,0.000000,# glob-specific behaviors (e.g. C<*$ref = \&func>) wouldn't work.
0.000000,0,0.000000,#
0.000000,0,0.000000,sub gensym () {
0.000000,0,0.000000,my $name = "GEN" . $genseq++;
0.000406,2,0.000203,no strict 'refs';
0.000000,0,0.000000,my $ref = \*{$genpkg . $name};
0.000000,0,0.000000,delete $$genpkg{$name};
0.000000,0,0.000000,$ref;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub geniosym () {
0.000000,0,0.000000,my $sym = gensym();
0.000000,0,0.000000,# force the IO slot to be filled
0.000000,0,0.000000,select(select $sym);
0.000000,0,0.000000,*$sym{IO};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub ungensym ($) {}
0.000000,0,0.000000,
0.000000,0,0.000000,sub qualify ($;$) {
0.000000,0,0.000000,my ($name) = @_;
0.000000,0,0.000000,if (!ref($name) && index($name, '::') == -1 && index($name, "'") == -1) {
0.000000,0,0.000000,my $pkg;
0.000000,0,0.000000,# Global names: special character, "^xyz", or other. 
0.000000,0,0.000000,if ($name =~ /^(([^a-z])|(\^[a-z_]+))\z/i || $global{$name}) {
0.000000,0,0.000000,# RGS 2001-11-05 : translate leading ^X to control-char
0.000000,0,0.000000,$name =~ s/^\^([a-z_])/'qq(\c'.$1.')'/eei;
0.000000,0,0.000000,$pkg = "main";
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$pkg = (@_ > 1) ? $_[1] : caller;
0.000000,0,0.000000,}
0.000000,0,0.000000,$name = $pkg . "::" . $name;
0.000000,0,0.000000,}
0.000000,0,0.000000,$name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub qualify_to_ref ($;$) {
0.000248,2,0.000124,no strict 'refs';
0.000000,0,0.000000,return \*{ qualify $_[0], @_ > 1 ? $_[1] : caller };
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# of Safe.pm lineage
0.000000,0,0.000000,#
0.000000,0,0.000000,sub delete_package ($) {
0.000000,0,0.000000,my $pkg = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,# expand to full symbol table name if needed
0.000000,0,0.000000,
0.000000,0,0.000000,unless ($pkg =~ /^main::.*::$/) {
0.000000,0,0.000000,$pkg = "main$pkg"	if	$pkg =~ /^::/;
0.000000,0,0.000000,$pkg = "main::$pkg"	unless	$pkg =~ /^main::/;
0.000000,0,0.000000,$pkg .= '::'		unless	$pkg =~ /::$/;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my($stem, $leaf) = $pkg =~ m/(.*::)(\w+::)$/;
0.000061,2,0.000031,no strict 'refs';
0.000000,0,0.000000,my $stem_symtab = *{$stem}{HASH};
0.000000,0,0.000000,return unless defined $stem_symtab and exists $stem_symtab->{$leaf};
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,# free all the symbols in the package
0.000000,0,0.000000,
0.000000,0,0.000000,my $leaf_symtab = *{$stem_symtab->{$leaf}}{HASH};
0.000000,0,0.000000,foreach my $name (keys %$leaf_symtab) {
0.000000,0,0.000000,undef *{$pkg . $name};
0.000000,0,0.000000,}
0.000100,2,0.000050,use strict 'refs';
0.000000,0,0.000000,
0.000000,0,0.000000,# delete the symbol table
0.000000,0,0.000000,
0.000000,0,0.000000,%$leaf_symtab = ();
0.000000,0,0.000000,delete $stem_symtab->{$leaf};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,1;
