# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,#
0.000000,0,0.000000,
0.000000,0,0.000000,package IO::File;
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,IO::File - supply object methods for filehandles
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,use IO::File;
0.000000,0,0.000000,
0.000000,0,0.000000,$fh = IO::File->new();
0.000000,0,0.000000,if ($fh->open("< file")) {
0.000000,0,0.000000,print <$fh>;
0.000000,0,0.000000,$fh->close;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,$fh = IO::File->new("> file");
0.000000,0,0.000000,if (defined $fh) {
0.000000,0,0.000000,print $fh "bar\n";
0.000000,0,0.000000,$fh->close;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,$fh = IO::File->new("file", "r");
0.000000,0,0.000000,if (defined $fh) {
0.000000,0,0.000000,print <$fh>;
0.000000,0,0.000000,undef $fh;       # automatically closes the file
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,$fh = IO::File->new("file", O_WRONLY|O_APPEND);
0.000000,0,0.000000,if (defined $fh) {
0.000000,0,0.000000,print $fh "corge\n";
0.000000,0,0.000000,
0.000000,0,0.000000,$pos = $fh->getpos;
0.000000,0,0.000000,$fh->setpos($pos);
0.000000,0,0.000000,
0.000000,0,0.000000,undef $fh;       # automatically closes the file
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,autoflush STDOUT 1;
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,C<IO::File> inherits from C<IO::Handle> and C<IO::Seekable>. It extends
0.000000,0,0.000000,these classes with methods that are specific to file handles.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 CONSTRUCTOR
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item new ( FILENAME [,MODE [,PERMS]] )
0.000000,0,0.000000,
0.000000,0,0.000000,Creates an C<IO::File>.  If it receives any parameters, they are passed to
0.000000,0,0.000000,the method C<open>; if the open fails, the object is destroyed.  Otherwise,
0.000000,0,0.000000,it is returned to the caller.
0.000000,0,0.000000,
0.000000,0,0.000000,=item new_tmpfile
0.000000,0,0.000000,
0.000000,0,0.000000,Creates an C<IO::File> opened for read/write on a newly created temporary
0.000000,0,0.000000,file.  On systems where this is possible, the temporary file is anonymous
0.000000,0,0.000000,(i.e. it is unlinked after creation, but held open).  If the temporary
0.000000,0,0.000000,file cannot be created or opened, the C<IO::File> object is destroyed.
0.000000,0,0.000000,Otherwise, it is returned to the caller.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 METHODS
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item open( FILENAME [,MODE [,PERMS]] )
0.000000,0,0.000000,
0.000000,0,0.000000,=item open( FILENAME, IOLAYERS )
0.000000,0,0.000000,
0.000000,0,0.000000,C<open> accepts one, two or three parameters.  With one parameter,
0.000000,0,0.000000,it is just a front end for the built-in C<open> function.  With two or three
0.000000,0,0.000000,parameters, the first parameter is a filename that may include
0.000000,0,0.000000,whitespace or other special characters, and the second parameter is
0.000000,0,0.000000,the open mode, optionally followed by a file permission value.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<IO::File::open> receives a Perl mode string ("E<gt>", "+E<lt>", etc.)
0.000000,0,0.000000,or an ANSI C fopen() mode string ("w", "r+", etc.), it uses the basic
0.000000,0,0.000000,Perl C<open> operator (but protects any special characters).
0.000000,0,0.000000,
0.000000,0,0.000000,If C<IO::File::open> is given a numeric mode, it passes that mode
0.000000,0,0.000000,and the optional permissions value to the Perl C<sysopen> operator.
0.000000,0,0.000000,The permissions default to 0666.
0.000000,0,0.000000,
0.000000,0,0.000000,If C<IO::File::open> is given a mode that includes the C<:> character,
0.000000,0,0.000000,it passes all the three arguments to the three-argument C<open> operator.
0.000000,0,0.000000,
0.000000,0,0.000000,For convenience, C<IO::File> exports the O_XXX constants from the
0.000000,0,0.000000,Fcntl module, if this module is available.
0.000000,0,0.000000,
0.000000,0,0.000000,=item binmode( [LAYER] )
0.000000,0,0.000000,
0.000000,0,0.000000,C<binmode> sets C<binmode> on the underlying C<IO> object, as documented
0.000000,0,0.000000,in C<perldoc -f binmode>.
0.000000,0,0.000000,
0.000000,0,0.000000,C<binmode> accepts one optional parameter, which is the layer to be
0.000000,0,0.000000,passed on to the C<binmode> call.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NOTE
0.000000,0,0.000000,
0.000000,0,0.000000,Some operating systems may perform  C<IO::File::new()> or C<IO::File::open()>
0.000000,0,0.000000,on a directory without errors.  This behavior is not portable and not
0.000000,0,0.000000,suggested for use.  Using C<opendir()> and C<readdir()> or C<IO::Dir> are
0.000000,0,0.000000,suggested instead.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SEE ALSO
0.000000,0,0.000000,
0.000000,0,0.000000,L<perlfunc>, 
0.000000,0,0.000000,L<perlop/"I/O Operators">,
0.000000,0,0.000000,L<IO::Handle>,
0.000000,0,0.000000,L<IO::Seekable>,
0.000000,0,0.000000,L<IO::Dir>
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 HISTORY
0.000000,0,0.000000,
0.000000,0,0.000000,Derived from FileHandle.pm by Graham Barr E<lt>F<gbarr@pobox.com>E<gt>.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000062,2,0.000031,use 5.008_001;
0.000039,2,0.000019,use strict;
0.000033,2,0.000016,use Carp;
0.000598,2,0.000299,use Symbol;
0.000455,2,0.000228,use SelectSaver;
0.000760,2,0.000380,use IO::Seekable;
0.000000,0,0.000000,
0.000000,1,0.000000,require Exporter;
0.000000,0,0.000000,
0.000008,1,0.000008,our @ISA = qw(IO::Handle IO::Seekable Exporter);
0.000000,0,0.000000,
0.000001,1,0.000001,our $VERSION = "1.48";
0.000000,0,0.000000,
0.000000,1,0.000000,our @EXPORT = @IO::Seekable::EXPORT;
0.000000,0,0.000000,
0.000001,1,0.000001,eval {
0.000000,0,0.000000,# Make all Fcntl O_XXX constants available for importing
0.000000,1,0.000000,require Fcntl;
0.000055,1,0.000055,my @O = grep /^O_/, @Fcntl::EXPORT;
0.000001,1,0.000001,Fcntl->import(@O);  # first we import what we want to export
0.000004,1,0.000004,push(@EXPORT, @O);
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000000,0,0.000000,################################################
0.000000,0,0.000000,## Constructor
0.000000,0,0.000000,##
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,my $type = shift;
0.000000,0,0.000000,my $class = ref($type) || $type || "IO::File";
0.000000,0,0.000000,@_ >= 0 && @_ <= 3
0.000000,0,0.000000,or croak "usage: $class->new([FILENAME [,MODE [,PERMS]]])";
0.000000,0,0.000000,my $fh = $class->SUPER::new();
0.000000,0,0.000000,if (@_) {
0.000000,0,0.000000,$fh->open(@_)
0.000000,0,0.000000,or return undef;
0.000000,0,0.000000,}
0.000000,0,0.000000,$fh;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,################################################
0.000000,0,0.000000,## Open
0.000000,0,0.000000,##
0.000000,0,0.000000,
0.000000,0,0.000000,sub open {
0.000000,0,0.000000,@_ >= 2 && @_ <= 4 or croak 'usage: $fh->open(FILENAME [,MODE [,PERMS]])';
0.000000,0,0.000000,my ($fh, $file) = @_;
0.000000,0,0.000000,if (@_ > 2) {
0.000000,0,0.000000,my ($mode, $perms) = @_[2, 3];
0.000000,0,0.000000,if ($mode =~ /^\d+$/) {
0.000000,0,0.000000,defined $perms or $perms = 0666;
0.000000,0,0.000000,return sysopen($fh, $file, $mode, $perms);
0.000000,0,0.000000,} elsif ($mode =~ /:/) {
0.000000,0,0.000000,return open($fh, $mode, $file) if @_ == 3;
0.000000,0,0.000000,croak 'usage: $fh->open(FILENAME, IOLAYERS)';
0.000000,0,0.000000,} else {
0.000000,0,0.000000,return open($fh, IO::Handle::_open_mode_string($mode), $file);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,open($fh, $file);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,################################################
0.000000,0,0.000000,## Binmode
0.000000,0,0.000000,##
0.000000,0,0.000000,
0.000000,0,0.000000,sub binmode {
0.000000,0,0.000000,( @_ == 1 or @_ == 2 ) or croak 'usage $fh->binmode([LAYER])';
0.000000,0,0.000000,
0.000000,0,0.000000,my($fh, $layer) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,return binmode $$fh unless $layer;
0.000000,0,0.000000,return binmode $$fh, $layer;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,1;
