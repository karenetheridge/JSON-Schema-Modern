# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Exporter::Heavy;
0.000000,0,0.000000,
0.000024,2,0.000012,use strict;
0.000622,2,0.000311,no strict 'refs';
0.000000,0,0.000000,
0.000000,0,0.000000,# On one line so MakeMaker will see it.
0.000000,1,0.000000,our $VERSION = '5.77';
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,Exporter::Heavy - Exporter guts
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,(internal use only)
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,No user-serviceable parts inside.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# We go to a lot of trouble not to 'require Carp' at file scope,
0.000000,0,0.000000,#  because Carp requires Exporter, and something has to give.
0.000000,0,0.000000,#
0.000000,0,0.000000,
0.000000,0,0.000000,sub _rebuild_cache {
0.000000,0,0.000000,my ($pkg, $exports, $cache) = @_;
0.000000,0,0.000000,s/^&// foreach @$exports;
0.000000,0,0.000000,@{$cache}{@$exports} = (1) x @$exports;
0.000000,0,0.000000,my $ok = \@{"${pkg}::EXPORT_OK"};
0.000000,0,0.000000,if (@$ok) {
0.000000,0,0.000000,s/^&// foreach @$ok;
0.000000,0,0.000000,@{$cache}{@$ok} = (1) x @$ok;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub heavy_export {
0.000000,0,0.000000,
0.000000,0,0.000000,# Save the old __WARN__ handler in case it was defined
0.000018,22,0.000001,my $oldwarn = $SIG{__WARN__};
0.000000,0,0.000000,
0.000000,0,0.000000,# First make import warnings look like they're coming from the "use".
0.000000,0,0.000000,local $SIG{__WARN__} = sub {
0.000000,0,0.000000,# restore it back so proper stacking occurs
0.000000,0,0.000000,local $SIG{__WARN__} = $oldwarn;
0.000000,0,0.000000,my $text = shift;
0.000000,0,0.000000,if ($text =~ s/ at \S*Exporter\S*.pm line \d+.*\n//) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,local $Carp::CarpLevel = 1;	# ignore package calling us too.
0.000000,0,0.000000,Carp::carp($text);
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,warn $text;
0.000000,0,0.000000,}
0.000065,22,0.000003,};
0.000000,0,0.000000,local $SIG{__DIE__} = sub {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,local $Carp::CarpLevel = 1;	# ignore package calling us too.
0.000000,0,0.000000,Carp::croak("$_[0]Illegal null symbol in \@${1}::EXPORT")
0.000000,0,0.000000,if $_[0] =~ /^Unable to create sub named "(.*?)::"/;
0.000046,22,0.000002,};
0.000000,0,0.000000,
0.000016,22,0.000001,my($pkg, $callpkg, @imports) = @_;
0.000007,22,0.000000,my($type, $sym, $cache_is_current, $oops);
0.000000,0,0.000000,my($exports, $export_cache) = (\@{"${pkg}::EXPORT"},
0.000031,22,0.000001,$Exporter::Cache{$pkg} ||= {});
0.000000,0,0.000000,
0.000013,22,0.000001,if (@imports) {
0.000006,12,0.000000,if (!%$export_cache) {
0.000000,0,0.000000,_rebuild_cache ($pkg, $exports, $export_cache);
0.000000,0,0.000000,$cache_is_current = 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000055,12,0.000005,if (grep m{^[/!:]}, @imports) {
0.000007,9,0.000001,my $tagsref = \%{"${pkg}::EXPORT_TAGS"};
0.000000,9,0.000000,my $tagdata;
0.000000,0,0.000000,my %imports;
0.000000,0,0.000000,my($remove, $spec, @names, @allexports);
0.000000,0,0.000000,# negated first item implies starting with default set:
0.000023,9,0.000003,unshift @imports, ':DEFAULT' if $imports[0] =~ m/^!/;
0.000005,9,0.000001,foreach $spec (@imports){
0.000018,12,0.000002,$remove = $spec =~ s/^!//;
0.000000,0,0.000000,
0.000023,12,0.000002,if ($spec =~ s/^://){
0.000027,10,0.000003,if ($spec eq 'DEFAULT'){
0.000000,0,0.000000,@names = @$exports;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($tagdata = $tagsref->{$spec}) {
0.000000,0,0.000000,@names = @$tagdata;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,warn qq["$spec" is not defined in %${pkg}::EXPORT_TAGS];
0.000000,0,0.000000,++$oops;
0.000000,0,0.000000,next;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($spec =~ m:^/(.*)/$:){
0.000000,0,0.000000,my $patn = $1;
0.000000,0,0.000000,@allexports = keys %$export_cache unless @allexports; # only do keys once
0.000000,0,0.000000,@names = grep(/$patn/, @allexports); # not anchored by default
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000003,2,0.000002,@names = ($spec); # is a normal symbol name
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,12,0.000000,warn "Import ".($remove ? "del":"add").": @names "
0.000000,0,0.000000,if $Exporter::Verbose;
0.000000,0,0.000000,
0.000006,12,0.000000,if ($remove) {
0.000002,2,0.000001,foreach $sym (@names) { delete $imports{$sym} } 
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000033,10,0.000003,@imports{@names} = (1) x @names;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000021,9,0.000002,@imports = keys %imports;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,12,0.000000,my @carp;
0.000007,12,0.000001,foreach $sym (@imports) {
0.000019,95,0.000000,if (!$export_cache->{$sym}) {
0.000005,1,0.000005,if ($sym =~ m/^\d/) {
0.000000,0,0.000000,$pkg->VERSION($sym); # inherit from UNIVERSAL
0.000000,0,0.000000,# If the version number was the only thing specified
0.000000,0,0.000000,# then we should act as if nothing was specified:
0.000000,0,0.000000,if (@imports == 1) {
0.000000,0,0.000000,@imports = @$exports;
0.000000,0,0.000000,last;
0.000000,0,0.000000,}
0.000000,0,0.000000,# We need a way to emulate 'use Foo ()' but still
0.000000,0,0.000000,# allow an easy version check: "use Foo 1.23, ''";
0.000000,0,0.000000,if (@imports == 2 and !$imports[1]) {
0.000000,0,0.000000,@imports = ();
0.000000,0,0.000000,last;
0.000000,0,0.000000,}
0.000000,0,0.000000,} elsif ($sym !~ s/^&// || !$export_cache->{$sym}) {
0.000000,0,0.000000,# Last chance - see if they've updated EXPORT_OK since we
0.000000,0,0.000000,# cached it.
0.000000,0,0.000000,
0.000000,0,0.000000,unless ($cache_is_current) {
0.000000,0,0.000000,%$export_cache = ();
0.000000,0,0.000000,_rebuild_cache ($pkg, $exports, $export_cache);
0.000000,0,0.000000,$cache_is_current = 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if (!$export_cache->{$sym}) {
0.000000,0,0.000000,# accumulate the non-exports
0.000000,0,0.000000,push @carp,
0.000000,0,0.000000,qq["$sym" is not exported by the $pkg module];
0.000000,0,0.000000,$oops++;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000004,12,0.000000,if ($oops) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak(join("\n", @carp, "Can't continue after import errors"));
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000014,10,0.000001,@imports = @$exports;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my($fail, $fail_cache) = (\@{"${pkg}::EXPORT_FAIL"},
0.000042,22,0.000002,$Exporter::FailCache{$pkg} ||= {});
0.000000,0,0.000000,
0.000007,22,0.000000,if (@$fail) {
0.000000,0,0.000000,if (!%$fail_cache) {
0.000000,0,0.000000,# Build cache of symbols. Optimise the lookup by adding
0.000000,0,0.000000,# barewords twice... both with and without a leading &.
0.000000,0,0.000000,# (Technique could be applied to $export_cache at cost of memory)
0.000000,0,0.000000,my @expanded = map { /^\w/ ? ($_, '&'.$_) : $_ } @$fail;
0.000000,0,0.000000,warn "${pkg}::EXPORT_FAIL cached: @expanded" if $Exporter::Verbose;
0.000000,0,0.000000,@{$fail_cache}{@expanded} = (1) x @expanded;
0.000000,0,0.000000,}
0.000000,0,0.000000,my @failed;
0.000000,0,0.000000,foreach $sym (@imports) { push(@failed, $sym) if $fail_cache->{$sym} }
0.000000,0,0.000000,if (@failed) {
0.000000,0,0.000000,@failed = $pkg->export_fail(@failed);
0.000000,0,0.000000,foreach $sym (@failed) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::carp(qq["$sym" is not implemented by the $pkg module ],
0.000000,0,0.000000,"on this architecture");
0.000000,0,0.000000,}
0.000000,0,0.000000,if (@failed) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak("Can't continue after import errors");
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000007,22,0.000000,warn "Importing into $callpkg from $pkg: ",
0.000000,0,0.000000,join(", ",sort @imports) if $Exporter::Verbose;
0.000000,0,0.000000,
0.000180,22,0.000008,foreach $sym (@imports) {
0.000000,0,0.000000,# shortcut for the common case of no type character
0.000475,227,0.000002,(*{"${callpkg}::$sym"} = \&{"${pkg}::$sym"}, next)
0.000000,0,0.000000,unless $sym =~ s/^(\W)//;
0.000017,53,0.000000,$type = $1;
0.000286,2,0.000143,no warnings 'once';
0.000000,0,0.000000,*{"${callpkg}::$sym"} =
0.000000,0,0.000000,$type eq '&' ? \&{"${pkg}::$sym"} :
0.000000,0,0.000000,$type eq '$' ? \${"${pkg}::$sym"} :
0.000000,0,0.000000,$type eq '@' ? \@{"${pkg}::$sym"} :
0.000000,0,0.000000,$type eq '%' ? \%{"${pkg}::$sym"} :
0.000000,0,0.000000,$type eq '*' ?  *{"${pkg}::$sym"} :
0.000136,53,0.000003,do { require Carp; Carp::croak("Can't export symbol: $type$sym") };
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub heavy_export_to_level
0.000000,0,0.000000,{
0.000000,0,0.000000,my $pkg = shift;
0.000000,0,0.000000,my $level = shift;
0.000000,0,0.000000,(undef) = shift;			# XXX redundant arg
0.000000,0,0.000000,my $callpkg = caller($level);
0.000000,0,0.000000,$pkg->export($callpkg, @_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Utility functions
0.000000,0,0.000000,
0.000000,0,0.000000,sub _push_tags {
0.000003,4,0.000001,my($pkg, $var, $syms) = @_;
0.000003,4,0.000001,my @nontag = ();
0.000006,4,0.000001,my $export_tags = \%{"${pkg}::EXPORT_TAGS"};
0.000000,0,0.000000,push(@{"${pkg}::$var"},
0.000019,4,0.000005,map { $export_tags->{$_} ? @{$export_tags->{$_}} 
0.000000,0,0.000000,: scalar(push(@nontag,$_),$_) }
0.000000,0,0.000000,(@$syms) ? @$syms : keys %$export_tags);
0.000009,4,0.000002,if (@nontag and $^W) {
0.000000,0,0.000000,# This may change to a die one day
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::carp(join(", ", @nontag)." are not tags of $pkg");
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub heavy_require_version {
0.000000,0,0.000000,my($self, $wanted) = @_;
0.000000,0,0.000000,my $pkg = ref $self || $self;
0.000000,0,0.000000,return ${pkg}->VERSION($wanted);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub heavy_export_tags {
0.000000,0,0.000000,_push_tags((caller)[0], "EXPORT",    \@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub heavy_export_ok_tags {
0.000020,4,0.000005,_push_tags((caller)[0], "EXPORT_OK", \@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
