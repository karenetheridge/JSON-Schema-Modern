# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000026,2,0.000013,use strict;
0.000035,2,0.000017,use warnings;
0.000000,0,0.000000,package JSON::Schema::Modern::Error;
0.000000,0,0.000000,# vim: set ts=8 sts=2 sw=2 tw=100 et :
0.000000,0,0.000000,# ABSTRACT: Contains a single error from a JSON Schema evaluation
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = '0.559';
0.000000,0,0.000000,
0.000027,2,0.000013,use 5.020;
0.000022,2,0.000011,use Moo;
0.000045,3,0.000015,use strictures 2;
0.000038,2,0.000019,use experimental qw(signatures postderef);
0.000024,2,0.000012,use if "$]" >= 5.022, experimental => 're_strict';
0.000019,2,0.000010,no if "$]" >= 5.031009, feature => 'indirect';
0.000017,2,0.000008,no if "$]" >= 5.033001, feature => 'multidimensional';
0.000015,2,0.000007,no if "$]" >= 5.033006, feature => 'bareword_filehandles';
0.000016,2,0.000008,use Safe::Isa;
0.001023,2,0.000512,use JSON::PP ();
0.000029,2,0.000015,use MooX::TypeTiny;
0.000043,2,0.000022,use Types::Standard qw(Str Undef InstanceOf Enum);
0.001379,2,0.000690,use namespace::clean;
0.000000,0,0.000000,
0.000000,0,0.000000,use overload
0.000245,2,0.000122,'""' => sub { $_[0]->stringify };
0.000000,0,0.000000,
0.000005,1,0.000005,has [qw(
0.000000,0,0.000000,instance_location
0.000000,0,0.000000,keyword_location
0.000000,0,0.000000,error
0.000000,0,0.000000,)] => (
0.000000,0,0.000000,is => 'ro',
0.000000,0,0.000000,isa => Str,
0.000000,0,0.000000,required => 1,
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,has absolute_keyword_location => (
0.000000,0,0.000000,is => 'ro',
0.000000,0,0.000000,isa => InstanceOf['Mojo::URL'],
0.017088,4196,0.000004,coerce => sub { $_[0]->$_isa('Mojo::URL') ? $_[0] : Mojo::URL->new($_[0]) },
0.000008,1,0.000008,);
0.000000,0,0.000000,
0.000009,1,0.000009,has keyword => (
0.000000,0,0.000000,is => 'ro',
0.000000,0,0.000000,isa => Str|Undef,
0.000000,0,0.000000,required => 1,
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,has exception => (
0.000000,0,0.000000,is => 'ro',
0.000000,0,0.000000,isa => InstanceOf['JSON::PP::Boolean'],
0.000000,0,0.000000,coerce => sub { $_[0] ? JSON::PP::true : JSON::PP::false },
0.000005,1,0.000005,);
0.000000,0,0.000000,
0.000006,1,0.000006,has mode => (
0.000000,0,0.000000,is => 'rw',
0.000000,0,0.000000,isa => Enum[qw(traverse evaluate)],
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,sub TO_JSON ($self) {
0.000000,0,0.000000,return +{
0.000000,0,0.000000,# note that locations are JSON pointers, not uri fragments!
0.000000,0,0.000000,instanceLocation => $self->instance_location,
0.000000,0,0.000000,keywordLocation => $self->keyword_location,
0.000000,0,0.000000,!defined($self->absolute_keyword_location) ? ()
0.000000,0,0.000000,: ( absoluteKeywordLocation => $self->absolute_keyword_location->to_string ),
0.000000,0,0.000000,error => $self->error,  # TODO: allow localization
0.000000,0,0.000000,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub stringify ($self) {
0.000000,0,0.000000,($self->mode//'evaluate') eq 'traverse'
0.000000,0,0.000000,? '\''.$self->keyword_location.'\': '.$self->error
0.000000,0,0.000000,: '\''.$self->instance_location.'\': '.$self->error;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub dump ($self) {
0.000000,0,0.000000,my $encoder = JSON::MaybeXS->new(utf8 => 0, convert_blessed => 1, canonical => 1, pretty => 1);
0.000000,0,0.000000,$encoder->indent_length(2) if $encoder->can('indent_length');
0.000000,0,0.000000,$encoder->encode($self);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000017,1,0.000017,1;
0.000029,1,0.000029,__END__
