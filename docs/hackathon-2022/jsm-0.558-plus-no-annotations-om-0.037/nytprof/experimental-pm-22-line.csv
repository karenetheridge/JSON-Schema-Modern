# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package experimental;
0.000000,1,0.000000,$experimental::VERSION = '0.028';
0.000017,2,0.000008,use strict;
0.000012,2,0.000006,use warnings;
0.000480,2,0.000240,use version ();
0.000000,0,0.000000,
0.002337,2,0.001169,BEGIN { eval { require feature } };
0.000546,2,0.000273,use Carp qw/croak carp/;
0.000000,0,0.000000,
0.000272,82,0.000003,my %warnings = map { $_ => 1 } grep { /^experimental::/ } keys %warnings::Offsets;
0.000016,1,0.000016,my %features = map { $_ => 1 } $] > 5.015006 ? keys %feature::feature : do {
0.000000,0,0.000000,my @features;
0.000000,0,0.000000,if ($] >= 5.010) {
0.000000,0,0.000000,push @features, qw/switch say state/;
0.000000,0,0.000000,push @features, 'unicode_strings' if $] > 5.011002;
0.000000,0,0.000000,}
0.000000,0,0.000000,@features;
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000035,1,0.000035,my %min_version = (
0.000000,0,0.000000,args_array_with_signatures => '5.20.0',
0.000000,0,0.000000,array_base      => '5',
0.000000,0,0.000000,autoderef       => '5.14.0',
0.000000,0,0.000000,bitwise         => '5.22.0',
0.000000,0,0.000000,builtin         => '5.35.7',
0.000000,0,0.000000,const_attr      => '5.22.0',
0.000000,0,0.000000,current_sub     => '5.16.0',
0.000000,0,0.000000,declared_refs   => '5.26.0',
0.000000,0,0.000000,defer           => '5.35.4',
0.000000,0,0.000000,evalbytes       => '5.16.0',
0.000000,0,0.000000,extra_paired_delims => '5.35.9',
0.000000,0,0.000000,fc              => '5.16.0',
0.000000,0,0.000000,for_list        => '5.35.5',
0.000000,0,0.000000,isa             => '5.31.7',
0.000000,0,0.000000,lexical_topic   => '5.10.0',
0.000000,0,0.000000,lexical_subs    => '5.18.0',
0.000000,0,0.000000,postderef       => '5.20.0',
0.000000,0,0.000000,postderef_qq    => '5.20.0',
0.000000,0,0.000000,refaliasing     => '5.22.0',
0.000000,0,0.000000,regex_sets      => '5.18.0',
0.000000,0,0.000000,say             => '5.10.0',
0.000000,0,0.000000,smartmatch      => '5.10.0',
0.000000,0,0.000000,signatures      => '5.20.0',
0.000000,0,0.000000,state           => '5.10.0',
0.000000,0,0.000000,switch          => '5.10.0',
0.000000,0,0.000000,try             => '5.34.0',
0.000000,0,0.000000,unicode_eval    => '5.16.0',
0.000000,0,0.000000,unicode_strings => '5.12.0',
0.000000,0,0.000000,);
0.000003,1,0.000003,my %removed_in_version = (
0.000000,0,0.000000,array_base      => '5.30.0',
0.000000,0,0.000000,autoderef       => '5.24.0',
0.000000,0,0.000000,lexical_topic   => '5.24.0',
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000121,1,0.000121,$_ = version->new($_) for values %min_version;
0.000010,1,0.000010,$_ = version->new($_) for values %removed_in_version;
0.000000,0,0.000000,
0.000002,1,0.000002,my %additional = (
0.000000,0,0.000000,postderef     => ['postderef_qq'],
0.000000,0,0.000000,switch        => ['smartmatch'],
0.000000,0,0.000000,declared_refs => ['refaliasing'],
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,sub _enable {
0.000019,72,0.000000,my $pragma = shift;
0.000135,72,0.000002,if ($warnings{"experimental::$pragma"}) {
0.000084,54,0.000002,warnings->unimport("experimental::$pragma");
0.000052,54,0.000001,feature->import($pragma) if exists $features{$pragma};
0.000046,54,0.000001,_enable(@{ $additional{$pragma} }) if $additional{$pragma};
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($features{$pragma}) {
0.000033,18,0.000002,feature->import($pragma);
0.000005,18,0.000000,_enable(@{ $additional{$pragma} }) if $additional{$pragma};
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif (not exists $min_version{$pragma}) {
0.000000,0,0.000000,croak "Can't enable unknown feature $pragma";
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($] < $min_version{$pragma}) {
0.000000,0,0.000000,my $stable = $min_version{$pragma}->stringify;
0.000000,0,0.000000,$stable =~ s/^ 5\. ([0-9]?[13579]) \. \d+ $/"5." . ($1 + 1) . ".0"/xe;
0.000000,0,0.000000,croak "Need perl $stable or later for feature $pragma";
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($] >= ($removed_in_version{$pragma} || 7)) {
0.000000,0,0.000000,croak "Experimental feature $pragma has been removed from perl in version $removed_in_version{$pragma}";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000025,36,0.000001,my ($self, @pragmas) = @_;
0.000000,0,0.000000,
0.000017,36,0.000000,for my $pragma (@pragmas) {
0.000057,54,0.000001,_enable($pragma);
0.000000,0,0.000000,}
0.000101,36,0.000003,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _disable {
0.000000,0,0.000000,my $pragma = shift;
0.000000,0,0.000000,if ($warnings{"experimental::$pragma"}) {
0.000000,0,0.000000,warnings->import("experimental::$pragma");
0.000000,0,0.000000,feature->unimport($pragma) if exists $features{$pragma};
0.000000,0,0.000000,_disable(@{ $additional{$pragma} }) if $additional{$pragma};
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($features{$pragma}) {
0.000000,0,0.000000,feature->unimport($pragma);
0.000000,0,0.000000,_disable(@{ $additional{$pragma} }) if $additional{$pragma};
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif (not exists $min_version{$pragma}) {
0.000000,0,0.000000,carp "Can't disable unknown feature $pragma, ignoring";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub unimport {
0.000000,0,0.000000,my ($self, @pragmas) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,for my $pragma (@pragmas) {
0.000000,0,0.000000,_disable($pragma);
0.000000,0,0.000000,}
0.000000,0,0.000000,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000029,1,0.000029,1;
0.000000,0,0.000000,
0.000000,0,0.000000,#ABSTRACT: Experimental features made easy
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
