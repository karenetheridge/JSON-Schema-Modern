# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000001,2,0.000000,my $isa_check_for_exception = ${$_[1]->{"\$isa_check_for_exception"}};
0.000000,1,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000000,1,0.000000,my $coerce_for_exception = ${$_[1]->{"\$coerce_for_exception"}};
0.000000,1,0.000000,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000000,1,0.000000,my $default_for_exception = ${$_[1]->{"\$default_for_exception"}};
0.000000,0,0.000000,package JSON::Schema::Modern::Result;
0.000037,2,0.000019,no warnings 'closure';
0.000000,0,0.000000,sub exception {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package Method::Generate::Accessor::_Generated;
0.000000,0,0.000000,BEGIN {
0.000000,1,0.000000,$^H = 1762;
0.000001,1,0.000001,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000002,1,0.000002,%^H = (
0.000000,0,0.000000,);
0.000066,1,0.000066,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.000000,0,0.000000,Carp::croak("exception is a read-only accessor") if @_ > 1;
0.000000,0,0.000000,exists $_[0]->{"exception"} ? 
0.000000,0,0.000000,$_[0]->{"exception"}
0.000000,0,0.000000,:    do {
0.000000,0,0.000000,my $value = do {
0.000000,0,0.000000,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => undef(),
0.000000,0,0.000000,name     => "exception",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.000000,0,0.000000,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.000000,0,0.000000,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.000000,0,0.000000,$coerce_for_exception->($default_for_exception->($_[0]))),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"exception\" failed: ".$@);
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.000000,0,0.000000,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000071,2,0.000036,do { no warnings "void"; package Type::Tiny; ((Scalar::Util::blessed($value) and $value->isa(q[JSON::PP::Boolean]))) or Type::Tiny::_failed_check($isa_check_for_exception, "InstanceOf[\"JSON::PP::Boolean\"]", $value, "attribute_name","exception","attribute_step","isa check","mgaca","0","varname","\$self->{\"exception\"}"); $value };
0.000000,0,0.000000,$_[0]->{"exception"} = $value
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000001,1,0.000001,$$_UNQUOTED = \&exception;
0.000000,0,0.000000,}
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
