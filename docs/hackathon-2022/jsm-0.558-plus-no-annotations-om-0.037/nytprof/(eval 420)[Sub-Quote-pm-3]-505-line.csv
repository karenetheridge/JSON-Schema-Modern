# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000001,2,0.000000,my $isa_check_for__5fresource_5findex = ${$_[1]->{"\$isa_check_for__5fresource_5findex"}};
0.000000,1,0.000000,my $isa_check_for_specification_5fversion = ${$_[1]->{"\$isa_check_for_specification_5fversion"}};
0.000000,1,0.000000,my $isa_check_for_strict = ${$_[1]->{"\$isa_check_for_strict"}};
0.000001,1,0.000001,my $isa_check_for_max_5ftraversal_5fdepth = ${$_[1]->{"\$isa_check_for_max_5ftraversal_5fdepth"}};
0.000000,1,0.000000,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000000,1,0.000000,my $isa_check_for_validate_5fcontent_5fschemas = ${$_[1]->{"\$isa_check_for_validate_5fcontent_5fschemas"}};
0.000000,1,0.000000,my $isa_check_for__5fformat_5fvalidations = ${$_[1]->{"\$isa_check_for__5fformat_5fvalidations"}};
0.000000,1,0.000000,my $coerce_for_specification_5fversion = ${$_[1]->{"\$coerce_for_specification_5fversion"}};
0.000000,1,0.000000,my $isa_check_for_output_5fformat = ${$_[1]->{"\$isa_check_for_output_5fformat"}};
0.000000,1,0.000000,my $isa_check_for__5fmedia_5ftype = ${$_[1]->{"\$isa_check_for__5fmedia_5ftype"}};
0.000000,1,0.000000,my $isa_check_for_scalarref_5fbooleans = ${$_[1]->{"\$isa_check_for_scalarref_5fbooleans"}};
0.000000,1,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000000,1,0.000000,my $isa_check_for_short_5fcircuit = ${$_[1]->{"\$isa_check_for_short_5fcircuit"}};
0.000000,1,0.000000,my $isa_check_for_collect_5fannotations = ${$_[1]->{"\$isa_check_for_collect_5fannotations"}};
0.000000,1,0.000000,my $isa_check_for__5fmetaschema_5fvocabulary_5fclasses = ${$_[1]->{"\$isa_check_for__5fmetaschema_5fvocabulary_5fclasses"}};
0.000001,1,0.000001,my $isa_check_for__5fvocabulary_5fclasses = ${$_[1]->{"\$isa_check_for__5fvocabulary_5fclasses"}};
0.000000,1,0.000000,my $isa_check_for_validate_5fformats = ${$_[1]->{"\$isa_check_for_validate_5fformats"}};
0.000000,1,0.000000,my $isa_check_for__5fjson_5fdecoder = ${$_[1]->{"\$isa_check_for__5fjson_5fdecoder"}};
0.000001,1,0.000001,my $isa_check_for__5fencoding = ${$_[1]->{"\$isa_check_for__5fencoding"}};
0.000000,0,0.000000,package JSON::Schema::Modern;
0.000038,2,0.000019,no warnings 'closure';
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package JSON::Schema::Modern;
0.000000,0,0.000000,BEGIN {
0.000001,1,0.000001,$^H = 2018;
0.000000,1,0.000000,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000003,1,0.000003,%^H = (
0.000000,0,0.000000,);
0.000095,1,0.000095,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.000001,1,0.000001,my $invoker = CORE::shift();
0.000000,1,0.000000,my $class = CORE::ref($invoker) ? CORE::ref($invoker) : $invoker;
0.000000,1,0.000000,if ($class ne "JSON::Schema::Modern") {
0.000000,0,0.000000,if ($Moo::MAKERS{$class}) {
0.000000,0,0.000000,if ($Moo::MAKERS{$class}{constructor}) {
0.000000,0,0.000000,package JSON::Schema::Modern;
0.000000,0,0.000000,return $invoker->SUPER::new(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,Moo->_constructor_maker_for($class);
0.000000,0,0.000000,return $invoker->new(@_);
0.000000,0,0.000000,} elsif ($INC{"Moose.pm"} and my $meta = Class::MOP::get_metaclass_by_name($class)) {
0.000000,0,0.000000,return $meta->new_object(
0.000000,0,0.000000,$class->can("BUILDARGS") ? $class->BUILDARGS(@_)
0.000000,0,0.000000,: $class->Moo::Object::BUILDARGS(@_)
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000002,1,0.000002,my $args = $class->BUILDARGS(@_);
0.000000,1,0.000000,Carp::croak("BUILDARGS did not return a hashref") unless CORE::ref($args) eq 'HASH';
0.000000,1,0.000000,my $new = bless({}, $class);;
0.000000,0,0.000000,(exists $args->{"_encoding"} and ($new->{"_encoding"} = scalar do { my $value = $args->{"_encoding"};
0.000098,2,0.000049,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and do { my $ok = 1; for my $i (values %{$value}) { ($ok = 0, last) unless (Ref::Util::XS::is_plain_coderef($i)) }; $ok } }) or Type::Tiny::_failed_check($isa_check_for__5fencoding, "HashRef[CodeRef]", $value, "attribute_name","_encoding","attribute_step","isa check","mgaca","0","varname","\$args->{\"_encoding\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"format_validations"} and ($new->{"_format_validations"} = scalar do { my $value = $args->{"format_validations"};
0.000323,2,0.000162,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and (not grep {my $v = ($value)->{$_};not((/\A(?:date\-time|date|time|duration|email|idn\-email|hostname|idn\-hostname|ipv4|ipv6|uri|uri\-reference|iri|iri\-reference|uuid|uri\-template|json\-pointer|relative\-json\-pointer|regex)\z/) or (((!!1)) and (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($v)) and not(grep !/\A(?:type|sub)\z/, keys %{$v}) and exists($v->{"type"}) and (defined($v->{"type"}) and !ref($v->{"type"}) and $v->{"type"} =~ m{\A(?:(?:array|boolean|integer|nu(?:ll|mber)|object|string))\z}) and exists($v->{"sub"}) and do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($v->{"sub"}) } })))} keys %{$value}) and (!exists $value->{"date-time"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"date-time"}) })) and (!exists $value->{"date"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"date"}) })) and (!exists $value->{"time"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"time"}) })) and (!exists $value->{"duration"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"duration"}) })) and (!exists $value->{"email"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"email"}) })) and (!exists $value->{"idn-email"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"idn-email"}) })) and (!exists $value->{"hostname"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"hostname"}) })) and (!exists $value->{"idn-hostname"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"idn-hostname"}) })) and (!exists $value->{"ipv4"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"ipv4"}) })) and (!exists $value->{"ipv6"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"ipv6"}) })) and (!exists $value->{"uri"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"uri"}) })) and (!exists $value->{"uri-reference"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"uri-reference"}) })) and (!exists $value->{"iri"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"iri"}) })) and (!exists $value->{"iri-reference"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"iri-reference"}) })) and (!exists $value->{"uuid"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"uuid"}) })) and (!exists $value->{"uri-template"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"uri-template"}) })) and (!exists $value->{"json-pointer"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"json-pointer"}) })) and (!exists $value->{"relative-json-pointer"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"relative-json-pointer"}) })) and (!exists $value->{"regex"} or (do { package Type::Tiny; Ref::Util::XS::is_plain_coderef($value->{"regex"}) })) }) or Type::Tiny::_failed_check($isa_check_for__5fformat_5fvalidations, "Dict[date=>Optional[CodeRef],date-time=>Optional[CodeRef],duration=>Optional[CodeRef],email=>Optional[CodeRef],hostname=>Optional[CodeRef],idn-email=>Optional[CodeRef],idn-hostname=>Optional[CodeRef],ipv4=>Optional[CodeRef],ipv6=>Optional[CodeRef],iri=>Optional[CodeRef],iri-reference=>Optional[CodeRef],json-pointer=>Optional[CodeRef],regex=>Optional[CodeRef],relative-json-pointer=>Optional[CodeRef],time=>Optional[CodeRef],uri=>Optional[CodeRef],uri-reference=>Optional[CodeRef],uri-template=>Optional[CodeRef],uuid=>Optional[CodeRef],Slurpy[HashRef[Dict[sub=>CodeRef,type=>Enum[\"null\",\"object\",\"array\",\"boolean\",\"string\",\"number\",\"integer\"]]]]]", $value, "attribute_name","_format_validations","attribute_step","isa check","mgaca","0","varname","\$args->{\"format_validations\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"_json_decoder"} and ($new->{"_json_decoder"} = scalar do { my $value = $args->{"_json_decoder"};
0.000077,2,0.000039,(do { no warnings "void"; package Type::Tiny; (( Scalar::Util::blessed($value) and not grep(!$value->can($_), qw/encode decode/) )) or Type::Tiny::_failed_check($isa_check_for__5fjson_5fdecoder, "HasMethods[\"encode\",\"decode\"]", $value, "attribute_name","_json_decoder","attribute_step","isa check","mgaca","0","varname","\$args->{\"_json_decoder\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"_media_type"} and ($new->{"_media_type"} = scalar do { my $value = $args->{"_media_type"};
0.000084,2,0.000042,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and do { my $ok = 1; for my $v (values %{$value}) { ($ok = 0, last) unless (Ref::Util::XS::is_plain_coderef($v)) }; for my $k (keys %{$value}) { ($ok = 0, last) unless ((do { package Type::Tiny; defined($k) and do { ref(\$k) eq 'SCALAR' or ref(\(my $val = $k)) eq 'SCALAR' } }) && (do { local $_ = $k; $_ eq CORE::fc($_) })) }; $ok } }) or Type::Tiny::_failed_check($isa_check_for__5fmedia_5ftype, "Map[__ANON__,CodeRef]", $value, "attribute_name","_media_type","attribute_step","isa check","mgaca","0","varname","\$args->{\"_media_type\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"_metaschema_vocabulary_classes"} and ($new->{"_metaschema_vocabulary_classes"} = scalar do { my $value = $args->{"_metaschema_vocabulary_classes"};
0.000124,2,0.000062,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and do { my $ok = 1; for my $i (values %{$value}) { ($ok = 0, last) unless do { package Type::Tiny; (Ref::Util::XS::is_plain_arrayref($i)) and @{$i} == 2 and (defined($i->[0]) and !ref($i->[0]) and $i->[0] =~ m{\A(?:draft(?:20(?:19\-09|20\-12)|7))\z}) and do { package Type::Tiny; (Ref::Util::XS::is_plain_arrayref($i->[1])) and do { my $ok = 1; for my $i (@{$i->[1]}) { ($ok = 0, last) unless ((do { package Type::Tiny; Types::Standard::_is_class_loaded(do { my $tmp = $i }) }) && (do { local $_ = $i; $_->DOES('JSON::Schema::Modern::Vocabulary') })) }; $ok } } } }; $ok } }) or Type::Tiny::_failed_check($isa_check_for__5fmetaschema_5fvocabulary_5fclasses, "HashRef[Tuple[Enum[\"draft7\",\"draft2019-09\",\"draft2020-12\"],ArrayRef[__ANON__]]]", $value, "attribute_name","_metaschema_vocabulary_classes","attribute_step","isa check","mgaca","0","varname","\$args->{\"_metaschema_vocabulary_classes\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"_resource_index"} and ($new->{"_resource_index"} = scalar do { my $value = $args->{"_resource_index"};
0.000216,2,0.000108,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and do { my $ok = 1; for my $i (values %{$value}) { ($ok = 0, last) unless do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($i)) and (not grep {my $v = ($i)->{$_};not((/\A(?:canonical_uri|path|specification_version|document|vocabularies|configs)\z/) or (((!!1)) and ((!defined($v)))))} keys %{$i}) and exists($i->{"canonical_uri"}) and do { package Type::Tiny; Scalar::Util::blessed($i->{"canonical_uri"}) and $i->{"canonical_uri"}->isa(q[Mojo::URL]) } and exists($i->{"path"}) and do { package Type::Tiny; defined($i->{"path"}) and do { ref(\$i->{"path"}) eq 'SCALAR' or ref(\(my $val = $i->{"path"})) eq 'SCALAR' } } and exists($i->{"specification_version"}) and (defined($i->{"specification_version"}) and !ref($i->{"specification_version"}) and $i->{"specification_version"} =~ m{\A(?:draft(?:20(?:19\-09|20\-12)|7))\z}) and exists($i->{"document"}) and do { package Type::Tiny; Scalar::Util::blessed($i->{"document"}) and $i->{"document"}->isa(q[JSON::Schema::Modern::Document]) } and exists($i->{"vocabularies"}) and (do { package Type::Tiny; Ref::Util::XS::is_plain_arrayref($i->{"vocabularies"}) } and do { my $ok = 1; for my $i (@{$i->{"vocabularies"}}) { ($ok = 0, last) unless ((do { package Type::Tiny; Types::Standard::_is_class_loaded(do { my $tmp = $i }) }) && (do { local $_ = $i; $_->DOES('JSON::Schema::Modern::Vocabulary') })) }; $ok }) and exists($i->{"configs"}) and do { package Type::Tiny; Ref::Util::XS::is_plain_hashref($i->{"configs"}) } } }; $ok } }) or Type::Tiny::_failed_check($isa_check_for__5fresource_5findex, "HashRef[Dict[canonical_uri=>InstanceOf[\"Mojo::URL\"],configs=>HashRef,document=>InstanceOf[\"JSON::Schema::Modern::Document\"],path=>Str,specification_version=>Enum[\"draft7\",\"draft2019-09\",\"draft2020-12\"],vocabularies=>ArrayRef[__ANON__],Slurpy[HashRef[Undef]]]]", $value, "attribute_name","_resource_index","attribute_step","isa check","mgaca","0","varname","\$args->{\"_resource_index\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"_vocabulary_classes"} and ($new->{"_vocabulary_classes"} = scalar do { my $value = $args->{"_vocabulary_classes"};
0.000105,2,0.000053,(do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($value)) and do { my $ok = 1; for my $i (values %{$value}) { ($ok = 0, last) unless do { package Type::Tiny; (Ref::Util::XS::is_plain_arrayref($i)) and @{$i} == 2 and (defined($i->[0]) and !ref($i->[0]) and $i->[0] =~ m{\A(?:draft(?:20(?:19\-09|20\-12)|7))\z}) and ((do { package Type::Tiny; Types::Standard::_is_class_loaded(do { my $tmp = $i->[1] }) }) && (do { local $_ = $i->[1]; $_->DOES('JSON::Schema::Modern::Vocabulary') })) } }; $ok } }) or Type::Tiny::_failed_check($isa_check_for__5fvocabulary_5fclasses, "HashRef[Tuple[Enum[\"draft7\",\"draft2019-09\",\"draft2020-12\"],__ANON__]]", $value, "attribute_name","_vocabulary_classes","attribute_step","isa check","mgaca","0","varname","\$args->{\"_vocabulary_classes\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"collect_annotations"} and ($new->{"collect_annotations"} = scalar do { my $value = $args->{"collect_annotations"};
0.000045,2,0.000022,(do { no warnings "void"; package Type::Tiny; ((!ref $value and (!defined $value or $value eq q() or $value eq '0' or $value eq '1'))) or Type::Tiny::_failed_check($isa_check_for_collect_5fannotations, "Bool", $value, "attribute_name","collect_annotations","attribute_step","isa check","mgaca","0","varname","\$args->{\"collect_annotations\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,($new->{"max_traversal_depth"} = scalar do { my $value = (
0.000000,0,0.000000,exists $args->{"max_traversal_depth"}
0.000000,1,0.000000,? $args->{"max_traversal_depth"}
0.000000,0,0.000000,: 50);
0.000074,7,0.000011,(do { no warnings "void"; package Type::Tiny; ((do { my $tmp = $value; defined($tmp) and !ref($tmp) and $tmp =~ /\A-?[0-9]+\z/ })) or Type::Tiny::_failed_check($isa_check_for_max_5ftraversal_5fdepth, "Int", $value, "attribute_name","max_traversal_depth","attribute_step","isa check","mgaca","0","varname","\$args->{\"max_traversal_depth\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,),
0.000000,0,0.000000,($new->{"output_format"} = scalar do { my $value = (
0.000000,0,0.000000,exists $args->{"output_format"}
0.000000,1,0.000000,? $args->{"output_format"}
0.000000,0,0.000000,: "basic");
0.000076,5,0.000015,(do { no warnings "void"; package Type::Tiny; ((defined($value) and !ref($value) and $value =~ m{\A(?:(?:basic|d(?:ata_only|etailed)|flag|strict_basic|terse|verbose))\z})) or Type::Tiny::_failed_check($isa_check_for_output_5fformat, "Enum[\"flag\",\"basic\",\"strict_basic\",\"detailed\",\"verbose\",\"terse\",\"data_only\"]", $value, "attribute_name","output_format","attribute_step","isa check","mgaca","0","varname","\$args->{\"output_format\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,),
0.000000,0,0.000000,(exists $args->{"scalarref_booleans"} and ($new->{"scalarref_booleans"} = scalar do { my $value = $args->{"scalarref_booleans"};
0.000044,2,0.000022,(do { no warnings "void"; package Type::Tiny; ((!ref $value and (!defined $value or $value eq q() or $value eq '0' or $value eq '1'))) or Type::Tiny::_failed_check($isa_check_for_scalarref_5fbooleans, "Bool", $value, "attribute_name","scalarref_booleans","attribute_step","isa check","mgaca","0","varname","\$args->{\"scalarref_booleans\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"short_circuit"} and ($new->{"short_circuit"} = scalar do { my $value = $args->{"short_circuit"};
0.000084,2,0.000042,(do { no warnings "void"; package Type::Tiny; ((!ref $value and (!defined $value or $value eq q() or $value eq '0' or $value eq '1'))) or Type::Tiny::_failed_check($isa_check_for_short_5fcircuit, "Bool", $value, "attribute_name","short_circuit","attribute_step","isa check","mgaca","0","varname","\$args->{\"short_circuit\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"specification_version"} and ($new->{"specification_version"} = scalar do { my $value = do {
0.000000,0,0.000000,local $Method::Generate::Accessor::CurrentAttribute = {
0.000000,0,0.000000,init_arg => "specification_version",
0.000000,0,0.000000,name     => "specification_version",
0.000000,0,0.000000,step     => "coercion",
0.000000,0,0.000000,};
0.000000,0,0.000000,(my $_return),
0.000000,0,0.000000,(my $_error), (my $_old_error = $@);
0.000000,0,0.000000,(eval {
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,($_return =
0.000000,0,0.000000,$coerce_for_specification_5fversion->($args->{"specification_version"})),
0.000000,0,0.000000,1
0.000000,0,0.000000,} or
0.000000,0,0.000000,$_error = CORE::ref $@ ? $@ : "coercion for \"specification_version\" failed: ".$@);
0.000000,0,0.000000,($@ = $_old_error),
0.000000,0,0.000000,(defined $_error and CORE::die $_error);
0.000000,0,0.000000,$_return;
0.000000,0,0.000000,}
0.000000,0,0.000000,;
0.000066,2,0.000033,(do { no warnings "void"; package Type::Tiny; ((defined($value) and !ref($value) and $value =~ m{\A(?:draft(?:20(?:19\-09|20\-12)|7))\z})) or Type::Tiny::_failed_check($isa_check_for_specification_5fversion, "Enum[\"draft7\",\"draft2019-09\",\"draft2020-12\"]", $value, "attribute_name","specification_version","attribute_step","isa check","mgaca","0","varname","\$args->{\"specification_version\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"strict"} and ($new->{"strict"} = scalar do { my $value = $args->{"strict"};
0.000049,2,0.000024,(do { no warnings "void"; package Type::Tiny; ((!ref $value and (!defined $value or $value eq q() or $value eq '0' or $value eq '1'))) or Type::Tiny::_failed_check($isa_check_for_strict, "Bool", $value, "attribute_name","strict","attribute_step","isa check","mgaca","0","varname","\$args->{\"strict\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,(exists $args->{"validate_content_schemas"} and ($new->{"validate_content_schemas"} = scalar do { my $value = $args->{"validate_content_schemas"};
0.000044,2,0.000022,(do { no warnings "void"; package Type::Tiny; ((!ref $value and (!defined $value or $value eq q() or $value eq '0' or $value eq '1'))) or Type::Tiny::_failed_check($isa_check_for_validate_5fcontent_5fschemas, "Bool", $value, "attribute_name","validate_content_schemas","attribute_step","isa check","mgaca","0","varname","\$args->{\"validate_content_schemas\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000008,1,0.000008,($new->{"validate_formats"} = scalar do { my $value = (
0.000000,0,0.000000,exists $args->{"validate_formats"}
0.000000,1,0.000000,? $args->{"validate_formats"}
0.000000,0,0.000000,: 0);
0.000219,5,0.000044,(do { no warnings "void"; package Type::Tiny; ((!ref $value and (!defined $value or $value eq q() or $value eq '0' or $value eq '1'))) or Type::Tiny::_failed_check($isa_check_for_validate_5fformats, "Bool", $value, "attribute_name","validate_formats","attribute_step","isa check","mgaca","0","varname","\$args->{\"validate_formats\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,),
0.000000,0,0.000000,return $new;
0.000000,0,0.000000,}
0.000001,1,0.000001,$$_UNQUOTED = \&new;
0.000000,0,0.000000,}
0.000008,1,0.000008,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
