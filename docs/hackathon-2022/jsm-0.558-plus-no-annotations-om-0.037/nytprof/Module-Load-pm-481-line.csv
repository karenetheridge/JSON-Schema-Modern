# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Module::Load;
0.000000,0,0.000000,
0.000024,2,0.000012,use strict;
0.000013,2,0.000007,use warnings;
0.000063,2,0.000031,use File::Spec ();
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = '0.36';
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000000,0,0.000000,my $who = _who();
0.000000,0,0.000000,my $h; shift;
0.000000,0,0.000000,
0.000410,2,0.000205,{   no strict 'refs';
0.000000,0,0.000000,
0.000000,0,0.000000,@_ or (
0.000000,0,0.000000,*{"${who}::load"} = \&load, # compat to prev version
0.000000,0,0.000000,*{"${who}::autoload"} = \&autoload,
0.000000,0,0.000000,return
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,map { $h->{$_} = () if defined $_ } @_;
0.000000,0,0.000000,
0.000000,0,0.000000,(exists $h->{none} or exists $h->{''})
0.000000,0,0.000000,and shift, last;
0.000000,0,0.000000,
0.000000,0,0.000000,((exists $h->{autoload} and shift,1) or (exists $h->{all} and shift))
0.000000,0,0.000000,and *{"${who}::autoload"} = \&autoload;
0.000000,0,0.000000,
0.000000,0,0.000000,((exists $h->{load} and shift,1) or exists $h->{all})
0.000000,0,0.000000,and *{"${who}::load"} = \&load;
0.000000,0,0.000000,
0.000000,0,0.000000,((exists $h->{load_remote} and shift,1) or exists $h->{all})
0.000000,0,0.000000,and *{"${who}::load_remote"} = \&load_remote;
0.000000,0,0.000000,
0.000000,0,0.000000,((exists $h->{autoload_remote} and shift,1) or exists $h->{all})
0.000000,0,0.000000,and *{"${who}::autoload_remote"} = \&autoload_remote;
0.000000,0,0.000000,
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub load(*;@){
0.000005,1,0.000005,goto &_load;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub autoload(*;@){
0.000000,0,0.000000,unshift @_, 'autoimport';
0.000000,0,0.000000,goto &_load;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub load_remote($$;@){
0.000000,0,0.000000,my ($dst, $src, @exp) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,eval "package $dst;Module::Load::load('$src', qw/@exp/);";
0.000000,0,0.000000,$@ && die "$@";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub autoload_remote($$;@){
0.000000,0,0.000000,my ($dst, $src, @exp) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,eval "package $dst;Module::Load::autoload('$src', qw/@exp/);";
0.000000,0,0.000000,$@ && die "$@";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _load{
0.000001,1,0.000001,my $autoimport = $_[0] eq 'autoimport' and shift;
0.000001,1,0.000001,my $mod = shift or return;
0.000002,1,0.000002,my $who = _who();
0.000000,0,0.000000,
0.000002,1,0.000002,if( _is_file( $mod ) ) {
0.000000,0,0.000000,require $mod;
0.000000,0,0.000000,} else {
0.000000,0,0.000000,LOAD: {
0.000000,2,0.000000,my $err;
0.000001,1,0.000001,for my $flag ( qw[1 0] ) {
0.000001,1,0.000001,my $file = _to_file( $mod, $flag);
0.000587,2,0.000294,eval { require $file };
0.000002,1,0.000002,$@ ? $err .= $@ : last LOAD;
0.000000,0,0.000000,}
0.000000,0,0.000000,die $err if $err;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,### This addresses #41883: Module::Load cannot import
0.000000,0,0.000000,### non-Exporter module. ->import() routines weren't
0.000000,0,0.000000,### properly called when load() was used.
0.000000,0,0.000000,
0.000430,3,0.000143,{   no strict 'refs';
0.000000,1,0.000000,my $import;
0.000000,0,0.000000,
0.000001,1,0.000001,((@_ or $autoimport) and (
0.000000,0,0.000000,$import = $mod->can('import')
0.000000,0,0.000000,) and (
0.000000,0,0.000000,unshift(@_, $mod),
0.000000,0,0.000000,goto &$import
0.000000,0,0.000000,)
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _to_file{
0.000001,1,0.000001,local $_    = shift;
0.000000,1,0.000000,my $pm      = shift || '';
0.000000,0,0.000000,
0.000000,0,0.000000,## trailing blanks ignored by default. [rt #69886]
0.000005,1,0.000005,my @parts = split /::|'/, $_, -1;
0.000000,0,0.000000,## make sure that we can't hop out of @INC
0.000001,1,0.000001,shift @parts if @parts && !$parts[0];
0.000000,0,0.000000,
0.000000,0,0.000000,### because of [perl #19213], see caveats ###
0.000020,1,0.000020,my $file = $^O eq 'MSWin32'
0.000000,0,0.000000,? join "/", @parts
0.000000,0,0.000000,: File::Spec->catfile( @parts );
0.000000,0,0.000000,
0.000000,1,0.000000,$file   .= '.pm' if $pm;
0.000000,0,0.000000,
0.000000,0,0.000000,### on perl's before 5.10 (5.9.5@31746) if you require
0.000000,0,0.000000,### a file in VMS format, it's stored in %INC in VMS
0.000000,0,0.000000,### format. Therefor, better unixify it first
0.000000,0,0.000000,### Patch in reply to John Malmbergs patch (as mentioned
0.000000,0,0.000000,### above) on p5p Tue 21 Aug 2007 04:55:07
0.000000,1,0.000000,$file = VMS::Filespec::unixify($file) if $^O eq 'VMS';
0.000000,0,0.000000,
0.000004,1,0.000004,return $file;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,sub _who { (caller(1))[0] }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _is_file {
0.000001,1,0.000001,local $_ = shift;
0.000009,1,0.000009,return  /^\./               ? 1 :
0.000000,0,0.000000,/[^\w:']/           ? 1 :
0.000000,0,0.000000,undef
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
