# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000001,2,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000000,1,0.000000,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000000,0,0.000000,package Type::Tiny;
0.000000,0,0.000000,$$_UNQUOTED = sub {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package Type::Tiny;
0.000000,0,0.000000,BEGIN {
0.000000,1,0.000000,$^H = 1762;
0.000000,1,0.000000,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000005,1,0.000005,%^H = (
0.000000,0,0.000000,);
0.000019,1,0.000019,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.001776,1259,0.000001,do { no warnings "void"; package Type::Tiny; (do { package Type::Tiny; (Ref::Util::XS::is_plain_hashref($_[0])) and (not grep {my $v = ($_[0])->{$_};not((/\A(?:canonical_uri|path|specification_version|document|vocabularies|configs)\z/) or (((!!1)) and ((!defined($v)))))} keys %{$_[0]}) and exists($_[0]->{"canonical_uri"}) and do { package Type::Tiny; Scalar::Util::blessed($_[0]->{"canonical_uri"}) and $_[0]->{"canonical_uri"}->isa(q[Mojo::URL]) } and exists($_[0]->{"path"}) and do { package Type::Tiny; defined($_[0]->{"path"}) and do { ref(\$_[0]->{"path"}) eq 'SCALAR' or ref(\(my $val = $_[0]->{"path"})) eq 'SCALAR' } } and exists($_[0]->{"specification_version"}) and (defined($_[0]->{"specification_version"}) and !ref($_[0]->{"specification_version"}) and $_[0]->{"specification_version"} =~ m{\A(?:draft(?:20(?:19\-09|20\-12)|7))\z}) and exists($_[0]->{"document"}) and do { package Type::Tiny; Scalar::Util::blessed($_[0]->{"document"}) and $_[0]->{"document"}->isa(q[JSON::Schema::Modern::Document]) } and exists($_[0]->{"vocabularies"}) and (do { package Type::Tiny; Ref::Util::XS::is_plain_arrayref($_[0]->{"vocabularies"}) } and do { my $ok = 1; for my $i (@{$_[0]->{"vocabularies"}}) { ($ok = 0, last) unless ((do { package Type::Tiny; Types::Standard::_is_class_loaded(do { my $tmp = $i }) }) && (do { local $_ = $i; $_->DOES('JSON::Schema::Modern::Vocabulary') })) }; $ok }) and exists($_[0]->{"configs"}) and do { package Type::Tiny; Ref::Util::XS::is_plain_hashref($_[0]->{"configs"}) } }) or Type::Tiny::_failed_check(70, "Dict[canonical_uri=>InstanceOf[\"Mojo::URL\"],configs=>HashRef,document=>InstanceOf[\"JSON::Schema::Modern::Document\"],path=>Str,specification_version=>Enum[\"draft7\",\"draft2019-09\",\"draft2020-12\"],vocabularies=>ArrayRef[__ANON__],Slurpy[HashRef[Undef]]]", $_[0], ); $_[0] };  };
0.000000,0,0.000000,}
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
