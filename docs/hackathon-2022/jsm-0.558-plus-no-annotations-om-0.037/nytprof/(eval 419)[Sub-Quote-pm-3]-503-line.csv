# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,{
0.000000,2,0.000000,my $_UNQUOTED = ${$_[1]->{"\$_UNQUOTED"}};
0.000001,1,0.000001,my $_QUOTED = ${$_[1]->{"\$_QUOTED"}};
0.000000,1,0.000000,my $isa_check_for_evaluator = ${$_[1]->{"\$isa_check_for_evaluator"}};
0.000001,1,0.000001,my $isa_check_for_openapi_5fdocument = ${$_[1]->{"\$isa_check_for_openapi_5fdocument"}};
0.000000,0,0.000000,package OpenAPI::Modern;
0.000042,2,0.000021,no warnings 'closure';
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,($_QUOTED,$_UNQUOTED) if 0;
0.000000,0,0.000000,# BEGIN quote_sub PRELUDE
0.000000,0,0.000000,package OpenAPI::Modern;
0.000000,0,0.000000,BEGIN {
0.000000,1,0.000000,$^H = 2018;
0.000001,1,0.000001,${^WARNING_BITS} = "UUUUUUUUUUUUUUUUUUUU";
0.000004,1,0.000004,%^H = (
0.000000,0,0.000000,);
0.000126,1,0.000126,}
0.000000,0,0.000000,# END quote_sub PRELUDE
0.000001,1,0.000001,my $invoker = CORE::shift();
0.000000,1,0.000000,my $class = CORE::ref($invoker) ? CORE::ref($invoker) : $invoker;
0.000001,1,0.000001,if ($class ne "OpenAPI::Modern") {
0.000000,0,0.000000,if ($Moo::MAKERS{$class}) {
0.000000,0,0.000000,if ($Moo::MAKERS{$class}{constructor}) {
0.000000,0,0.000000,package OpenAPI::Modern;
0.000000,0,0.000000,return $invoker->SUPER::new(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,Moo->_constructor_maker_for($class);
0.000000,0,0.000000,return $invoker->new(@_);
0.000000,0,0.000000,} elsif ($INC{"Moose.pm"} and my $meta = Class::MOP::get_metaclass_by_name($class)) {
0.000000,0,0.000000,return $meta->new_object(
0.000000,0,0.000000,$class->can("BUILDARGS") ? $class->BUILDARGS(@_)
0.000000,0,0.000000,: $class->Moo::Object::BUILDARGS(@_)
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000009,1,0.000009,my $args = $class->BUILDARGS(@_);
0.000007,1,0.000007,Carp::croak("BUILDARGS did not return a hashref") unless CORE::ref($args) eq 'HASH';
0.000002,1,0.000002,if (my @missing = grep !exists $args->{$_}, "evaluator", "openapi_document") {
0.000000,0,0.000000,Carp::croak("Missing required arguments: ".CORE::join(', ', sort @missing));
0.000000,0,0.000000,}
0.000007,1,0.000007,my $new = bless({}, $class);;
0.000001,1,0.000001,(exists $args->{"evaluator"} and ($new->{"evaluator"} = scalar do { my $value = $args->{"evaluator"};
0.000079,5,0.000016,(do { no warnings "void"; package Type::Tiny; ((Scalar::Util::blessed($value) and $value->isa(q[JSON::Schema::Modern]))) or Type::Tiny::_failed_check($isa_check_for_evaluator, "InstanceOf[\"JSON::Schema::Modern\"]", $value, "attribute_name","evaluator","attribute_step","isa check","mgaca","0","varname","\$args->{\"evaluator\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000031,2,0.000016,(exists $args->{"openapi_document"} and ($new->{"openapi_document"} = scalar do { my $value = $args->{"openapi_document"};
0.000081,5,0.000016,(do { no warnings "void"; package Type::Tiny; ((Scalar::Util::blessed($value) and $value->isa(q[JSON::Schema::Modern::Document::OpenAPI]))) or Type::Tiny::_failed_check($isa_check_for_openapi_5fdocument, "InstanceOf[\"JSON::Schema::Modern::Document::OpenAPI\"]", $value, "attribute_name","openapi_document","attribute_step","isa check","mgaca","0","varname","\$args->{\"openapi_document\"}"); $value }),
0.000000,0,0.000000,$value
0.000000,0,0.000000,}
0.000000,0,0.000000,)),
0.000000,0,0.000000,return $new;
0.000000,0,0.000000,}
0.000001,1,0.000001,$$_UNQUOTED = \&new;
0.000000,0,0.000000,}
0.000005,1,0.000005,1;
0.000000,0,0.000000,
0.000000,0,0.000000,;
