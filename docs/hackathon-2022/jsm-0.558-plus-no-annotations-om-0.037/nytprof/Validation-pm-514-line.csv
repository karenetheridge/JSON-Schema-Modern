# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000036,2,0.000018,use strict;
0.000065,2,0.000032,use warnings;
0.000000,0,0.000000,package JSON::Schema::Modern::Vocabulary::Validation;
0.000000,0,0.000000,# vim: set ts=8 sts=2 sw=2 tw=100 et :
0.000000,0,0.000000,# ABSTRACT: Implementation of the JSON Schema Validation vocabulary
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = '0.559';
0.000000,0,0.000000,
0.000031,2,0.000016,use 5.020;
0.000034,2,0.000017,use Moo;
0.000052,3,0.000017,use strictures 2;
0.000054,2,0.000027,use experimental qw(signatures postderef);
0.000032,2,0.000016,use if "$]" >= 5.022, experimental => 're_strict';
0.000020,2,0.000010,no if "$]" >= 5.031009, feature => 'indirect';
0.000019,2,0.000010,no if "$]" >= 5.033001, feature => 'multidimensional';
0.000014,2,0.000007,no if "$]" >= 5.033006, feature => 'bareword_filehandles';
0.000022,2,0.000011,use List::Util 'any';
0.000036,3,0.000012,use Ref::Util 0.100 'is_plain_arrayref';
0.000045,2,0.000023,use if "$]" >= 5.022, POSIX => 'isinf';
0.000019,2,0.000010,use JSON::Schema::Modern::Utilities qw(is_type get_type is_equal is_elements_unique E assert_keyword_type assert_pattern jsonp sprintf_num);
0.002408,2,0.001204,use namespace::clean;
0.000000,0,0.000000,
0.000018,1,0.000018,with 'JSON::Schema::Modern::Vocabulary';
0.000000,0,0.000000,
0.000000,0,0.000000,sub vocabulary {
0.000002,1,0.000002,'https://json-schema.org/draft/2019-09/vocab/validation' => 'draft2019-09',
0.000000,0,0.000000,'https://json-schema.org/draft/2020-12/vocab/validation' => 'draft2020-12';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,5,0.000001,sub evaluation_order { 2 }
0.000000,0,0.000000,
0.000002,6,0.000000,sub keywords ($self, $spec_version) {
0.000000,0,0.000000,return (
0.000010,2,0.000005,qw(type enum const
0.000000,0,0.000000,multipleOf maximum exclusiveMaximum minimum exclusiveMinimum
0.000000,0,0.000000,maxLength minLength pattern
0.000000,0,0.000000,maxItems minItems uniqueItems),
0.000000,0,0.000000,$spec_version ne 'draft7' ? qw(maxContains minContains) : (),
0.000000,0,0.000000,qw(maxProperties minProperties required),
0.000000,0,0.000000,$spec_version ne 'draft7' ? 'dependentRequired' : (),
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000973,5488,0.000000,sub _traverse_keyword_type ($self, $schema, $state) {
0.002341,1372,0.000002,if (is_plain_arrayref($schema->{type})) {
0.000048,76,0.000001,return E($state, 'type array is empty') if not $schema->{type}->@*;
0.000062,76,0.000001,foreach my $type ($schema->{type}->@*) {
0.000000,0,0.000000,return E($state, 'unrecognized type "%s"', $type//'<null>')
0.000656,692,0.000001,if not any { ($type//'') eq $_ } qw(null boolean object array string number integer);
0.000000,0,0.000000,}
0.000095,76,0.000001,return E($state, '"type" values are not unique') if not is_elements_unique($schema->{type});
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.001408,1296,0.000001,return if not assert_keyword_type($state, $schema, 'string');
0.000000,0,0.000000,return E($state, 'unrecognized type "%s"', $schema->{type}//'<null>')
0.007688,6393,0.000001,if not any { ($schema->{type}//'') eq $_ } qw(null boolean object array string number integer);
0.000000,0,0.000000,}
0.002036,1372,0.000001,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.028806,176395,0.000000,sub _eval_keyword_type ($self, $data, $schema, $state) {
0.039690,35279,0.000001,my $type = get_type($data);
0.016604,35279,0.000000,if (is_plain_arrayref($schema->{type})) {
0.000000,0,0.000000,return 1 if any {
0.000000,0,0.000000,$type eq $_ or ($_ eq 'number' and $type eq 'integer')
0.150975,26478,0.000006,or ($_ eq 'boolean' and $state->{scalarref_booleans} and $type eq 'reference to SCALAR')
0.065069,23004,0.000003,} $schema->{type}->@*;
0.000000,0,0.000000,return E($state, 'got %s, not one of %s', $type, join(', ', $schema->{type}->@*));
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,return 1 if $type eq $schema->{type} or ($schema->{type} eq 'number' and $type eq 'integer')
0.023832,12275,0.000002,or ($schema->{type} eq 'boolean' and $state->{scalarref_booleans} and $type eq 'reference to SCALAR');
0.004150,1105,0.000004,return E($state, 'got %s, not %s', $type, $schema->{type});
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000039,236,0.000000,sub _traverse_keyword_enum ($self, $schema, $state) {
0.000080,59,0.000001,return if not assert_keyword_type($state, $schema, 'array');
0.000099,59,0.000002,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.002272,7635,0.000000,sub _eval_keyword_enum ($self, $data, $schema, $state) {
0.000834,3054,0.000000,my @s; my $idx = 0;
0.001964,1527,0.000001,my %s = ( scalarref_booleans => $state->{scalarref_booleans} );
0.025684,8983,0.000003,return 1 if any { is_equal($data, $_, $s[$idx++] = {%s}) } $schema->{enum}->@*;
0.000000,0,0.000000,return E($state, 'value does not match'
0.000000,0,0.000000,.(!(grep $_->{path}, @s) ? ''
0.000494,66,0.000007,: ' (differences start '.join(', ', map 'from item #'.$_.' at "'.$s[$_]->{path}.'"', 0..$#s).')'));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000135,92,0.000001,sub _traverse_keyword_const { 1 }
0.000000,0,0.000000,
0.001289,6015,0.000000,sub _eval_keyword_const ($self, $data, $schema, $state) {
0.001305,1203,0.000001,my %s = ( scalarref_booleans => $state->{scalarref_booleans} );
0.003808,1203,0.000003,return 1 if is_equal($data, $schema->{const}, my $s = { scalarref_booleans => $state->{scalarref_booleans} });
0.000000,0,0.000000,return E($state, 'value does not match'
0.003646,795,0.000005,.($s->{path} ? ' (differences start at "'.$s->{path}.'")' : ''));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _traverse_keyword_multipleOf ($self, $schema, $state) {
0.000000,0,0.000000,return if not assert_keyword_type($state, $schema, 'number');
0.000000,0,0.000000,return E($state, 'multipleOf value is not a positive number') if $schema->{multipleOf} <= 0;
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_multipleOf ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not is_type('number', $data);
0.000000,0,0.000000,
0.000000,0,0.000000,# if either value is a float, use the bignum library for the calculation for an accurate remainder
0.000000,0,0.000000,if (ref($data) =~ /^Math::Big(?:Int|Float)$/ or ref($schema->{multipleOf}) =~ /^Math::Big(?:Int|Float)$/) {
0.000000,0,0.000000,$data = ref($data) =~ /^Math::Big(?:Int|Float)$/ ? $data->copy : Math::BigFloat->new($data);
0.000000,0,0.000000,my $divisor = ref($schema->{multipleOf}) =~ /^Math::Big(?:Int|Float)$/ ? $schema->{multipleOf} : Math::BigFloat->new($schema->{multipleOf});
0.000000,0,0.000000,my ($quotient, $remainder) = $data->bdiv($divisor);
0.000000,0,0.000000,return E($state, 'overflow while calculating quotient') if $quotient->is_inf;
0.000000,0,0.000000,return 1 if $remainder == 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,my $quotient = $data / $schema->{multipleOf};
0.000000,0,0.000000,return E($state, 'overflow while calculating quotient')
0.000000,0,0.000000,if "$]" >= 5.022 ? isinf($quotient) : $quotient =~ /^-?Inf$/i;
0.000000,0,0.000000,return 1 if int($quotient) == $quotient;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return E($state, 'value is not a multiple of %s', sprintf_num($schema->{multipleOf}));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000029,8,0.000004,sub _traverse_keyword_maximum { shift->_assert_number(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_maximum ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not is_type('number', $data);
0.000000,0,0.000000,return 1 if $data <= $schema->{maximum};
0.000000,0,0.000000,return E($state, 'value is larger than %s', sprintf_num($schema->{maximum}));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _traverse_keyword_exclusiveMaximum { shift->_assert_number(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_exclusiveMaximum ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not is_type('number', $data);
0.000000,0,0.000000,return 1 if $data < $schema->{exclusiveMaximum};
0.000000,0,0.000000,return E($state, 'value is equal to or larger than %s', sprintf_num($schema->{exclusiveMaximum}));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000734,21,0.000035,sub _traverse_keyword_minimum { shift->_assert_number(@_) }
0.000000,0,0.000000,
0.000067,395,0.000000,sub _eval_keyword_minimum ($self, $data, $schema, $state) {
0.000159,79,0.000002,return 1 if not is_type('number', $data);
0.000205,79,0.000003,return 1 if $data >= $schema->{minimum};
0.000000,0,0.000000,return E($state, 'value is smaller than %s', sprintf_num($schema->{minimum}));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,sub _traverse_keyword_exclusiveMinimum { shift->_assert_number(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_exclusiveMinimum ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not is_type('number', $data);
0.000000,0,0.000000,return 1 if $data > $schema->{exclusiveMinimum};
0.000000,0,0.000000,return E($state, 'value is equal to or smaller than %s', sprintf_num($schema->{exclusiveMinimum}));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000049,8,0.000006,sub _traverse_keyword_maxLength { shift->_assert_non_negative_integer(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_maxLength ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not is_type('string', $data);
0.000000,0,0.000000,return 1 if length($data) <= $schema->{maxLength};
0.000000,0,0.000000,return E($state, 'length is greater than %d', $schema->{maxLength});
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000047,8,0.000006,sub _traverse_keyword_minLength { shift->_assert_non_negative_integer(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_minLength ($self, $data, $schema, $state) {
0.000000,0,0.000000,
0.000000,0,0.000000,return 1 if not is_type('string', $data);
0.000000,0,0.000000,return 1 if length($data) >= $schema->{minLength};
0.000000,0,0.000000,return E($state, 'length is less than %d', $schema->{minLength});
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000047,276,0.000000,sub _traverse_keyword_pattern ($self, $schema, $state) {
0.000000,0,0.000000,return if not assert_keyword_type($state, $schema, 'string')
0.000161,69,0.000002,or not assert_pattern($state, $schema->{pattern});
0.000108,69,0.000002,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000256,1305,0.000000,sub _eval_keyword_pattern ($self, $data, $schema, $state) {
0.000285,261,0.000001,return 1 if not is_type('string', $data);
0.000000,0,0.000000,
0.002239,261,0.000009,return 1 if $data =~ m/$schema->{pattern}/;
0.000000,0,0.000000,return E($state, 'pattern does not match');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,sub _traverse_keyword_maxItems { shift->_assert_non_negative_integer(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_maxItems ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not is_type('array', $data);
0.000000,0,0.000000,return 1 if @$data <= $schema->{maxItems};
0.000000,0,0.000000,return E($state, 'more than %d item%s', $schema->{maxItems}, $schema->{maxItems} > 1 ? 's' : '');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000048,14,0.000003,sub _traverse_keyword_minItems { shift->_assert_non_negative_integer(@_) }
0.000000,0,0.000000,
0.001627,6160,0.000000,sub _eval_keyword_minItems ($self, $data, $schema, $state) {
0.003373,1232,0.000003,return 1 if not is_type('array', $data);
0.000255,127,0.000002,return 1 if @$data >= $schema->{minItems};
0.000000,0,0.000000,return E($state, 'fewer than %d item%s', $schema->{minItems}, $schema->{minItems} > 1 ? 's' : '');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,12,0.000000,sub _traverse_keyword_uniqueItems ($self, $schema, $state) {
0.000010,3,0.000003,return if not assert_keyword_type($state, $schema, 'boolean');
0.000005,3,0.000002,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.001928,6940,0.000000,sub _eval_keyword_uniqueItems ($self, $data, $schema, $state) {
0.003211,1388,0.000002,return 1 if not is_type('array', $data);
0.001034,283,0.000004,return 1 if not $schema->{uniqueItems};
0.001063,283,0.000004,return 1 if is_elements_unique($data, my $equal_indices = []);
0.000000,0,0.000000,return E($state, 'items at indices %d and %d are not unique', @$equal_indices);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Note: no effort is made to check if the 'contains' keyword has been disabled via its vocabulary.
0.000010,2,0.000005,sub _traverse_keyword_maxContains { shift->_assert_non_negative_integer(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_maxContains ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not exists $state->{_num_contains};
0.000000,0,0.000000,return 1 if not is_type('array', $data);
0.000000,0,0.000000,
0.000000,0,0.000000,return E($state, 'contains too many matching items')
0.000000,0,0.000000,if $state->{_num_contains} > $schema->{maxContains};
0.000000,0,0.000000,
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000002,1,0.000002,sub _traverse_keyword_minContains { shift->_assert_non_negative_integer(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_minContains ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not exists $state->{_num_contains};
0.000000,0,0.000000,return 1 if not is_type('array', $data);
0.000000,0,0.000000,
0.000000,0,0.000000,return E($state, 'contains too few matching items')
0.000000,0,0.000000,if $state->{_num_contains} < $schema->{minContains};
0.000000,0,0.000000,
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000015,3,0.000005,sub _traverse_keyword_maxProperties { shift->_assert_non_negative_integer(@_) }
0.000000,0,0.000000,
0.000021,75,0.000000,sub _eval_keyword_maxProperties ($self, $data, $schema, $state) {
0.000023,15,0.000002,return 1 if not is_type('object', $data);
0.000049,15,0.000003,return 1 if keys %$data <= $schema->{maxProperties};
0.000000,0,0.000000,return E($state, 'more than %d propert%s', $schema->{maxProperties},
0.000000,0,0.000000,$schema->{maxProperties} > 1 ? 'ies' : 'y');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000191,50,0.000004,sub _traverse_keyword_minProperties { shift->_assert_non_negative_integer(@_) }
0.000000,0,0.000000,
0.000534,2425,0.000000,sub _eval_keyword_minProperties ($self, $data, $schema, $state) {
0.000573,485,0.000001,return 1 if not is_type('object', $data);
0.001414,485,0.000003,return 1 if keys %$data >= $schema->{minProperties};
0.000000,0,0.000000,return E($state, 'fewer than %d propert%s', $schema->{minProperties},
0.000000,0,0.000000,$schema->{minProperties} > 1 ? 'ies' : 'y');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000222,1080,0.000000,sub _traverse_keyword_required ($self, $schema, $state) {
0.000299,270,0.000001,return if not assert_keyword_type($state, $schema, 'array');
0.000000,0,0.000000,return E($state, '"required" element is not a string')
0.001937,1017,0.000002,if any { !is_type('string', $_) } $schema->{required}->@*;
0.000348,270,0.000001,return E($state, '"required" values are not unique') if not is_elements_unique($schema->{required});
0.000496,270,0.000002,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.004352,23905,0.000000,sub _eval_keyword_required ($self, $data, $schema, $state) {
0.006665,4781,0.000001,return 1 if not is_type('object', $data);
0.000000,0,0.000000,
0.011908,4781,0.000002,my @missing = grep !exists $data->{$_}, $schema->{required}->@*;
0.006928,4781,0.000001,return 1 if not @missing;
0.006707,1435,0.000005,return E($state, 'missing propert%s: %s', @missing > 1 ? 'ies' : 'y', join(', ', @missing));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,4,0.000000,sub _traverse_keyword_dependentRequired ($self, $schema, $state) {
0.000001,1,0.000001,return if not assert_keyword_type($state, $schema, 'object');
0.000000,0,0.000000,
0.000014,1,0.000014,my $valid = 1;
0.000017,1,0.000017,foreach my $property (sort keys $schema->{dependentRequired}->%*) {
0.000000,0,0.000000,$valid = E({ %$state, _schema_path_suffix => $property }, 'value is not an array'), next
0.000001,1,0.000001,if not is_type('array', $schema->{dependentRequired}{$property});
0.000000,0,0.000000,
0.000002,1,0.000002,foreach my $index (0..$schema->{dependentRequired}{$property}->$#*) {
0.000000,0,0.000000,$valid = E({ %$state, _schema_path_suffix => [ $property, $index ] }, 'element #%d is not a string', $index)
0.000002,1,0.000002,if not is_type('string', $schema->{dependentRequired}{$property}[$index]);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,$valid = E({ %$state, _schema_path_suffix => $property }, 'elements are not unique')
0.000003,1,0.000003,if not is_elements_unique($schema->{dependentRequired}{$property});
0.000000,0,0.000000,}
0.000004,1,0.000004,return $valid;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_keyword_dependentRequired ($self, $data, $schema, $state) {
0.000000,0,0.000000,return 1 if not is_type('object', $data);
0.000000,0,0.000000,
0.000000,0,0.000000,my $valid = 1;
0.000000,0,0.000000,foreach my $property (sort keys $schema->{dependentRequired}->%*) {
0.000000,0,0.000000,next if not exists $data->{$property};
0.000000,0,0.000000,
0.000000,0,0.000000,if (my @missing = grep !exists($data->{$_}), $schema->{dependentRequired}{$property}->@*) {
0.000000,0,0.000000,$valid = E({ %$state, _schema_path_suffix => $property },
0.000000,0,0.000000,'missing propert%s: %s', @missing > 1 ? 'ies' : 'y', join(', ', @missing));
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return 1 if $valid;
0.000000,0,0.000000,return E($state, 'not all dependencies are satisfied');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000020,120,0.000000,sub _assert_number ($self, $schema, $state) {
0.000037,30,0.000001,return if not assert_keyword_type($state, $schema, 'number');
0.000051,30,0.000002,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000066,348,0.000000,sub _assert_non_negative_integer ($self, $schema, $state) {
0.000098,87,0.000001,return if not assert_keyword_type($state, $schema, 'integer');
0.000000,0,0.000000,return E($state, '%s value is not a non-negative integer', $state->{keyword})
0.000080,87,0.000001,if $schema->{$state->{keyword}} < 0;
0.000235,87,0.000003,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000008,1,0.000008,1;
0.000049,1,0.000049,__END__
