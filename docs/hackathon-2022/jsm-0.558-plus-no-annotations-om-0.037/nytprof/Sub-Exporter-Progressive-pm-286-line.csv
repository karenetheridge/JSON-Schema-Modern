# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Sub::Exporter::Progressive;
0.000001,1,0.000001,$Sub::Exporter::Progressive::VERSION = '0.001013';
0.000025,2,0.000012,use strict;
0.000062,2,0.000031,use warnings;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Only use Sub::Exporter if you need it
0.000000,0,0.000000,
0.000000,0,0.000000,sub _croak {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,&Carp::croak;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000002,2,0.000001,my ($self, @args) = @_;
0.000000,0,0.000000,
0.000001,2,0.000000,my $inner_target = caller;
0.000001,2,0.000000,my $export_data = sub_export_options($inner_target, @args);
0.000000,0,0.000000,
0.000000,2,0.000000,my $full_exporter;
0.000021,2,0.000011,no strict 'refs';
0.000052,2,0.000026,no warnings 'once';
0.000007,2,0.000003,@{"${inner_target}::EXPORT_OK"} = @{$export_data->{exports}};
0.000003,2,0.000002,@{"${inner_target}::EXPORT"} = @{$export_data->{defaults}};
0.000006,2,0.000003,%{"${inner_target}::EXPORT_TAGS"} = %{$export_data->{tags}};
0.000000,0,0.000000,*{"${inner_target}::import"} = sub {
0.000475,2,0.000237,use strict;
0.000001,1,0.000001,my ($self, @args) = @_;
0.000000,0,0.000000,
0.000002,1,0.000002,if ( grep {
0.000006,1,0.000006,length ref $_
0.000000,0,0.000000,or
0.000000,0,0.000000,$_ !~ / \A [:-]? \w+ \z /xm
0.000000,0,0.000000,} @args ) {
0.000000,0,0.000000,_croak 'your usage of Sub::Exporter::Progressive requires Sub::Exporter to be installed'
0.000000,0,0.000000,unless eval { require Sub::Exporter };
0.000000,0,0.000000,$full_exporter ||= Sub::Exporter::build_exporter($export_data->{original});
0.000000,0,0.000000,
0.000000,0,0.000000,goto $full_exporter;
0.000002,1,0.000002,} elsif ( defined( (my ($num) = grep { m/^\d/ } @args)[0] ) ) {
0.000000,0,0.000000,_croak "cannot export symbols with a leading digit: '$num'";
0.000000,0,0.000000,} else {
0.000001,1,0.000001,require Exporter;
0.000004,1,0.000004,s/ \A - /:/xm for @args;
0.000001,1,0.000001,@_ = ($self, @args);
0.000005,1,0.000005,goto \&Exporter::import;
0.000000,0,0.000000,}
0.000008,2,0.000004,};
0.000003,2,0.000002,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,1,0.000000,my $too_complicated = <<'DEATH';
0.000000,0,0.000000,You are using Sub::Exporter::Progressive, but the features your program uses from
0.000000,0,0.000000,Sub::Exporter cannot be implemented without Sub::Exporter, so you might as well
0.000000,0,0.000000,just use vanilla Sub::Exporter
0.000000,0,0.000000,DEATH
0.000000,0,0.000000,
0.000000,0,0.000000,sub sub_export_options {
0.000001,2,0.000000,my ($inner_target, $setup, $options) = @_;
0.000000,0,0.000000,
0.000000,2,0.000000,my @exports;
0.000000,0,0.000000,my @defaults;
0.000000,0,0.000000,my %tags;
0.000000,0,0.000000,
0.000001,2,0.000000,if ( ($setup||'') eq '-setup') {
0.000003,2,0.000002,my %options = %$options;
0.000000,0,0.000000,
0.000000,0,0.000000,OPTIONS:
0.000001,2,0.000000,for my $opt (keys %options) {
0.000000,4,0.000000,if ($opt eq 'exports') {
0.000000,0,0.000000,
0.000001,2,0.000000,_croak $too_complicated if ref $options{exports} ne 'ARRAY';
0.000002,2,0.000001,@exports = @{$options{exports}};
0.000001,2,0.000000,_croak $too_complicated if grep { length ref $_ } @exports;
0.000000,0,0.000000,
0.000000,0,0.000000,} elsif ($opt eq 'groups') {
0.000001,2,0.000000,%tags = %{$options{groups}};
0.000000,2,0.000000,for my $tagset (values %tags) {
0.000000,0,0.000000,_croak $too_complicated if grep {
0.000007,2,0.000004,length ref $_
0.000000,0,0.000000,or
0.000000,0,0.000000,$_ =~ / \A - (?! all \b ) /x
0.000002,2,0.000001,} @{$tagset};
0.000000,0,0.000000,}
0.000001,2,0.000000,@defaults = @{$tags{default} || [] };
0.000000,0,0.000000,} else {
0.000000,0,0.000000,_croak $too_complicated;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000011,6,0.000002,@{$_} = map { / \A  [:-] all \z /x ? @exports : $_ } @{$_} for \@defaults, values %tags;
0.000002,2,0.000001,$tags{all} ||= [ @exports ];
0.000003,2,0.000002,my %exports = map { $_ => 1 } @exports;
0.000000,2,0.000000,my @errors = grep { not $exports{$_} } @defaults;
0.000000,2,0.000000,_croak join(', ', @errors) . " is not exported by the $inner_target module\n" if @errors;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return {
0.000005,2,0.000002,exports => \@exports,
0.000000,0,0.000000,defaults => \@defaults,
0.000000,0,0.000000,original => $options,
0.000000,0,0.000000,tags => \%tags,
0.000000,0,0.000000,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
