# Profile data generated by Devel::NYTProf::Reader
# Version: v6.12
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,#
0.000000,0,0.000000,
0.000000,0,0.000000,package IO::Seekable;
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,IO::Seekable - supply seek based methods for I/O objects
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,use IO::Seekable;
0.000000,0,0.000000,package IO::Something;
0.000000,0,0.000000,@ISA = qw(IO::Seekable);
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,C<IO::Seekable> does not have a constructor of its own as it is intended to
0.000000,0,0.000000,be inherited by other C<IO::Handle> based objects. It provides methods
0.000000,0,0.000000,which allow seeking of the file descriptors.
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item $io->getpos
0.000000,0,0.000000,
0.000000,0,0.000000,Returns an opaque value that represents the current position of the
0.000000,0,0.000000,IO::File, or C<undef> if this is not possible (eg an unseekable stream such
0.000000,0,0.000000,as a terminal, pipe or socket). If the fgetpos() function is available in
0.000000,0,0.000000,your C library it is used to implements getpos, else perl emulates getpos
0.000000,0,0.000000,using C's ftell() function.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $io->setpos
0.000000,0,0.000000,
0.000000,0,0.000000,Uses the value of a previous getpos call to return to a previously visited
0.000000,0,0.000000,position. Returns "0 but true" on success, C<undef> on failure.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,See L<perlfunc> for complete descriptions of each of the following
0.000000,0,0.000000,supported C<IO::Seekable> methods, which are just front ends for the
0.000000,0,0.000000,corresponding built-in functions:
0.000000,0,0.000000,
0.000000,0,0.000000,=over 4
0.000000,0,0.000000,
0.000000,0,0.000000,=item $io->seek ( POS, WHENCE )
0.000000,0,0.000000,
0.000000,0,0.000000,Seek the IO::File to position POS, relative to WHENCE:
0.000000,0,0.000000,
0.000000,0,0.000000,=over 8
0.000000,0,0.000000,
0.000000,0,0.000000,=item WHENCE=0 (SEEK_SET)
0.000000,0,0.000000,
0.000000,0,0.000000,POS is absolute position. (Seek relative to the start of the file)
0.000000,0,0.000000,
0.000000,0,0.000000,=item WHENCE=1 (SEEK_CUR)
0.000000,0,0.000000,
0.000000,0,0.000000,POS is an offset from the current position. (Seek relative to current)
0.000000,0,0.000000,
0.000000,0,0.000000,=item WHENCE=2 (SEEK_END)
0.000000,0,0.000000,
0.000000,0,0.000000,POS is an offset from the end of the file. (Seek relative to end)
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,The SEEK_* constants can be imported from the C<Fcntl> module if you
0.000000,0,0.000000,don't wish to use the numbers C<0> C<1> or C<2> in your code.
0.000000,0,0.000000,
0.000000,0,0.000000,Returns C<1> upon success, C<0> otherwise.
0.000000,0,0.000000,
0.000000,0,0.000000,=item $io->sysseek( POS, WHENCE )
0.000000,0,0.000000,
0.000000,0,0.000000,Similar to $io->seek, but sets the IO::File's position using the system
0.000000,0,0.000000,call lseek(2) directly, so will confuse most perl IO operators except
0.000000,0,0.000000,sysread and syswrite (see L<perlfunc> for full details)
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the new position, or C<undef> on failure.  A position
0.000000,0,0.000000,of zero is returned as the string C<"0 but true">
0.000000,0,0.000000,
0.000000,0,0.000000,=item $io->tell
0.000000,0,0.000000,
0.000000,0,0.000000,Returns the IO::File's current position, or -1 on error.
0.000000,0,0.000000,
0.000000,0,0.000000,=back
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SEE ALSO
0.000000,0,0.000000,
0.000000,0,0.000000,L<perlfunc>, 
0.000000,0,0.000000,L<perlop/"I/O Operators">,
0.000000,0,0.000000,L<IO::Handle>
0.000000,0,0.000000,L<IO::File>
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 HISTORY
0.000000,0,0.000000,
0.000000,0,0.000000,Derived from FileHandle.pm by Graham Barr E<lt>gbarr@pobox.comE<gt>
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000031,2,0.000016,use 5.008_001;
0.000015,2,0.000008,use Carp;
0.000017,2,0.000008,use strict;
0.000932,2,0.000466,use IO::Handle ();
0.000000,0,0.000000,# XXX we can't get these from IO::Handle or we'll get prototype
0.000000,0,0.000000,# mismatch warnings on C<use POSIX; use IO::File;> :-(
0.000109,2,0.000054,use Fcntl qw(SEEK_SET SEEK_CUR SEEK_END);
0.000000,1,0.000000,require Exporter;
0.000000,0,0.000000,
0.000001,1,0.000001,our @EXPORT = qw(SEEK_SET SEEK_CUR SEEK_END);
0.000008,1,0.000008,our @ISA = qw(Exporter);
0.000000,0,0.000000,
0.000000,1,0.000000,our $VERSION = "1.48";
0.000000,0,0.000000,
0.000000,0,0.000000,sub seek {
0.000000,0,0.000000,@_ == 3 or croak 'usage: $io->seek(POS, WHENCE)';
0.000000,0,0.000000,seek($_[0], $_[1], $_[2]);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub sysseek {
0.000000,0,0.000000,@_ == 3 or croak 'usage: $io->sysseek(POS, WHENCE)';
0.000000,0,0.000000,sysseek($_[0], $_[1], $_[2]);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub tell {
0.000000,0,0.000000,@_ == 1 or croak 'usage: $io->tell()';
0.000000,0,0.000000,tell($_[0]);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
